<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use DB;

class _Sync extends Model
{
    public function __construc(){
        set_time_limit(800);
    }

    public static function syncAccountingAccount($data){
         // syncronize accounting_account table from offline to online 
         $al_online_list_offline = DB::table('accounting_account')->where('management_id', $data['management_id'])->get();   
         foreach($al_online_list_offline as $al_offline){  
             $al_offline_count = DB::connection('mysql2')->table('accounting_account')->where('a_id', $al_offline->a_id)->get();
                 if(count($al_offline_count) > 0){ 
                     if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                         DB::connection('mysql2')->table('accounting_account')->where('a_id', $al_offline->a_id)->update([
                             'accounting_id'=>$al_offline->accounting_id,
                             'user_id'=>$al_offline->user_id,
                             'management_id'=>$al_offline->management_id,
                             'name'=>$al_offline->name,
                             'user_fullname'=>$al_offline->user_fullname,
                             'user_address'=>$al_offline->user_address,
                             'gender'=>$al_offline->gender,
                             'birthday'=>$al_offline->birthday, 
                             'address'=>$al_offline->address,
                             'email'=>$al_offline->email,
                             'role'=>$al_offline->role,
                             'image'=>$al_offline->image,
                             'added_by'=>$al_offline->added_by,
                             'status'=>$al_offline->status,
                             'created_at'=>$al_offline->created_at,
                             'updated_at'=>$al_offline->updated_at
                         ]);
                     } 
                     
                     else{
                         DB::table('accounting_account')->where('a_id', $al_offline_count[0]->a_id)->update([
                            'accounting_id'=>$al_offline_count[0]->accounting_id,
                            'user_id'=>$al_offline_count[0]->user_id,
                            'management_id'=>$al_offline_count[0]->management_id,
                            'name'=>$al_offline_count[0]->name,
                            'user_fullname'=>$al_offline_count[0]->user_fullname,
                            'user_address'=>$al_offline_count[0]->user_address,
                            'gender'=>$al_offline_count[0]->gender,
                            'birthday'=>$al_offline_count[0]->birthday, 
                            'address'=>$al_offline_count[0]->address,
                            'email'=>$al_offline_count[0]->email,
                            'role'=>$al_offline_count[0]->role,
                            'image'=>$al_offline_count[0]->image,
                            'added_by'=>$al_offline_count[0]->added_by,
                            'status'=>$al_offline_count[0]->status,
                            'created_at'=>$al_offline_count[0]->created_at,
                            'updated_at'=>$al_offline_count[0]->updated_at
                         ]);
                     }
                 }else{
                     DB::connection('mysql2')->table('accounting_account')->insert([
                        'a_id'=>$al_offline->a_id,
                        'accounting_id'=>$al_offline->accounting_id,
                        'user_id'=>$al_offline->user_id,
                        'management_id'=>$al_offline->management_id,
                        'name'=>$al_offline->name,
                        'user_fullname'=>$al_offline->user_fullname,
                        'user_address'=>$al_offline->user_address,
                        'gender'=>$al_offline->gender,
                        'birthday'=>$al_offline->birthday, 
                        'address'=>$al_offline->address,
                        'email'=>$al_offline->email,
                        'role'=>$al_offline->role,
                        'image'=>$al_offline->image,
                        'added_by'=>$al_offline->added_by,
                        'status'=>$al_offline->status,
                        'created_at'=>$al_offline->created_at,
                        'updated_at'=>$al_offline->updated_at
                     ]); 
                 } 
         }  
 
         // syncronize accounting_account table from online to offline 
         $al_online_list = DB::connection('mysql2')->table('accounting_account')->where('management_id', $data['management_id'])->get();   
         foreach($al_online_list as $al_online){  
             $al_online_online = DB::table('accounting_account')->where('a_id', $al_online->a_id)->get();
                 if(count($al_online_online) > 0){
                     DB::table('accounting_account')->where('a_id', $al_online->a_id)->update([
                        'accounting_id'=>$al_online->accounting_id,
                        'user_id'=>$al_online->user_id,
                        'management_id'=>$al_online->management_id,
                        'name'=>$al_online->name,
                        'user_fullname'=>$al_online->user_fullname,
                        'user_address'=>$al_online->user_address,
                        'gender'=>$al_online->gender,
                        'birthday'=>$al_online->birthday, 
                        'address'=>$al_online->address,
                        'email'=>$al_online->email,
                        'role'=>$al_online->role,
                        'image'=>$al_online->image,
                        'added_by'=>$al_online->added_by,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                     ]);
         
                 }else{
                     DB::table('accounting_account')->insert([
                        'a_id'=>$al_online->a_id,
                        'accounting_id'=>$al_online->accounting_id,
                        'user_id'=>$al_online->user_id,
                        'management_id'=>$al_online->management_id,
                        'name'=>$al_online->name,
                        'user_fullname'=>$al_online->user_fullname,
                        'user_address'=>$al_online->user_address,
                        'gender'=>$al_online->gender,
                        'birthday'=>$al_online->birthday, 
                        'address'=>$al_online->address,
                        'email'=>$al_online->email,
                        'role'=>$al_online->role,
                        'image'=>$al_online->image,
                        'added_by'=>$al_online->added_by,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                     ]); 
                 } 
         } 
         return true;
    }

    public static function syncAdmissionAccount($data){
        // syncronize admission_account table from offline to online 
        $al_online_list_offline = DB::table('admission_account')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('admission_account')->where('ac_id', $al_offline->ac_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('admission_account')->where('ac_id', $al_offline->ac_id)->update([
                            'admission_id'=>$al_offline->admission_id,
                            'management_id'=>$al_offline->management_id,
                            'user_id'=>$al_offline->user_id,
                            'user_fullname'=>$al_offline->user_fullname,
                            'user_address'=>$al_offline->user_address,
                            'name'=>$al_offline->name,
                            'gender'=>$al_offline->gender,
                            'birthday'=>$al_offline->birthday, 
                            'address'=>$al_offline->address,
                            'role'=>$al_offline->role,
                            'added_by'=>$al_offline->added_by,
                            'email'=>$al_offline->email,
                            'image'=>$al_offline->image,
                            'status'=>$al_offline->status,
                            'created_at'=>$al_offline->created_at,
                            'updated_at'=>$al_offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('admission_account')->where('ac_id', $al_offline_count[0]->ac_id)->update([
                            'admission_id'=>$al_offline_count[0]->admission_id,
                            'management_id'=>$al_offline_count[0]->management_id,
                            'user_id'=>$al_offline_count[0]->user_id,
                            'user_fullname'=>$al_offline_count[0]->user_fullname,
                            'user_address'=>$al_offline_count[0]->user_address,
                            'name'=>$al_offline_count[0]->name,
                            'gender'=>$al_offline_count[0]->gender,
                            'birthday'=>$al_offline_count[0]->birthday, 
                            'address'=>$al_offline_count[0]->address,
                            'role'=>$al_offline_count[0]->role,
                            'added_by'=>$al_offline_count[0]->added_by,
                            'email'=>$al_offline_count[0]->email,
                            'image'=>$al_offline_count[0]->image,
                            'status'=>$al_offline_count[0]->status,
                            'created_at'=>$al_offline_count[0]->created_at,
                            'updated_at'=>$al_offline_count[0]->updated_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('admission_account')->insert([
                        'ac_id'=>$al_offline->ac_id,
                        'admission_id'=>$al_offline->admission_id,
                        'management_id'=>$al_offline->management_id,
                        'user_id'=>$al_offline->user_id,
                        'user_fullname'=>$al_offline->user_fullname,
                        'user_address'=>$al_offline->user_address,
                        'name'=>$al_offline->name,
                        'gender'=>$al_offline->gender,
                        'birthday'=>$al_offline->birthday, 
                        'address'=>$al_offline->address,
                        'role'=>$al_offline->role,
                        'added_by'=>$al_offline->added_by,
                        'email'=>$al_offline->email,
                        'image'=>$al_offline->image,
                        'status'=>$al_offline->status,
                        'created_at'=>$al_offline->created_at,
                        'updated_at'=>$al_offline->updated_at
                    ]); 
                } 
        }  

        // syncronize admission_account table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('admission_account')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('admission_account')->where('ac_id', $al_online->ac_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('admission_account')->where('ac_id', $al_online->ac_id)->update([
                        'admission_id'=>$al_online->admission_id,
                        'management_id'=>$al_online->management_id,
                        'user_id'=>$al_online->user_id,
                        'user_fullname'=>$al_online->user_fullname,
                        'user_address'=>$al_online->user_address,
                        'name'=>$al_online->name,
                        'gender'=>$al_online->gender,
                        'birthday'=>$al_online->birthday, 
                        'address'=>$al_online->address,
                        'role'=>$al_online->role,
                        'added_by'=>$al_online->added_by,
                        'email'=>$al_online->email,
                        'image'=>$al_online->image,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]);
        
                }else{
                    DB::table('admission_account')->insert([
                        'ac_id'=>$al_online->ac_id,
                        'admission_id'=>$al_online->admission_id,
                        'management_id'=>$al_online->management_id,
                        'user_id'=>$al_online->user_id,
                        'user_fullname'=>$al_online->user_fullname,
                        'user_address'=>$al_online->user_address,
                        'name'=>$al_online->name,
                        'gender'=>$al_online->gender,
                        'birthday'=>$al_online->birthday, 
                        'address'=>$al_online->address,
                        'role'=>$al_online->role,
                        'added_by'=>$al_online->added_by,
                        'email'=>$al_online->email,
                        'image'=>$al_online->image,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]); 
                } 
        } 
        return true;
    }

    public static function syncAppointmentList($data){
        // syncronize appointment_list table from offline to online 
        $al_online_list_offline = DB::table('appointment_list')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('appointment_list')->where('appointment_id', $al_offline->appointment_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('appointment_list')->where('appointment_id', $al_offline->appointment_id)->update([
                            'patients_id'=>$al_offline->patients_id,
                            'encoders_id'=>$al_offline->encoders_id,
                            'doctors_id'=>$al_offline->doctors_id,
                            'services'=>$al_offline->services,
                            'amount'=>$al_offline->amount,
                            'app_date'=>$al_offline->app_date,
                            'app_date_end'=>$al_offline->app_date_end,
                            'app_reason'=>$al_offline->app_reason,
                            'is_reschedule'=>$al_offline->is_reschedule,
                            'is_reschedule_date'=>$al_offline->is_reschedule_date,
                            'is_reschedule_reason'=>$al_offline->is_reschedule_reason,
                            'apperance'=>$al_offline->apperance,
                            'is_waiting'=>$al_offline->is_waiting,
                            'is_waiting_reason'=>$al_offline->is_waiting_reason,
                            'is_complete'=>$al_offline->is_complete,
                            'is_remove'=>$al_offline->is_remove,
                            'is_remove_reason'=>$al_offline->is_remove_reason,
                            'is_remove_date'=>$al_offline->is_remove_date,
                            'referred_by'=>$al_offline->referred_by,
                            'is_paid_bysecretary'=>$al_offline->is_paid_bysecretary,
                            'status'=>$al_offline->status,
                            'updated_at'=>$al_offline->updated_at,
                            'created_at'=>$al_offline->created_at
                        ]);
                    } 
                    
                    else{
                        DB::table('appointment_list')->where('appointment_id', $al_offline_count[0]->appointment_id)->update([
                            'patients_id'=>$al_offline_count[0]->patients_id,
                            'encoders_id'=>$al_offline_count[0]->encoders_id,
                            'doctors_id'=>$al_offline_count[0]->doctors_id,
                            'services'=>$al_offline_count[0]->services,
                            'amount'=>$al_offline_count[0]->amount,
                            'app_date'=>$al_offline_count[0]->app_date,
                            'app_date_end'=>$al_offline_count[0]->app_date_end,
                            'app_reason'=>$al_offline_count[0]->app_reason,
                            'is_reschedule'=>$al_offline_count[0]->is_reschedule,
                            'is_reschedule_date'=>$al_offline_count[0]->is_reschedule_date,
                            'is_reschedule_reason'=>$al_offline_count[0]->is_reschedule_reason,
                            'apperance'=>$al_offline_count[0]->apperance,
                            'is_waiting'=>$al_offline_count[0]->is_waiting,
                            'is_waiting_reason'=>$al_offline_count[0]->is_waiting_reason,
                            'is_complete'=>$al_offline_count[0]->is_complete,
                            'is_remove'=>$al_offline_count[0]->is_remove,
                            'is_remove_reason'=>$al_offline_count[0]->is_remove_reason,
                            'is_remove_date'=>$al_offline_count[0]->is_remove_date,
                            'referred_by'=>$al_offline_count[0]->referred_by,
                            'is_paid_bysecretary'=>$al_offline_count[0]->is_paid_bysecretary,
                            'status'=>$al_offline_count[0]->status,
                            'updated_at'=>$al_offline_count[0]->updated_at,
                            'created_at'=>$al_offline_count[0]->created_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('appointment_list')->insert([
                        'appointment_id' => $al_offline->appointment_id,
                        'patients_id'=>$al_offline->patients_id,
                        'encoders_id'=>$al_offline->encoders_id,
                        'doctors_id'=>$al_offline->doctors_id,
                        'services'=>$al_offline->services,
                        'amount'=>$al_offline->amount,
                        'app_date'=>$al_offline->app_date,
                        'app_date_end'=>$al_offline->app_date_end,
                        'app_reason'=>$al_offline->app_reason,
                        'is_reschedule'=>$al_offline->is_reschedule,
                        'is_reschedule_date'=>$al_offline->is_reschedule_date,
                        'is_reschedule_reason'=>$al_offline->is_reschedule_reason,
                        'apperance'=>$al_offline->apperance,
                        'is_waiting'=>$al_offline->is_waiting,
                        'is_waiting_reason'=>$al_offline->is_waiting_reason,
                        'is_complete'=>$al_offline->is_complete,
                        'is_remove'=>$al_offline->is_remove,
                        'is_remove_reason'=>$al_offline->is_remove_reason,
                        'is_remove_date'=>$al_offline->is_remove_date,
                        'referred_by'=>$al_offline->referred_by,
                        'is_paid_bysecretary'=>$al_offline->is_paid_bysecretary,
                        'status'=>$al_offline->status,
                        'updated_at'=>$al_offline->updated_at,
                        'created_at'=>$al_offline->created_at
                    ]); 
                } 
        }  

        // syncronize users table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('appointment_list')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('appointment_list')->where('appointment_id', $al_online->appointment_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('appointment_list')->where('appointment_id', $al_online->appointment_id)->update([
                        'patients_id'=>$al_online->patients_id,
                        'encoders_id'=>$al_online->encoders_id,
                        'doctors_id'=>$al_online->doctors_id,
                        'services'=>$al_online->services,
                        'amount'=>$al_online->amount,
                        'app_date'=>$al_online->app_date,
                        'app_date_end'=>$al_online->app_date_end,
                        'app_reason'=>$al_online->app_reason,
                        'is_reschedule'=>$al_online->is_reschedule,
                        'is_reschedule_date'=>$al_online->is_reschedule_date,
                        'is_reschedule_reason'=>$al_online->is_reschedule_reason,
                        'apperance'=>$al_online->apperance,
                        'is_waiting'=>$al_online->is_waiting,
                        'is_waiting_reason'=>$al_online->is_waiting_reason,
                        'is_complete'=>$al_online->is_complete,
                        'is_remove'=>$al_online->is_remove,
                        'is_remove_reason'=>$al_online->is_remove_reason,
                        'is_remove_date'=>$al_online->is_remove_date,
                        'referred_by'=>$al_online->referred_by,
                        'is_paid_bysecretary'=>$al_online->is_paid_bysecretary,
                        'status'=>$al_online->status,
                        'updated_at'=>$al_online->updated_at,
                        'created_at'=>$al_online->created_at
                    ]);
        
                }else{
                    DB::table('appointment_list')->insert([
                        'appointment_id'=>$al_online->appointment_id,
                        'patients_id'=>$al_online->patients_id,
                        'encoders_id'=>$al_online->encoders_id,
                        'doctors_id'=>$al_online->doctors_id,
                        'services'=>$al_online->services,
                        'amount'=>$al_online->amount,
                        'app_date'=>$al_online->app_date,
                        'app_date_end'=>$al_online->app_date_end,
                        'app_reason'=>$al_online->app_reason,
                        'is_reschedule'=>$al_online->is_reschedule,
                        'is_reschedule_date'=>$al_online->is_reschedule_date,
                        'is_reschedule_reason'=>$al_online->is_reschedule_reason,
                        'apperance'=>$al_online->apperance,
                        'is_waiting'=>$al_online->is_waiting,
                        'is_waiting_reason'=>$al_online->is_waiting_reason,
                        'is_complete'=>$al_online->is_complete,
                        'is_remove'=>$al_online->is_remove,
                        'is_remove_reason'=>$al_online->is_remove_reason,
                        'is_remove_date'=>$al_online->is_remove_date,
                        'referred_by'=>$al_online->referred_by,
                        'is_paid_bysecretary'=>$al_online->is_paid_bysecretary,
                        'status'=>$al_online->status,
                        'updated_at'=>$al_online->updated_at,
                        'created_at'=>$al_online->created_at
                    ]); 
                } 
        } 
        return true;
    }

    public static function syncCashier($data){
        // syncronize cashier table from offline to online 
        $al_online_list_offline = DB::table('cashier')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('cashier')->where('c_id', $al_offline->c_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('cashier')->where('c_id', $al_offline->c_id)->update([
                            'cashier_id'=>$al_offline->cashier_id,
                            'user_id'=>$al_offline->user_id,
                            'management_id'=>$al_offline->management_id,
                            'user_fullname'=>$al_offline->user_fullname,
                            'user_address'=>$al_offline->user_address,
                            'name'=>$al_offline->name,
                            'gender'=>$al_offline->gender,
                            'address'=>$al_offline->address,
                            'email'=>$al_offline->email,
                            'birthday'=>$al_offline->birthday,
                            'role'=>$al_offline->role,
                            'image'=>$al_offline->image,
                            'status'=>$al_offline->status,
                            'added_by'=>$al_offline->added_by,
                            'created_at'=>$al_offline->created_at,
                            'updated_at'=>$al_offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('cashier')->where('c_id', $al_offline_count[0]->c_id)->update([
                            'cashier_id'=>$al_offline_count[0]->cashier_id,
                            'user_id'=>$al_offline_count[0]->user_id,
                            'management_id'=>$al_offline_count[0]->management_id,
                            'user_fullname'=>$al_offline_count[0]->user_fullname,
                            'user_address'=>$al_offline_count[0]->user_address,
                            'name'=>$al_offline_count[0]->name,
                            'gender'=>$al_offline_count[0]->gender,
                            'address'=>$al_offline_count[0]->address,
                            'email'=>$al_offline_count[0]->email,
                            'birthday'=>$al_offline_count[0]->birthday,
                            'role'=>$al_offline_count[0]->role,
                            'image'=>$al_offline_count[0]->image,
                            'status'=>$al_offline_count[0]->status,
                            'added_by'=>$al_offline_count[0]->added_by,
                            'created_at'=>$al_offline_count[0]->created_at,
                            'updated_at'=>$al_offline_count[0]->updated_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('cashier')->insert([
                        'c_id' => $al_offline->c_id,
                        'cashier_id'=>$al_offline->cashier_id,
                        'user_id'=>$al_offline->user_id,
                        'management_id'=>$al_offline->management_id,
                        'user_fullname'=>$al_offline->user_fullname,
                        'user_address'=>$al_offline->user_address,
                        'name'=>$al_offline->name,
                        'gender'=>$al_offline->gender,
                        'address'=>$al_offline->address,
                        'email'=>$al_offline->email,
                        'birthday'=>$al_offline->birthday,
                        'role'=>$al_offline->role,
                        'image'=>$al_offline->image,
                        'status'=>$al_offline->status,
                        'added_by'=>$al_offline->added_by,
                        'created_at'=>$al_offline->created_at,
                        'updated_at'=>$al_offline->updated_at
                    ]); 
                } 
        }  

        // syncronize users table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('cashier')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('cashier')->where('c_id', $al_online->c_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('cashier')->where('c_id', $al_online->c_id)->update([
                        'cashier_id'=>$al_online->cashier_id,
                        'user_id'=>$al_online->user_id,
                        'management_id'=>$al_online->management_id,
                        'user_fullname'=>$al_online->user_fullname,
                        'user_address'=>$al_online->user_address,
                        'name'=>$al_online->name,
                        'gender'=>$al_online->gender,
                        'address'=>$al_online->address,
                        'email'=>$al_online->email,
                        'birthday'=>$al_online->birthday,
                        'role'=>$al_online->role,
                        'image'=>$al_online->image,
                        'status'=>$al_online->status,
                        'added_by'=>$al_online->added_by,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]);
        
                }else{
                    DB::table('cashier')->insert([
                        'c_id'=>$al_online->c_id,
                        'cashier_id'=>$al_online->cashier_id,
                        'user_id'=>$al_online->user_id,
                        'management_id'=>$al_online->management_id,
                        'user_fullname'=>$al_online->user_fullname,
                        'user_address'=>$al_online->user_address,
                        'name'=>$al_online->name,
                        'gender'=>$al_online->gender,
                        'address'=>$al_online->address,
                        'email'=>$al_online->email,
                        'birthday'=>$al_online->birthday,
                        'role'=>$al_online->role,
                        'image'=>$al_online->image,
                        'status'=>$al_online->status,
                        'added_by'=>$al_online->added_by,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]); 
                } 
        } 
        return true;
    }

    public static function syncCashierPatientBillsRecord($data){
        // syncronize cashier_patientbills_records table from offline to online 
        $al_online_list_offline = DB::table('cashier_patientbills_records')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('cashier_patientbills_records')->where('cpr_id', $al_offline->cpr_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('cashier_patientbills_records')->where('cpr_id', $al_offline->cpr_id)->update([
                            'trace_number'=>$al_offline->trace_number,
                            'management_id'=>$al_offline->management_id,
                            'main_mgmt_id'=>$al_offline->main_mgmt_id,
                            'doctors_id'=>$al_offline->doctors_id,
                            'patient_id'=>$al_offline->patient_id,
                            'hmo_used'=>$al_offline->hmo_used,
                            'hmo_category'=>$al_offline->hmo_category,
                            'charge_type'=>$al_offline->charge_type,
                            'bill_name'=>$al_offline->bill_name,
                            'bill_amount'=>$al_offline->bill_amount,
                            'bill_from'=>$al_offline->bill_from,
                            'bill_payment'=>$al_offline->bill_payment,
                            'bill_department'=>$al_offline->bill_department,
                            'bill_total'=>$al_offline->bill_total,
                            'transaction_category'=>$al_offline->transaction_category,
                            'home_service'=>$al_offline->home_service,
                            'discount' => $al_offline->discount,
                            'discount_reason' => $al_offline->discount_reason,
                            'note' => $al_offline->note,
                            'process_by'=>$al_offline->process_by,
                            'receipt_number'=>$al_offline->receipt_number,
                            'order_id'=>$al_offline->order_id,
                            'request_physician'=>$al_offline->request_physician,
                            'is_charged_paid'=>$al_offline->is_charged_paid,
                            'is_charged'=>$al_offline->is_charged,
                            'is_refund'=>$al_offline->is_refund,
                            'is_refund_reason'=>$al_offline->is_refund_reason,
                            'is_refund_date' =>$al_offline->is_refund_date,
                            'is_refund_by' =>$al_offline->is_refund_by,
                            'is_send_out' =>$al_offline->is_send_out,
                            'is_bill_out' =>$al_offline->is_bill_out,
                            'is_report_generate' =>$al_offline->is_report_generate,
                            'can_be_discounted' =>$al_offline->can_be_discounted,
                            'order_from' => $al_offline->order_from,
                            'status' =>$al_offline->status,
                            'created_at' =>$al_offline->created_at,
                            'updated_at' =>$al_offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('cashier_patientbills_records')->where('cpr_id', $al_offline_count[0]->cpr_id)->update([
                            'trace_number'=>$al_offline_count[0]->trace_number,
                            'management_id'=>$al_offline_count[0]->management_id,
                            'main_mgmt_id'=>$al_offline_count[0]->main_mgmt_id,
                            'doctors_id'=>$al_offline_count[0]->doctors_id,
                            'patient_id'=>$al_offline_count[0]->patient_id,
                            'hmo_used'=>$al_offline_count[0]->hmo_used,
                            'hmo_category'=>$al_offline_count[0]->hmo_category,
                            'charge_type'=>$al_offline_count[0]->charge_type,
                            'bill_name'=>$al_offline_count[0]->bill_name,
                            'bill_amount'=>$al_offline_count[0]->bill_amount,
                            'bill_from'=>$al_offline_count[0]->bill_from,
                            'bill_payment'=>$al_offline_count[0]->bill_payment,
                            'bill_department'=>$al_offline_count[0]->bill_department,
                            'bill_total'=>$al_offline_count[0]->bill_total,
                            'transaction_category'=>$al_offline_count[0]->transaction_category,
                            'home_service'=>$al_offline_count[0]->home_service,
                            'discount' => $al_offline_count[0]->discount,
                            'discount_reason' => $al_offline_count[0]->discount_reason,
                            'note' => $al_offline_count[0]->note,
                            'process_by'=>$al_offline_count[0]->process_by,
                            'receipt_number'=>$al_offline_count[0]->receipt_number,
                            'order_id'=>$al_offline_count[0]->order_id,
                            'request_physician'=>$al_offline_count[0]->request_physician,
                            'is_charged_paid'=>$al_offline_count[0]->is_charged_paid,
                            'is_charged'=>$al_offline_count[0]->is_charged,
                            'is_refund'=>$al_offline_count[0]->is_refund,
                            'is_refund_reason'=>$al_offline_count[0]->is_refund_reason,
                            'is_refund_date' =>$al_offline_count[0]->is_refund_date,
                            'is_refund_by' =>$al_offline_count[0]->is_refund_by,
                            'is_send_out' =>$al_offline_count[0]->is_send_out,
                            'is_bill_out' =>$al_offline_count[0]->is_bill_out,
                            'is_report_generate' =>$al_offline_count[0]->is_report_generate,
                            'can_be_discounted' =>$al_offline_count[0]->can_be_discounted,
                            'order_from' => $al_offline_count[0]->order_from,
                            'status' =>$al_offline_count[0]->status,
                            'created_at' =>$al_offline_count[0]->created_at,
                            'updated_at' =>$al_offline_count[0]->updated_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('cashier_patientbills_records')->insert([
                        'cpr_id'=>$al_offline->cpr_id,
                        'trace_number'=>$al_offline->trace_number,
                        'management_id'=>$al_offline->management_id,
                        'main_mgmt_id'=>$al_offline->main_mgmt_id,
                        'doctors_id'=>$al_offline->doctors_id,
                        'patient_id'=>$al_offline->patient_id,
                        'hmo_used'=>$al_offline->hmo_used,
                        'hmo_category'=>$al_offline->hmo_category,
                        'charge_type'=>$al_offline->charge_type,
                        'bill_name'=>$al_offline->bill_name,
                        'bill_amount'=>$al_offline->bill_amount,
                        'bill_from'=>$al_offline->bill_from,
                        'bill_payment'=>$al_offline->bill_payment,
                        'bill_department'=>$al_offline->bill_department,
                        'bill_total'=>$al_offline->bill_total,
                        'transaction_category'=>$al_offline->transaction_category,
                        'home_service'=>$al_offline->home_service,
                        'discount' => $al_offline->discount,
                        'discount_reason' => $al_offline->discount_reason,
                        'note' => $al_offline->note,
                        'process_by'=>$al_offline->process_by,
                        'receipt_number'=>$al_offline->receipt_number,
                        'order_id'=>$al_offline->order_id,
                        'request_physician'=>$al_offline->request_physician,
                        'is_charged_paid'=>$al_offline->is_charged_paid,
                        'is_charged'=>$al_offline->is_charged,
                        'is_refund'=>$al_offline->is_refund,
                        'is_refund_reason'=>$al_offline->is_refund_reason,
                        'is_refund_date' =>$al_offline->is_refund_date,
                        'is_refund_by' =>$al_offline->is_refund_by,
                        'is_send_out' =>$al_offline->is_send_out,
                        'is_bill_out' =>$al_offline->is_bill_out,
                        'is_report_generate' =>$al_offline->is_report_generate,
                        'can_be_discounted' =>$al_offline->can_be_discounted,
                        'order_from' => $al_offline->order_from,
                        'status' =>$al_offline->status,
                        'created_at' =>$al_offline->created_at,
                        'updated_at' =>$al_offline->updated_at
                    ]); 
                } 
        }  

        // syncronize cashier_patientbills_records table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('cashier_patientbills_records')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('cashier_patientbills_records')->where('cpr_id', $al_online->cpr_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('cashier_patientbills_records')->where('cpr_id', $al_online->cpr_id)->update([
                        'trace_number'=>$al_online->trace_number,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'doctors_id'=>$al_online->doctors_id,
                        'patient_id'=>$al_online->patient_id,
                        'hmo_used'=>$al_online->hmo_used,
                        'hmo_category'=>$al_online->hmo_category,
                        'charge_type'=>$al_online->charge_type,
                        'bill_name'=>$al_online->bill_name,
                        'bill_amount'=>$al_online->bill_amount,
                        'bill_from'=>$al_online->bill_from,
                        'bill_payment'=>$al_online->bill_payment,
                        'bill_department'=>$al_online->bill_department,
                        'bill_total'=>$al_online->bill_total,
                        'transaction_category'=>$al_online->transaction_category,
                        'home_service'=>$al_online->home_service,
                        'discount' => $al_online->discount,
                        'discount_reason' => $al_online->discount_reason,
                        'note' => $al_online->note,
                        'process_by'=>$al_online->process_by,
                        'receipt_number'=>$al_online->receipt_number,
                        'order_id'=>$al_online->order_id,
                        'request_physician'=>$al_online->request_physician,
                        'is_charged_paid'=>$al_online->is_charged_paid,
                        'is_charged'=>$al_online->is_charged,
                        'is_refund'=>$al_online->is_refund,
                        'is_refund_reason'=>$al_online->is_refund_reason,
                        'is_refund_date' =>$al_online->is_refund_date,
                        'is_refund_by' =>$al_online->is_refund_by,
                        'is_send_out' =>$al_online->is_send_out,
                        'is_bill_out' =>$al_online->is_bill_out,
                        'is_report_generate' =>$al_online->is_report_generate,
                        'can_be_discounted' =>$al_online->can_be_discounted,
                        'order_from' => $al_online->order_from,
                        'status' =>$al_online->status,
                        'created_at' =>$al_online->created_at,
                        'updated_at' =>$al_online->updated_at
                    ]);
        
                }else{
                    DB::table('cashier_patientbills_records')->insert([
                        'cpr_id'=>$al_online->cpr_id,
                        'trace_number'=>$al_online->trace_number,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'doctors_id'=>$al_online->doctors_id,
                        'patient_id'=>$al_online->patient_id,
                        'hmo_used'=>$al_online->hmo_used,
                        'hmo_category'=>$al_online->hmo_category,
                        'charge_type'=>$al_online->charge_type,
                        'bill_name'=>$al_online->bill_name,
                        'bill_amount'=>$al_online->bill_amount,
                        'bill_from'=>$al_online->bill_from,
                        'bill_payment'=>$al_online->bill_payment,
                        'bill_department'=>$al_online->bill_department,
                        'bill_total'=>$al_online->bill_total,
                        'transaction_category'=>$al_online->transaction_category,
                        'home_service'=>$al_online->home_service,
                        'discount' => $al_online->discount,
                        'discount_reason' => $al_online->discount_reason,
                        'note' => $al_online->note,
                        'process_by'=>$al_online->process_by,
                        'receipt_number'=>$al_online->receipt_number,
                        'order_id'=>$al_online->order_id,
                        'request_physician'=>$al_online->request_physician,
                        'is_charged_paid'=>$al_online->is_charged_paid,
                        'is_charged'=>$al_online->is_charged,
                        'is_refund'=>$al_online->is_refund,
                        'is_refund_reason'=>$al_online->is_refund_reason,
                        'is_refund_date' =>$al_online->is_refund_date,
                        'is_refund_by' =>$al_online->is_refund_by,
                        'is_send_out' =>$al_online->is_send_out,
                        'is_bill_out' =>$al_online->is_bill_out,
                        'is_report_generate' =>$al_online->is_report_generate,
                        'can_be_discounted' =>$al_online->can_be_discounted,
                        'order_from' => $al_online->order_from,
                        'status' =>$al_online->status,
                        'created_at' =>$al_online->created_at,
                        'updated_at' =>$al_online->updated_at
                    ]); 
                } 
        } 
        return true;
    }

    public static function syncCashierSalesExpenses($data){
        // syncronize cashier_sales_expenses table from offline to online 
        $al_online_list_offline = DB::table('cashier_sales_expenses')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('cashier_sales_expenses')->where('cse_id', $al_offline->cse_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('cashier_sales_expenses')->where('cse_id', $al_offline->cse_id)->update([
                            'management_id'=>$al_offline->management_id,
                            'main_mgmt_id'=>$al_offline->main_mgmt_id,
                            'date_start'=>$al_offline->date_start,
                            'type'=>$al_offline->type,
                            'name_desc'=>$al_offline->name_desc,
                            'amount'=>$al_offline->amount,
                            'status'=>$al_offline->status,
                            'created_at'=>$al_offline->created_at,
                            'updated_at'=>$al_offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('cashier_sales_expenses')->where('cse_id', $al_offline_count[0]->cse_id)->update([
                            'management_id'=>$al_offline_count[0]->management_id,
                            'main_mgmt_id'=>$al_offline_count[0]->main_mgmt_id,
                            'date_start'=>$al_offline_count[0]->date_start,
                            'type'=>$al_offline_count[0]->type,
                            'name_desc'=>$al_offline_count[0]->name_desc,
                            'amount'=>$al_offline_count[0]->amount,
                            'status'=>$al_offline_count[0]->status,
                            'created_at'=>$al_offline_count[0]->created_at,
                            'updated_at'=>$al_offline_count[0]->updated_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('cashier_sales_expenses')->insert([
                        'cse_id'=>$al_offline->cse_id,
                        'management_id'=>$al_offline->management_id,
                        'main_mgmt_id'=>$al_offline->main_mgmt_id,
                        'date_start'=>$al_offline->date_start,
                        'type'=>$al_offline->type,
                        'name_desc'=>$al_offline->name_desc,
                        'amount'=>$al_offline->amount,
                        'status'=>$al_offline->status,
                        'created_at'=>$al_offline->created_at,
                        'updated_at'=>$al_offline->updated_at
                    ]); 
                } 
        }  

        // syncronize cashier_sales_expenses table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('cashier_sales_expenses')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('cashier_sales_expenses')->where('cse_id', $al_online->cse_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('cashier_sales_expenses')->where('cse_id', $al_online->cse_id)->update([
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'date_start'=>$al_online->date_start,
                        'type'=>$al_online->type,
                        'name_desc'=>$al_online->name_desc,
                        'amount'=>$al_online->amount,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]);
        
                }else{
                    DB::table('cashier_sales_expenses')->insert([
                        'cse_id'=>$al_online->cse_id,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'date_start'=>$al_online->date_start,
                        'type'=>$al_online->type,
                        'name_desc'=>$al_online->name_desc,
                        'amount'=>$al_online->amount,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]); 
                } 
        } 
        return true;
    }


    public static function syncCashierStatementOfAccount($data){
        // syncronize cashier_statement_of_account table from offline to online 
        $al_online_list_offline = DB::table('cashier_statement_of_account')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('cashier_statement_of_account')->where('csa_id', $al_offline->csa_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('cashier_statement_of_account')->where('csa_id', $al_offline->csa_id)->update([
                            'soa_id'=>$al_offline->soa_id,
                            'cpr_id'=>$al_offline->cpr_id,
                            'trace_number'=>$al_offline->trace_number,
                            'management_id'=>$al_offline->management_id,
                            'main_mgmt_id'=>$al_offline->main_mgmt_id,
                            'doctors_id'=>$al_offline->doctors_id,
                            'patient_id'=>$al_offline->patient_id,
                            'hmo_used'=>$al_offline->hmo_used,
                            'hmo_category'=>$al_offline->hmo_category,
                            'charge_type'=>$al_offline->charge_type,
                            'bill_name'=>$al_offline->bill_name,
                            'bill_amount'=>$al_offline->bill_amount,
                            'bill_from'=>$al_offline->bill_from,
                            'bill_payment'=>$al_offline->bill_payment,
                            'bill_department'=>$al_offline->bill_department,
                            'bill_total'=>$al_offline->bill_total,
                            'transaction_category' => $al_offline->transaction_category,
                            'home_service' => $al_offline->home_service,
                            'discount' => $al_offline->discount,
                            'discount_reason'=>$al_offline->discount_reason,
                            'note'=>$al_offline->note,
                            'process_by'=>$al_offline->process_by,
                            'receipt_number'=>$al_offline->receipt_number,
                            'order_id'=>$al_offline->order_id,
                            'request_physician'=>$al_offline->request_physician,
                            'is_charged_paid'=>$al_offline->is_charged_paid,
                            'is_charged'=>$al_offline->is_charged,
                            'is_refund' =>$al_offline->is_refund,
                            'is_refund_reason' =>$al_offline->is_refund_reason,
                            'is_refund_date' =>$al_offline->is_refund_date,
                            'is_refund_by' =>$al_offline->is_refund_by,
                            'is_send_out' =>$al_offline->is_send_out,
                            'is_bill_out' =>$al_offline->is_bill_out,
                            'is_report_generate' => $al_offline->is_report_generate,
                            'can_be_discounted' =>$al_offline->can_be_discounted,
                            'order_from' =>$al_offline->order_from,
                            'bill_out_branch' =>$al_offline->bill_out_branch,
                            'bill_date' =>$al_offline->bill_date,
                            'status' =>$al_offline->status,
                            'created_at' =>$al_offline->created_at,
                            'updated_at' =>$al_offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('cashier_statement_of_account')->where('csa_id', $al_offline_count[0]->csa_id)->update([
                            'soa_id'=>$al_offline_count[0]->soa_id,
                            'cpr_id'=>$al_offline_count[0]->cpr_id,
                            'trace_number'=>$al_offline_count[0]->trace_number,
                            'management_id'=>$al_offline_count[0]->management_id,
                            'main_mgmt_id'=>$al_offline_count[0]->main_mgmt_id,
                            'doctors_id'=>$al_offline_count[0]->doctors_id,
                            'patient_id'=>$al_offline_count[0]->patient_id,
                            'hmo_used'=>$al_offline_count[0]->hmo_used,
                            'hmo_category'=>$al_offline_count[0]->hmo_category,
                            'charge_type'=>$al_offline_count[0]->charge_type,
                            'bill_name'=>$al_offline_count[0]->bill_name,
                            'bill_amount'=>$al_offline_count[0]->bill_amount,
                            'bill_from'=>$al_offline_count[0]->bill_from,
                            'bill_payment'=>$al_offline_count[0]->bill_payment,
                            'bill_department'=>$al_offline_count[0]->bill_department,
                            'bill_total'=>$al_offline_count[0]->bill_total,
                            'transaction_category' => $al_offline_count[0]->transaction_category,
                            'home_service' => $al_offline_count[0]->home_service,
                            'discount' => $al_offline_count[0]->discount,
                            'discount_reason'=>$al_offline_count[0]->discount_reason,
                            'note'=>$al_offline_count[0]->note,
                            'process_by'=>$al_offline_count[0]->process_by,
                            'receipt_number'=>$al_offline_count[0]->receipt_number,
                            'order_id'=>$al_offline_count[0]->order_id,
                            'request_physician'=>$al_offline_count[0]->request_physician,
                            'is_charged_paid'=>$al_offline_count[0]->is_charged_paid,
                            'is_charged'=>$al_offline_count[0]->is_charged,
                            'is_refund' =>$al_offline_count[0]->is_refund,
                            'is_refund_reason' =>$al_offline_count[0]->is_refund_reason,
                            'is_refund_date' =>$al_offline_count[0]->is_refund_date,
                            'is_refund_by' =>$al_offline_count[0]->is_refund_by,
                            'is_send_out' =>$al_offline_count[0]->is_send_out,
                            'is_bill_out' =>$al_offline_count[0]->is_bill_out,
                            'is_report_generate' => $al_offline_count[0]->is_report_generate,
                            'can_be_discounted' =>$al_offline_count[0]->can_be_discounted,
                            'order_from' =>$al_offline_count[0]->order_from,
                            'bill_out_branch' =>$al_offline_count[0]->bill_out_branch,
                            'bill_date' =>$al_offline_count[0]->bill_date,
                            'status' =>$al_offline_count[0]->status,
                            'created_at' =>$al_offline_count[0]->created_at,
                            'updated_at' =>$al_offline_count[0]->updated_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('cashier_statement_of_account')->insert([
                        'csa_id'=>$al_offline->csa_id,
                        'soa_id'=>$al_offline->soa_id,
                        'cpr_id'=>$al_offline->cpr_id,
                        'trace_number'=>$al_offline->trace_number,
                        'management_id'=>$al_offline->management_id,
                        'main_mgmt_id'=>$al_offline->main_mgmt_id,
                        'doctors_id'=>$al_offline->doctors_id,
                        'patient_id'=>$al_offline->patient_id,
                        'hmo_used'=>$al_offline->hmo_used,
                        'hmo_category'=>$al_offline->hmo_category,
                        'charge_type'=>$al_offline->charge_type,
                        'bill_name'=>$al_offline->bill_name,
                        'bill_amount'=>$al_offline->bill_amount,
                        'bill_from'=>$al_offline->bill_from,
                        'bill_payment'=>$al_offline->bill_payment,
                        'bill_department'=>$al_offline->bill_department,
                        'bill_total'=>$al_offline->bill_total,
                        'transaction_category' => $al_offline->transaction_category,
                        'home_service' => $al_offline->home_service,
                        'discount' => $al_offline->discount,
                        'discount_reason'=>$al_offline->discount_reason,
                        'note'=>$al_offline->note,
                        'process_by'=>$al_offline->process_by,
                        'receipt_number'=>$al_offline->receipt_number,
                        'order_id'=>$al_offline->order_id,
                        'request_physician'=>$al_offline->request_physician,
                        'is_charged_paid'=>$al_offline->is_charged_paid,
                        'is_charged'=>$al_offline->is_charged,
                        'is_refund' =>$al_offline->is_refund,
                        'is_refund_reason' =>$al_offline->is_refund_reason,
                        'is_refund_date' =>$al_offline->is_refund_date,
                        'is_refund_by' =>$al_offline->is_refund_by,
                        'is_send_out' =>$al_offline->is_send_out,
                        'is_bill_out' =>$al_offline->is_bill_out,
                        'is_report_generate' => $al_offline->is_report_generate,
                        'can_be_discounted' =>$al_offline->can_be_discounted,
                        'order_from' =>$al_offline->order_from,
                        'bill_out_branch' =>$al_offline->bill_out_branch,
                        'bill_date' =>$al_offline->bill_date,
                        'status' =>$al_offline->status,
                        'created_at' =>$al_offline->created_at,
                        'updated_at' =>$al_offline->updated_at
                    ]); 
                } 
        }  

        // syncronize cashier_statement_of_account table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('cashier_statement_of_account')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('cashier_statement_of_account')->where('csa_id', $al_online->csa_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('cashier_statement_of_account')->where('csa_id', $al_online->csa_id)->update([
                        'soa_id'=>$al_online->soa_id,
                        'cpr_id'=>$al_online->cpr_id,
                        'trace_number'=>$al_online->trace_number,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'doctors_id'=>$al_online->doctors_id,
                        'patient_id'=>$al_online->patient_id,
                        'hmo_used'=>$al_online->hmo_used,
                        'hmo_category'=>$al_online->hmo_category,
                        'charge_type'=>$al_online->charge_type,
                        'bill_name'=>$al_online->bill_name,
                        'bill_amount'=>$al_online->bill_amount,
                        'bill_from'=>$al_online->bill_from,
                        'bill_payment'=>$al_online->bill_payment,
                        'bill_department'=>$al_online->bill_department,
                        'bill_total'=>$al_online->bill_total,
                        'transaction_category' => $al_online->transaction_category,
                        'home_service' => $al_online->home_service,
                        'discount' => $al_online->discount,
                        'discount_reason'=>$al_online->discount_reason,
                        'note'=>$al_online->note,
                        'process_by'=>$al_online->process_by,
                        'receipt_number'=>$al_online->receipt_number,
                        'order_id'=>$al_online->order_id,
                        'request_physician'=>$al_online->request_physician,
                        'is_charged_paid'=>$al_online->is_charged_paid,
                        'is_charged'=>$al_online->is_charged,
                        'is_refund' =>$al_online->is_refund,
                        'is_refund_reason' =>$al_online->is_refund_reason,
                        'is_refund_date' =>$al_online->is_refund_date,
                        'is_refund_by' =>$al_online->is_refund_by,
                        'is_send_out' =>$al_online->is_send_out,
                        'is_bill_out' =>$al_online->is_bill_out,
                        'is_report_generate' => $al_online->is_report_generate,
                        'can_be_discounted' =>$al_online->can_be_discounted,
                        'order_from' =>$al_online->order_from,
                        'bill_out_branch' =>$al_online->bill_out_branch,
                        'bill_date' =>$al_online->bill_date,
                        'status' =>$al_online->status,
                        'created_at' =>$al_online->created_at,
                        'updated_at' =>$al_online->updated_at
                    ]);
        
                }else{
                    DB::table('cashier_statement_of_account')->insert([
                        'csa_id'=>$al_online->csa_id,
                        'soa_id'=>$al_online->soa_id,
                        'cpr_id'=>$al_online->cpr_id,
                        'trace_number'=>$al_online->trace_number,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'doctors_id'=>$al_online->doctors_id,
                        'patient_id'=>$al_online->patient_id,
                        'hmo_used'=>$al_online->hmo_used,
                        'hmo_category'=>$al_online->hmo_category,
                        'charge_type'=>$al_online->charge_type,
                        'bill_name'=>$al_online->bill_name,
                        'bill_amount'=>$al_online->bill_amount,
                        'bill_from'=>$al_online->bill_from,
                        'bill_payment'=>$al_online->bill_payment,
                        'bill_department'=>$al_online->bill_department,
                        'bill_total'=>$al_online->bill_total,
                        'transaction_category' => $al_online->transaction_category,
                        'home_service' => $al_online->home_service,
                        'discount' => $al_online->discount,
                        'discount_reason'=>$al_online->discount_reason,
                        'note'=>$al_online->note,
                        'process_by'=>$al_online->process_by,
                        'receipt_number'=>$al_online->receipt_number,
                        'order_id'=>$al_online->order_id,
                        'request_physician'=>$al_online->request_physician,
                        'is_charged_paid'=>$al_online->is_charged_paid,
                        'is_charged'=>$al_online->is_charged,
                        'is_refund' =>$al_online->is_refund,
                        'is_refund_reason' =>$al_online->is_refund_reason,
                        'is_refund_date' =>$al_online->is_refund_date,
                        'is_refund_by' =>$al_online->is_refund_by,
                        'is_send_out' =>$al_online->is_send_out,
                        'is_bill_out' =>$al_online->is_bill_out,
                        'is_report_generate' => $al_online->is_report_generate,
                        'can_be_discounted' =>$al_online->can_be_discounted,
                        'order_from' =>$al_online->order_from,
                        'bill_out_branch' =>$al_online->bill_out_branch,
                        'bill_date' =>$al_online->bill_date,
                        'status' =>$al_online->status,
                        'created_at' =>$al_online->created_at,
                        'updated_at' =>$al_online->updated_at
                    ]); 
                } 
        } 
        return true;
    }

    public static function syncClinicBank($data){
        // syncronize clinic_bank table from offline to online 
        $al_online_list_offline = DB::table('clinic_bank')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('clinic_bank')->where('bank_id', $al_offline->bank_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('clinic_bank')->where('bank_id', $al_offline->bank_id)->update([
                            'management_id'=>$al_offline->management_id,
                            'main_mgmt_id'=>$al_offline->main_mgmt_id,
                            'bank_name'=>$al_offline->bank_name,
                            'bank_address'=>$al_offline->bank_address,
                            'bank_account_no'=>$al_offline->bank_account_no,
                            'added_by'=>$al_offline->added_by,
                            'reason'=>$al_offline->reason,
                            'status'=>$al_offline->status,
                            'created_at'=>$al_offline->created_at,
                            'updated_at'=>$al_offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('clinic_bank')->where('bank_id', $al_offline_count[0]->bank_id)->update([
                            'management_id'=>$al_offline_count[0]->management_id,
                            'main_mgmt_id'=>$al_offline_count[0]->main_mgmt_id,
                            'bank_name'=>$al_offline_count[0]->bank_name,
                            'bank_address'=>$al_offline_count[0]->bank_address,
                            'bank_account_no'=>$al_offline_count[0]->bank_account_no,
                            'added_by'=>$al_offline_count[0]->added_by,
                            'reason'=>$al_offline_count[0]->reason,
                            'status'=>$al_offline_count[0]->status,
                            'created_at'=>$al_offline_count[0]->created_at,
                            'updated_at'=>$al_offline_count[0]->updated_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('clinic_bank')->insert([
                        'bank_id'=>$al_offline->bank_id,
                        'management_id'=>$al_offline->management_id,
                        'main_mgmt_id'=>$al_offline->main_mgmt_id,
                        'bank_name'=>$al_offline->bank_name,
                        'bank_address'=>$al_offline->bank_address,
                        'bank_account_no'=>$al_offline->bank_account_no,
                        'added_by'=>$al_offline->added_by,
                        'reason'=>$al_offline->reason,
                        'status'=>$al_offline->status,
                        'created_at'=>$al_offline->created_at,
                        'updated_at'=>$al_offline->updated_at
                    ]); 
                } 
        }  

        // syncronize users table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('clinic_bank')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('clinic_bank')->where('bank_id', $al_online->bank_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('clinic_bank')->where('bank_id', $al_online->bank_id)->update([
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'bank_name'=>$al_online->bank_name,
                        'bank_address'=>$al_online->bank_address,
                        'bank_account_no'=>$al_online->bank_account_no,
                        'added_by'=>$al_online->added_by,
                        'reason'=>$al_online->reason,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]);
        
                }else{
                    DB::table('clinic_bank')->insert([
                        'bank_id'=>$al_online->bank_id,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'bank_name'=>$al_online->bank_name,
                        'bank_address'=>$al_online->bank_address,
                        'bank_account_no'=>$al_online->bank_account_no,
                        'added_by'=>$al_online->added_by,
                        'reason'=>$al_online->reason,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]); 
                } 
        } 
        return true;
    }

    public static function syncClinicBankContacts($data){
        // syncronize clinic_bank table from offline to online 
        $al_online_list_offline = DB::table('clinic_bank')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('clinic_bank')->where('cbc_id', $al_offline->cbc_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('clinic_bank')->where('cbc_id', $al_offline->cbc_id)->update([
                            'management_id'=>$al_offline->management_id,
                            'main_mgmt_id'=>$al_offline->main_mgmt_id,
                            'bank_id'=>$al_offline->bank_id,
                            'contact_person'=>$al_offline->contact_person,
                            'contact_number'=>$al_offline->contact_number,
                            'contact_position'=>$al_offline->contact_position,
                            'updated_at'=>$al_offline->updated_at,
                            'created_at'=>$al_offline->created_at
                        ]);
                    } 
                    
                    else{
                        DB::table('clinic_bank')->where('cbc_id', $al_offline_count[0]->cbc_id)->update([
                            'management_id'=>$al_offline_count[0]->management_id,
                            'main_mgmt_id'=>$al_offline_count[0]->main_mgmt_id,
                            'bank_id'=>$al_offline_count[0]->bank_id,
                            'contact_person'=>$al_offline_count[0]->contact_person,
                            'contact_number'=>$al_offline_count[0]->contact_number,
                            'contact_position'=>$al_offline_count[0]->contact_position,
                            'updated_at'=>$al_offline_count[0]->updated_at,
                            'created_at'=>$al_offline_count[0]->created_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('clinic_bank')->insert([
                        'cbc_id'=>$al_offline->cbc_id,
                        'management_id'=>$al_offline->management_id,
                        'main_mgmt_id'=>$al_offline->main_mgmt_id,
                        'bank_id'=>$al_offline->bank_id,
                        'contact_person'=>$al_offline->contact_person,
                        'contact_number'=>$al_offline->contact_number,
                        'contact_position'=>$al_offline->contact_position,
                        'updated_at'=>$al_offline->updated_at,
                        'created_at'=>$al_offline->created_at
                    ]); 
                } 
        }  

        // syncronize users table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('clinic_bank')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('clinic_bank')->where('cbc_id', $al_online->cbc_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('clinic_bank')->where('cbc_id', $al_online->cbc_id)->update([
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'bank_id'=>$al_online->bank_id,
                        'contact_person'=>$al_online->contact_person,
                        'contact_number'=>$al_online->contact_number,
                        'contact_position'=>$al_online->contact_position,
                        'updated_at'=>$al_online->updated_at,
                        'created_at'=>$al_online->created_at
                    ]);
        
                }else{
                    DB::table('clinic_bank')->insert([
                        'cbc_id'=>$al_online->cbc_id,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'bank_id'=>$al_online->bank_id,
                        'contact_person'=>$al_online->contact_person,
                        'contact_number'=>$al_online->contact_number,
                        'contact_position'=>$al_online->contact_position,
                        'updated_at'=>$al_online->updated_at,
                        'created_at'=>$al_online->created_at
                    ]); 
                } 
        } 
        return true;
    }

    public static function syncClinicBankTransaction($data){
        // syncronize clinic_bank_transaction table from offline to online 
        $al_online_list_offline = DB::table('clinic_bank_transaction')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('clinic_bank_transaction')->where('trans_id', $al_offline->trans_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('clinic_bank_transaction')->where('trans_id', $al_offline->trans_id)->update([
                            'management_id'=>$al_offline->management_id,
                            'main_mgmt_id'=>$al_offline->main_mgmt_id,
                            'account'=>$al_offline->account,
                            'amount'=>$al_offline->amount,
                            'payment_type'=>$al_offline->payment_type,
                            'date_transact'=>$al_offline->date_transact,
                            'check_date'=>$al_offline->check_date,
                            'check_number'=>$al_offline->check_number,
                            'bank_name'=>$al_offline->bank_name,
                            'bank_id'=>$al_offline->bank_id,
                            'authorized_person'=>$al_offline->authorized_person,
                            'added_by'=>$al_offline->added_by,
                            'note'=>$al_offline->note,
                            'category'=>$al_offline->category,
                            'invoice_number'=>$al_offline->invoice_number,
                            'transaction_type'=>$al_offline->transaction_type,
                            'created_at'=>$al_offline->created_at,
                            'updated_at'=>$al_offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('clinic_bank_transaction')->where('trans_id', $al_offline_count[0]->trans_id)->update([
                            'management_id'=>$al_offline_count[0]->management_id,
                            'main_mgmt_id'=>$al_offline_count[0]->main_mgmt_id,
                            'account'=>$al_offline_count[0]->account,
                            'amount'=>$al_offline_count[0]->amount,
                            'payment_type'=>$al_offline_count[0]->payment_type,
                            'date_transact'=>$al_offline_count[0]->date_transact,
                            'check_date'=>$al_offline_count[0]->check_date,
                            'check_number'=>$al_offline_count[0]->check_number,
                            'bank_name'=>$al_offline_count[0]->bank_name,
                            'bank_id'=>$al_offline_count[0]->bank_id,
                            'authorized_person'=>$al_offline_count[0]->authorized_person,
                            'added_by'=>$al_offline_count[0]->added_by,
                            'note'=>$al_offline_count[0]->note,
                            'category'=>$al_offline_count[0]->category,
                            'invoice_number'=>$al_offline_count[0]->invoice_number,
                            'transaction_type'=>$al_offline_count[0]->transaction_type,
                            'created_at'=>$al_offline_count[0]->created_at,
                            'updated_at'=>$al_offline_count[0]->updated_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('clinic_bank_transaction')->insert([
                        'trans_id'=>$al_offline->trans_id,
                        'management_id'=>$al_offline->management_id,
                        'main_mgmt_id'=>$al_offline->main_mgmt_id,
                        'account'=>$al_offline->account,
                        'amount'=>$al_offline->amount,
                        'payment_type'=>$al_offline->payment_type,
                        'date_transact'=>$al_offline->date_transact,
                        'check_date'=>$al_offline->check_date,
                        'check_number'=>$al_offline->check_number,
                        'bank_name'=>$al_offline->bank_name,
                        'bank_id'=>$al_offline->bank_id,
                        'authorized_person'=>$al_offline->authorized_person,
                        'added_by'=>$al_offline->added_by,
                        'note'=>$al_offline->note,
                        'category'=>$al_offline->category,
                        'invoice_number'=>$al_offline->invoice_number,
                        'transaction_type'=>$al_offline->transaction_type,
                        'created_at'=>$al_offline->created_at,
                        'updated_at'=>$al_offline->updated_at
                    ]); 
                } 
        }  

        // syncronize users table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('clinic_bank_transaction')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('clinic_bank_transaction')->where('trans_id', $al_online->trans_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('clinic_bank_transaction')->where('trans_id', $al_online->trans_id)->update([
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'account'=>$al_online->account,
                        'amount'=>$al_online->amount,
                        'payment_type'=>$al_online->payment_type,
                        'date_transact'=>$al_online->date_transact,
                        'check_date'=>$al_online->check_date,
                        'check_number'=>$al_online->check_number,
                        'bank_name'=>$al_online->bank_name,
                        'bank_id'=>$al_online->bank_id,
                        'authorized_person'=>$al_online->authorized_person,
                        'added_by'=>$al_online->added_by,
                        'note'=>$al_online->note,
                        'category'=>$al_online->category,
                        'invoice_number'=>$al_online->invoice_number,
                        'transaction_type'=>$al_online->transaction_type,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]);
        
                }else{
                    DB::table('clinic_bank_transaction')->insert([
                        'trans_id'=>$al_online->trans_id,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'account'=>$al_online->account,
                        'amount'=>$al_online->amount,
                        'payment_type'=>$al_online->payment_type,
                        'date_transact'=>$al_online->date_transact,
                        'check_date'=>$al_online->check_date,
                        'check_number'=>$al_online->check_number,
                        'bank_name'=>$al_online->bank_name,
                        'bank_id'=>$al_online->bank_id,
                        'authorized_person'=>$al_online->authorized_person,
                        'added_by'=>$al_online->added_by,
                        'note'=>$al_online->note,
                        'category'=>$al_online->category,
                        'invoice_number'=>$al_online->invoice_number,
                        'transaction_type'=>$al_online->transaction_type,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]); 
                } 
        } 
        return true;
    }

    public static function syncClinicExpensesList($data){
        // syncronize clinic_expenses_list table from offline to online 
        $al_online_list_offline = DB::table('clinic_expenses_list')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('clinic_expenses_list')->where('expense_id', $al_offline->expense_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('clinic_expenses_list')->where('expense_id', $al_offline->expense_id)->update([
                            'expense_main_id'=>$al_offline->expense_main_id,
                            'management_id'=>$al_offline->management_id,
                            'main_mgmt_id'=>$al_offline->main_mgmt_id,
                            'invoice_date'=>$al_offline->invoice_date,
                            'voucher'=>$al_offline->voucher,
                            'description'=>$al_offline->description,
                            'tin'=>$al_offline->tin,
                            'quantity'=>$al_offline->quantity,
                            'unit_price'=>$al_offline->unit_price,
                            'tax'=>$al_offline->tax,
                            'amount'=>$al_offline->amount,
                            'status'=>$al_offline->status,
                            'created_at'=>$al_offline->created_at,
                            'updated_at'=>$al_offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('clinic_expenses_list')->where('expense_id', $al_offline_count[0]->expense_id)->update([
                            'expense_main_id'=>$al_offline_count[0]->expense_main_id,
                            'management_id'=>$al_offline_count[0]->management_id,
                            'main_mgmt_id'=>$al_offline_count[0]->main_mgmt_id,
                            'invoice_date'=>$al_offline_count[0]->invoice_date,
                            'voucher'=>$al_offline_count[0]->voucher,
                            'description'=>$al_offline_count[0]->description,
                            'tin'=>$al_offline_count[0]->tin,
                            'quantity'=>$al_offline_count[0]->quantity,
                            'unit_price'=>$al_offline_count[0]->unit_price,
                            'tax'=>$al_offline_count[0]->tax,
                            'amount'=>$al_offline_count[0]->amount,
                            'status'=>$al_offline_count[0]->status,
                            'created_at'=>$al_offline_count[0]->created_at,
                            'updated_at'=>$al_offline_count[0]->updated_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('clinic_expenses_list')->insert([
                        'expense_id'=>$al_offline->expense_id,
                        'expense_main_id'=>$al_offline->expense_main_id,
                        'management_id'=>$al_offline->management_id,
                        'main_mgmt_id'=>$al_offline->main_mgmt_id,
                        'invoice_date'=>$al_offline->invoice_date,
                        'voucher'=>$al_offline->voucher,
                        'description'=>$al_offline->description,
                        'tin'=>$al_offline->tin,
                        'quantity'=>$al_offline->quantity,
                        'unit_price'=>$al_offline->unit_price,
                        'tax'=>$al_offline->tax,
                        'amount'=>$al_offline->amount,
                        'status'=>$al_offline->status,
                        'created_at'=>$al_offline->created_at,
                        'updated_at'=>$al_offline->updated_at
                    ]); 
                } 
        }  

        // syncronize users table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('clinic_expenses_list')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('clinic_expenses_list')->where('expense_id', $al_online->expense_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('clinic_expenses_list')->where('expense_id', $al_online->expense_id)->update([
                        'expense_main_id'=>$al_online->expense_main_id,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'invoice_date'=>$al_online->invoice_date,
                        'voucher'=>$al_online->voucher,
                        'description'=>$al_online->description,
                        'tin'=>$al_online->tin,
                        'quantity'=>$al_online->quantity,
                        'unit_price'=>$al_online->unit_price,
                        'tax'=>$al_online->tax,
                        'amount'=>$al_online->amount,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]);
        
                }else{
                    DB::table('clinic_expenses_list')->insert([
                        'expense_id'=>$al_online->expense_id,
                        'expense_main_id'=>$al_online->expense_main_id,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'invoice_date'=>$al_online->invoice_date,
                        'voucher'=>$al_online->voucher,
                        'description'=>$al_online->description,
                        'tin'=>$al_online->tin,
                        'quantity'=>$al_online->quantity,
                        'unit_price'=>$al_online->unit_price,
                        'tax'=>$al_online->tax,
                        'amount'=>$al_online->amount,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]); 
                } 
        } 
        return true;
    }

    public static function syncClinicLeaveApplication($data){
        // syncronize clinic_leave_application table from offline to online 
        $al_online_list_offline = DB::table('clinic_leave_application')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('clinic_leave_application')->where('cla_id', $al_offline->cla_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('clinic_leave_application')->where('cla_id', $al_offline->cla_id)->update([
                            'management_id'=>$al_offline->management_id,
                            'main_mgmt_id'=>$al_offline->main_mgmt_id,
                            'user_id'=>$al_offline->user_id,
                            'purpose'=>$al_offline->purpose,
                            'leave_type'=>$al_offline->leave_type,
                            'date_from'=>$al_offline->date_from,
                            'date_to'=>$al_offline->date_to,
                            'no_days'=>$al_offline->no_days,
                            'payment_type'=>$al_offline->payment_type,
                            'noted_by'=>$al_offline->noted_by,
                            'noted_by_des'=>$al_offline->noted_by_des,
                            'approved_by'=>$al_offline->approved_by,
                            'approved_by_des'=>$al_offline->approved_by_des,
                            'disapprove_reason'=>$al_offline->disapprove_reason,
                            'status'=>$al_offline->status,
                            'created_at'=>$al_offline->created_at,
                            'updated_at'=>$al_offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('clinic_leave_application')->where('cla_id', $al_offline_count[0]->cla_id)->update([
                            'management_id'=>$al_offline_count[0]->management_id,
                            'main_mgmt_id'=>$al_offline_count[0]->main_mgmt_id,
                            'user_id'=>$al_offline_count[0]->user_id,
                            'purpose'=>$al_offline_count[0]->purpose,
                            'leave_type'=>$al_offline_count[0]->leave_type,
                            'date_from'=>$al_offline_count[0]->date_from,
                            'date_to'=>$al_offline_count[0]->date_to,
                            'no_days'=>$al_offline_count[0]->no_days,
                            'payment_type'=>$al_offline_count[0]->payment_type,
                            'noted_by'=>$al_offline_count[0]->noted_by,
                            'noted_by_des'=>$al_offline_count[0]->noted_by_des,
                            'approved_by'=>$al_offline_count[0]->approved_by,
                            'approved_by_des'=>$al_offline_count[0]->approved_by_des,
                            'disapprove_reason'=>$al_offline_count[0]->disapprove_reason,
                            'status'=>$al_offline_count[0]->status,
                            'created_at'=>$al_offline_count[0]->created_at,
                            'updated_at'=>$al_offline_count[0]->updated_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('clinic_leave_application')->insert([
                        'cla_id'=>$al_offline->cla_id,
                        'management_id'=>$al_offline->management_id,
                        'main_mgmt_id'=>$al_offline->main_mgmt_id,
                        'user_id'=>$al_offline->user_id,
                        'purpose'=>$al_offline->purpose,
                        'leave_type'=>$al_offline->leave_type,
                        'date_from'=>$al_offline->date_from,
                        'date_to'=>$al_offline->date_to,
                        'no_days'=>$al_offline->no_days,
                        'payment_type'=>$al_offline->payment_type,
                        'noted_by'=>$al_offline->noted_by,
                        'noted_by_des'=>$al_offline->noted_by_des,
                        'approved_by'=>$al_offline->approved_by,
                        'approved_by_des'=>$al_offline->approved_by_des,
                        'disapprove_reason'=>$al_offline->disapprove_reason,
                        'status'=>$al_offline->status,
                        'created_at'=>$al_offline->created_at,
                        'updated_at'=>$al_offline->updated_at
                    ]); 
                } 
        }  

        // syncronize clinic_leave_application table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('clinic_leave_application')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('clinic_leave_application')->where('cla_id', $al_online->cla_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('clinic_leave_application')->where('cla_id', $al_online->cla_id)->update([
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'user_id'=>$al_online->user_id,
                        'purpose'=>$al_online->purpose,
                        'leave_type'=>$al_online->leave_type,
                        'date_from'=>$al_online->date_from,
                        'date_to'=>$al_online->date_to,
                        'no_days'=>$al_online->no_days,
                        'payment_type'=>$al_online->payment_type,
                        'noted_by'=>$al_online->noted_by,
                        'noted_by_des'=>$al_online->noted_by_des,
                        'approved_by'=>$al_online->approved_by,
                        'approved_by_des'=>$al_online->approved_by_des,
                        'disapprove_reason'=>$al_online->disapprove_reason,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]);
        
                }else{
                    DB::table('clinic_leave_application')->insert([
                        'cla_id'=>$al_online->cla_id,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'user_id'=>$al_online->user_id,
                        'purpose'=>$al_online->purpose,
                        'leave_type'=>$al_online->leave_type,
                        'date_from'=>$al_online->date_from,
                        'date_to'=>$al_online->date_to,
                        'no_days'=>$al_online->no_days,
                        'payment_type'=>$al_online->payment_type,
                        'noted_by'=>$al_online->noted_by,
                        'noted_by_des'=>$al_online->noted_by_des,
                        'approved_by'=>$al_online->approved_by,
                        'approved_by_des'=>$al_online->approved_by_des,
                        'disapprove_reason'=>$al_online->disapprove_reason,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]); 
                } 
        } 
        return true;
    }

    public static function syncClinicResignationType($data){
        // syncronize clinic_resignation_type table from offline to online 
        $al_online_list_offline = DB::table('clinic_resignation_type')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list_offline as $al_offline){  
            $al_offline_count = DB::connection('mysql2')->table('clinic_resignation_type')->where('crt_id', $al_offline->crt_id)->get();
                if(count($al_offline_count) > 0){ 
                    if($al_offline->updated_at > $al_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('clinic_resignation_type')->where('crt_id', $al_offline->crt_id)->update([
                            'management_id'=>$al_offline->management_id,
                            'main_mgmt_id'=>$al_offline->main_mgmt_id,
                            'old_management'=>$al_offline->old_management,
                            'user_id'=>$al_offline->user_id,
                            'resignation_type'=>$al_offline->resignation_type,
                            'resign_effect'=>$al_offline->resign_effect,
                            'status'=>$al_offline->status,
                            'created_at'=>$al_offline->created_at,
                            'updated_at'=>$al_offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('clinic_resignation_type')->where('crt_id', $al_offline_count[0]->crt_id)->update([
                            'management_id'=>$al_offline_count[0]->management_id,
                            'main_mgmt_id'=>$al_offline_count[0]->main_mgmt_id,
                            'old_management'=>$al_offline_count[0]->old_management,
                            'user_id'=>$al_offline_count[0]->user_id,
                            'resignation_type'=>$al_offline_count[0]->resignation_type,
                            'resign_effect'=>$al_offline_count[0]->resign_effect,
                            'status'=>$al_offline_count[0]->status,
                            'created_at'=>$al_offline_count[0]->created_at,
                            'updated_at'=>$al_offline_count[0]->updated_at
                        ]);
                    }
                }else{
                    DB::connection('mysql2')->table('clinic_resignation_type')->insert([
                        'crt_id'=>$al_offline->crt_id,
                        'management_id'=>$al_offline->management_id,
                        'main_mgmt_id'=>$al_offline->main_mgmt_id,
                        'old_management'=>$al_offline->old_management,
                        'user_id'=>$al_offline->user_id,
                        'resignation_type'=>$al_offline->resignation_type,
                        'resign_effect'=>$al_offline->resign_effect,
                        'status'=>$al_offline->status,
                        'created_at'=>$al_offline->created_at,
                        'updated_at'=>$al_offline->updated_at
                    ]); 
                } 
        }  

        // syncronize clinic_resignation_type table from online to offline 
        $al_online_list = DB::connection('mysql2')->table('clinic_resignation_type')->where('management_id', $data['management_id'])->get();   
        foreach($al_online_list as $al_online){  
            $al_online_online = DB::table('clinic_resignation_type')->where('crt_id', $al_online->crt_id)->get();
                if(count($al_online_online) > 0){
                    DB::table('clinic_resignation_type')->where('crt_id', $al_online->crt_id)->update([
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'old_management'=>$al_online->old_management,
                        'user_id'=>$al_online->user_id,
                        'resignation_type'=>$al_online->resignation_type,
                        'resign_effect'=>$al_online->resign_effect,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]);
        
                }else{
                    DB::table('clinic_resignation_type')->insert([
                        'crt_id'=>$al_online->crt_id,
                        'management_id'=>$al_online->management_id,
                        'main_mgmt_id'=>$al_online->main_mgmt_id,
                        'old_management'=>$al_online->old_management,
                        'user_id'=>$al_online->user_id,
                        'resignation_type'=>$al_online->resignation_type,
                        'resign_effect'=>$al_online->resign_effect,
                        'status'=>$al_online->status,
                        'created_at'=>$al_online->created_at,
                        'updated_at'=>$al_online->updated_at
                    ]); 
                } 
        } 
        return true;
    }
    
    public static function syncDoctors($data){ 
        // syncronize doctors table from online to offline 
        $doctor_offline_List = DB::table('doctors')->where('management_id', $data['management_id'])->get();  
        foreach($doctor_offline_List as $doctor_offline){  
            $doctor_offline_count = DB::connection('mysql2')->table('doctors')->where('d_id', $doctor_offline->d_id)->get();
                if(count($doctor_offline_count) > 0){  
                    if($doctor_offline->updated_at > $doctor_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('doctors')->where('d_id', $doctor_offline->d_id)->update([ 
                            'doctors_id'=>$doctor_offline->doctors_id, 
                            'management_id'=>$doctor_offline->management_id, 
                            'user_id'=>$doctor_offline->user_id, 
                            'name'=>$doctor_offline->name, 
                            'address'=>$doctor_offline->address, 
                            'gender'=>$doctor_offline->gender, 
                            'contact_no'=>$doctor_offline->contact_no, 
                            'birthday'=>$doctor_offline->birthday, 
                            'specialization'=>$doctor_offline->specialization, 
                            'image'=>$doctor_offline->image, 
                            'image_signature'=>$doctor_offline->image_signature, 
                            'cil_umn'=>$doctor_offline->cil_umn, 
                            'ead_mun'=>$doctor_offline->ead_mun, 
                            'status'=>$doctor_offline->status, 
                            'role'=>$doctor_offline->role, 
                            'share_rate'=>$doctor_offline->share_rate, 
                            'added_by'=>$doctor_offline->added_by, 
                            'online_appointment'=>$doctor_offline->online_appointment,
                            'has_management'=>$doctor_offline->has_management,
                            'created_at'=>$doctor_offline->created_at, 
                            'updated_at'=>$doctor_offline->updated_at,   
                        ]);
                    } 
                    
                    else{
                        DB::table('doctors')->where('d_id', $doctor_offline_count[0]->d_id)->update([ 
                            'doctors_id'=>$doctor_offline_count[0]->doctors_id, 
                            'management_id'=>$doctor_offline_count[0]->management_id, 
                            'user_id'=>$doctor_offline_count[0]->user_id, 
                            'name'=>$doctor_offline_count[0]->name, 
                            'address'=>$doctor_offline_count[0]->address, 
                            'gender'=>$doctor_offline_count[0]->gender, 
                            'contact_no'=>$doctor_offline_count[0]->contact_no, 
                            'birthday'=>$doctor_offline_count[0]->birthday, 
                            'specialization'=>$doctor_offline_count[0]->specialization, 
                            'image'=>$doctor_offline_count[0]->image, 
                            'image_signature'=>$doctor_offline_count[0]->image_signature, 
                            'cil_umn'=>$doctor_offline_count[0]->cil_umn, 
                            'ead_mun'=>$doctor_offline_count[0]->ead_mun, 
                            'status'=>$doctor_offline_count[0]->status, 
                            'role'=>$doctor_offline_count[0]->role, 
                            'share_rate'=>$doctor_offline_count[0]->share_rate, 
                            'added_by'=>$doctor_offline_count[0]->added_by, 
                            'online_appointment'=>$doctor_offline_count[0]->online_appointment, 
                            'has_management'=>$doctor_offline_count[0]->has_management,
                            'created_at'=>$doctor_offline_count[0]->created_at, 
                            'updated_at'=>$doctor_offline_count[0]->updated_at,   
                        ]);
                    }
     
                }else{
                    DB::connection('mysql2')->table('doctors')->insert([  
                        'd_id'=>$doctor_offline->d_id, 
                        'doctors_id'=>$doctor_offline->doctors_id, 
                        'management_id'=>$doctor_offline->management_id, 
                        'user_id'=>$doctor_offline->user_id, 
                        'name'=>$doctor_offline->name, 
                        'address'=>$doctor_offline->address, 
                        'gender'=>$doctor_offline->gender, 
                        'contact_no'=>$doctor_offline->contact_no, 
                        'birthday'=>$doctor_offline->birthday, 
                        'specialization'=>$doctor_offline->specialization, 
                        'image'=>$doctor_offline->image, 
                        'image_signature'=>$doctor_offline->image_signature, 
                        'cil_umn'=>$doctor_offline->cil_umn, 
                        'ead_mun'=>$doctor_offline->ead_mun, 
                        'status'=>$doctor_offline->status, 
                        'role'=>$doctor_offline->role, 
                        'share_rate'=>$doctor_offline->share_rate, 
                        'added_by'=>$doctor_offline->added_by, 
                        'online_appointment'=>$doctor_offline->online_appointment, 
                        'has_management'=>$doctor_offline->has_management,
                        'created_at'=>$doctor_offline->created_at, 
                        'updated_at'=>$doctor_offline->updated_at,  
                    ]); 
                } 
        }  

        // syncronize doctors table from offline to online 
        $doctor_online_List = DB::connection('mysql2')->table('doctors')->where('management_id', $data['management_id'])->get();  
        foreach($doctor_online_List as $doctor_online){  
            $doctor_online_count = DB::table('doctors')->where('d_id', $doctor_online->d_id)->get();
                if(count($doctor_online_count) > 0){
                    DB::table('doctors')->where('d_id', $doctor_online->d_id)->update([ 
                        'doctors_id'=>$doctor_online->doctors_id, 
                        'management_id'=>$doctor_online->management_id, 
                        'user_id'=>$doctor_online->user_id, 
                        'name'=>$doctor_online->name, 
                        'address'=>$doctor_online->address, 
                        'gender'=>$doctor_online->gender, 
                        'contact_no'=>$doctor_online->contact_no, 
                        'birthday'=>$doctor_online->birthday, 
                        'specialization'=>$doctor_online->specialization, 
                        'image'=>$doctor_online->image, 
                        'image_signature'=>$doctor_online->image_signature, 
                        'cil_umn'=>$doctor_online->cil_umn, 
                        'ead_mun'=>$doctor_online->ead_mun,
                        'status'=>$doctor_online->status, 
                        'role'=>$doctor_online->role, 
                        'share_rate'=>$doctor_online->share_rate, 
                        'added_by'=>$doctor_online->added_by, 
                        'online_appointment'=>$doctor_online->online_appointment, 
                        'has_management'=>$doctor_online->has_management,
                        'created_at'=>$doctor_online->created_at, 
                        'updated_at'=>$doctor_online->updated_at,   
                    ]);
     
                }else{
                    DB::table('doctors')->insert([  
                        'd_id'=>$doctor_online->d_id, 
                        'doctors_id'=>$doctor_online->doctors_id, 
                        'management_id'=>$doctor_online->management_id, 
                        'user_id'=>$doctor_online->user_id, 
                        'name'=>$doctor_online->name, 
                        'address'=>$doctor_online->address, 
                        'gender'=>$doctor_online->gender, 
                        'contact_no'=>$doctor_online->contact_no, 
                        'birthday'=>$doctor_online->birthday, 
                        'specialization'=>$doctor_online->specialization, 
                        'image'=>$doctor_online->image, 
                        'image_signature'=>$doctor_online->image_signature, 
                        'cil_umn'=>$doctor_online->cil_umn, 
                        'ead_mun'=>$doctor_online->ead_mun,
                        'status'=>$doctor_online->status, 
                        'role'=>$doctor_online->role, 
                        'share_rate'=>$doctor_online->share_rate, 
                        'added_by'=>$doctor_online->added_by, 
                        'online_appointment'=>$doctor_online->online_appointment, 
                        'has_management'=>$doctor_online->has_management,
                        'created_at'=>$doctor_online->created_at, 
                        'updated_at'=>$doctor_online->updated_at,  
                    ]); 
                } 
        }    
        return true;
    }

    public static function syncDoctorsAppointmentServices($data){
        // syncronize doctors_appointment_services table from online to offline 
        $doctor_offline_List = DB::table('doctors_appointment_services')->where('main_mgmt_id', $data['main_mgmt_id'])->get();  
        foreach($doctor_offline_List as $doctor_offline){  
            $doctor_offline_count = DB::connection('mysql2')->table('doctors_appointment_services')->where('service_id', $doctor_offline->service_id)->get();
                if(count($doctor_offline_count) > 0){  
                    if($doctor_offline->updated_at > $doctor_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('doctors_appointment_services')->where('service_id', $doctor_offline->service_id)->update([ 
                            'doctors_id'=>$doctor_offline->doctors_id, 
                            'management_id'=>$doctor_offline->management_id, 
                            'main_mgmt_id'=>$doctor_offline->main_mgmt_id,
                            'services'=>$doctor_offline->services, 
                            'amount'=>$doctor_offline->amount, 
                            'status'=>$doctor_offline->status, 
                            'created_at'=>$doctor_offline->created_at, 
                            'updated_at'=>$doctor_offline->updated_at,
                        ]);
                    } 
                    
                    else{
                        DB::table('doctors_appointment_services')->where('service_id', $doctor_offline_count[0]->service_id)->update([ 
                            'doctors_id'=>$doctor_offline_count[0]->doctors_id, 
                            'management_id'=>$doctor_offline_count[0]->management_id, 
                            'main_mgmt_id'=>$doctor_offline_count[0]->main_mgmt_id,
                            'services'=>$doctor_offline_count[0]->services, 
                            'amount'=>$doctor_offline_count[0]->amount, 
                            'status'=>$doctor_offline_count[0]->status, 
                            'created_at'=>$doctor_offline_count[0]->created_at, 
                            'updated_at'=>$doctor_offline_count[0]->updated_at,
                        ]);
                    }
     
                }else{
                    DB::connection('mysql2')->table('doctors_appointment_services')->insert([  
                        'service_id'=>$doctor_offline->service_id, 
                        'doctors_id'=>$doctor_offline->doctors_id, 
                        'management_id'=>$doctor_offline->management_id, 
                        'main_mgmt_id'=>$doctor_offline->main_mgmt_id,
                        'services'=>$doctor_offline->services, 
                        'amount'=>$doctor_offline->amount, 
                        'status'=>$doctor_offline->status, 
                        'created_at'=>$doctor_offline->created_at, 
                        'updated_at'=>$doctor_offline->updated_at,
                    ]); 
                } 
        }  

        // syncronize doctors_appointment_services table from offline to online 
        $doctor_online_List = DB::connection('mysql2')->table('doctors_appointment_services')->where('main_mgmt_id', $data['main_mgmt_id'])->get();  
        foreach($doctor_online_List as $doctor_online){  
            $doctor_online_count = DB::table('doctors_appointment_services')->where('service_id', $doctor_online->service_id)->get();
                if(count($doctor_online_count) > 0){
                    DB::table('doctors_appointment_services')->where('service_id', $doctor_online->service_id)->update([ 
                        'doctors_id'=>$doctor_online->doctors_id, 
                        'management_id'=>$doctor_online->management_id, 
                        'main_mgmt_id'=>$doctor_online->main_mgmt_id,
                        'services'=>$doctor_online->services, 
                        'amount'=>$doctor_online->amount, 
                        'status'=>$doctor_online->status, 
                        'created_at'=>$doctor_online->created_at, 
                        'updated_at'=>$doctor_online->updated_at,  
                    ]);
     
                }else{
                    DB::table('doctors_appointment_services')->insert([  
                        'service_id'=>$doctor_online->service_id, 
                        'doctors_id'=>$doctor_online->doctors_id, 
                        'management_id'=>$doctor_online->management_id, 
                        'main_mgmt_id'=>$doctor_online->main_mgmt_id,
                        'services'=>$doctor_online->services, 
                        'amount'=>$doctor_online->amount, 
                        'status'=>$doctor_online->status, 
                        'created_at'=>$doctor_online->created_at, 
                        'updated_at'=>$doctor_online->updated_at,
                    ]); 
                } 
        }    
        return true;
    }

    public static function syncDoctorsComments(){ 
        // syncronize doctors_comments table from online to offline 
        $doctor_service_offline = DB::table('doctors_comments')->get();  
        foreach($doctor_service_offline as $doctor_service_offline){  
            $doctor_service_offline_count = DB::connection('mysql2')->table('doctors_comments')->where('dc_id', $doctor_service_offline->dc_id)->get();
                if(count($doctor_service_offline_count) > 0){  
                    if($doctor_service_offline->updated_at > $doctor_service_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('doctors_comments')->where('dc_id', $doctor_service_offline->dc_id)->update([ 
                            'doctors_id'=>$doctor_service_offline->doctors_id,  
                            'patient_id'=>$doctor_service_offline->patient_id,   
                            'comment'=>$doctor_service_offline->comment,   
                            'comment_status'=>$doctor_service_offline->comment_status,   
                            'status'=>$doctor_service_offline->status,    
                            'created_at'=>$doctor_service_offline->created_at, 
                            'updated_at'=>$doctor_service_offline->updated_at,   
                        ]);
                    } 
                    
                    else{
                        DB::table('doctors_comments')->where('dc_id', $doctor_service_offline_count[0]->dc_id)->update([ 
                            'doctors_id'=>$doctor_service_offline_count[0]->doctors_id,  
                            'patient_id'=>$doctor_service_offline_count[0]->patient_id,  
                            'comment'=>$doctor_service_offline_count[0]->comment,  
                            'comment_status'=>$doctor_service_offline_count[0]->comment_status,  
                            'status'=>$doctor_service_offline_count[0]->status,   
                            'created_at'=>$doctor_service_offline_count[0]->created_at, 
                            'updated_at'=>$doctor_service_offline_count[0]->updated_at,   
                        ]);
                    }
     
                }else{
                    DB::connection('mysql2')->table('doctors_comments')->insert([   
                        'dc_id'=>$doctor_service_offline->dc_id,  
                        'doctors_id'=>$doctor_service_offline->doctors_id,    
                        'patient_id'=>$doctor_service_offline->patient_id,  
                        'comment'=>$doctor_service_offline->comment,  
                        'comment_status'=>$doctor_service_offline->comment_status,  
                        'status'=>$doctor_service_offline->status,  
                        'created_at'=>$doctor_service_offline->created_at, 
                        'updated_at'=>$doctor_service_offline->updated_at,  
                    ]); 
                } 
        }  

        // syncronize doctors_comments table from offline to online 
        $doctor_doctors_service = DB::connection('mysql2')->table('doctors_comments')->get();  
        foreach($doctor_doctors_service as $doctor_service_online){  
            $doctor_service_online_count = DB::table('doctors_comments')->where('dc_id', $doctor_service_online->dc_id)->get();
                if(count($doctor_service_online_count) > 0){
                    DB::table('doctors_comments')->where('dc_id', $doctor_service_online->dc_id)->update([ 
                        'doctors_id'=>$doctor_service_online->doctors_id,  
                        'patient_id'=>$doctor_service_online->patient_id,   
                        'comment'=>$doctor_service_online->comment,   
                        'comment_status'=>$doctor_service_online->comment_status,   
                        'status'=>$doctor_service_online->status,   
                        'created_at'=>$doctor_service_online->created_at, 
                        'updated_at'=>$doctor_service_online->updated_at,   
                    ]); 
                }else{
                    DB::table('doctors_comments')->insert([  
                        'dc_id'=>$doctor_service_online->dc_id, 
                        'doctors_id'=>$doctor_service_online->doctors_id,  
                        'patient_id'=>$doctor_service_online->patient_id,  
                        'comment'=>$doctor_service_online->comment,  
                        'comment_status'=>$doctor_service_online->comment_status,  
                        'status'=>$doctor_service_online->status,   
                        'created_at'=>$doctor_service_online->created_at, 
                        'updated_at'=>$doctor_service_online->updated_at,  
                    ]); 
                } 
        }    
        
        return true;
    }

    public static function syncDoctorsMedicalCertificateOrdered($data){ 
        // syncronize doctors_medical_certificate_ordered table from online to offline 
        $doctor_service_offline = DB::table('doctors_medical_certificate_ordered')->where('management_id', $data['management_id'])->get();  
        foreach($doctor_service_offline as $doctor_service_offline){  
            $doctor_service_offline_count = DB::connection('mysql2')->table('doctors_medical_certificate_ordered')->where('lmc_id', $doctor_service_offline->lmc_id)->get();
                if(count($doctor_service_offline_count) > 0){  
                    if($doctor_service_offline->updated_at > $doctor_service_offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('doctors_medical_certificate_ordered')->where('lmc_id', $doctor_service_offline->lmc_id)->update([ 
                            'patient_id'=>$doctor_service_offline->patient_id,  
                            'doctors_id'=>$doctor_service_offline->doctors_id,   
                            'management_id'=>$doctor_service_offline->management_id,   
                            'main_mgmt_id'=>$doctor_service_offline->main_mgmt_id,   
                            'trace_number'=>$doctor_service_offline->trace_number,   
                            'service_id'=>$doctor_service_offline->service_id,    
                            'service_name'=>$doctor_service_offline->service_name, 
                            'service_rate'=>$doctor_service_offline->service_rate,   
                            'medcert_content'=>$doctor_service_offline->medcert_content,   
                            'diagnosis_findings'=>$doctor_service_offline->diagnosis_findings,   
                            'recommendation'=>$doctor_service_offline->recommendation,   
                            'remarks'=>$doctor_service_offline->remarks,   
                            'issued_at'=>$doctor_service_offline->issued_at,   
                            'process_remarks'=>$doctor_service_offline->process_remarks,   
                            'order_status'=>$doctor_service_offline->order_status,   
                            'status'=>$doctor_service_offline->status,   
                            'created_at'=>$doctor_service_offline->created_at,   
                            'updated_at'=>$doctor_service_offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('doctors_medical_certificate_ordered')->where('lmc_id', $doctor_service_offline_count[0]->lmc_id)->update([ 
                            'patient_id'=>$doctor_service_offline_count[0]->patient_id,  
                            'doctors_id'=>$doctor_service_offline_count[0]->doctors_id,   
                            'management_id'=>$doctor_service_offline_count[0]->management_id,   
                            'main_mgmt_id'=>$doctor_service_offline_count[0]->main_mgmt_id,   
                            'trace_number'=>$doctor_service_offline_count[0]->trace_number,   
                            'service_id'=>$doctor_service_offline_count[0]->service_id,    
                            'service_name'=>$doctor_service_offline_count[0]->service_name, 
                            'service_rate'=>$doctor_service_offline_count[0]->service_rate,   
                            'medcert_content'=>$doctor_service_offline_count[0]->medcert_content,   
                            'diagnosis_findings'=>$doctor_service_offline_count[0]->diagnosis_findings,   
                            'recommendation'=>$doctor_service_offline_count[0]->recommendation,   
                            'remarks'=>$doctor_service_offline_count[0]->remarks,   
                            'issued_at'=>$doctor_service_offline_count[0]->issued_at,   
                            'process_remarks'=>$doctor_service_offline_count[0]->process_remarks,   
                            'order_status'=>$doctor_service_offline_count[0]->order_status,   
                            'status'=>$doctor_service_offline_count[0]->status,   
                            'created_at'=>$doctor_service_offline_count[0]->created_at,   
                            'updated_at'=>$doctor_service_offline_count[0]->updated_at
                        ]);
                    }
     
                }else{
                    DB::connection('mysql2')->table('doctors_medical_certificate_ordered')->insert([   
                        'lmc_id'=>$doctor_service_offline->lmc_id,  
                        'patient_id'=>$doctor_service_offline->patient_id,  
                        'doctors_id'=>$doctor_service_offline->doctors_id,   
                        'management_id'=>$doctor_service_offline->management_id,   
                        'main_mgmt_id'=>$doctor_service_offline->main_mgmt_id,   
                        'trace_number'=>$doctor_service_offline->trace_number,   
                        'service_id'=>$doctor_service_offline->service_id,    
                        'service_name'=>$doctor_service_offline->service_name, 
                        'service_rate'=>$doctor_service_offline->service_rate,   
                        'medcert_content'=>$doctor_service_offline->medcert_content,   
                        'diagnosis_findings'=>$doctor_service_offline->diagnosis_findings,   
                        'recommendation'=>$doctor_service_offline->recommendation,   
                        'remarks'=>$doctor_service_offline->remarks,   
                        'issued_at'=>$doctor_service_offline->issued_at,   
                        'process_remarks'=>$doctor_service_offline->process_remarks,   
                        'order_status'=>$doctor_service_offline->order_status,   
                        'status'=>$doctor_service_offline->status,   
                        'created_at'=>$doctor_service_offline->created_at,   
                        'updated_at'=>$doctor_service_offline->updated_at
                    ]); 
                } 
        }  

        // syncronize doctors_medical_certificate_ordered table from offline to online 
        $doctor_doctors_service = DB::connection('mysql2')->table('doctors_medical_certificate_ordered')->where('management_id', $data['management_id'])->get();  
        foreach($doctor_doctors_service as $doctor_service_online){  
            $doctor_service_online_count = DB::table('doctors_medical_certificate_ordered')->where('lmc_id', $doctor_service_online->lmc_id)->get();
                if(count($doctor_service_online_count) > 0){
                    DB::table('doctors_medical_certificate_ordered')->where('lmc_id', $doctor_service_online->lmc_id)->update([ 
                        'patient_id'=>$doctor_service_online->patient_id,  
                        'doctors_id'=>$doctor_service_online->doctors_id,   
                        'management_id'=>$doctor_service_online->management_id,   
                        'main_mgmt_id'=>$doctor_service_online->main_mgmt_id,   
                        'trace_number'=>$doctor_service_online->trace_number,   
                        'service_id'=>$doctor_service_online->service_id,    
                        'service_name'=>$doctor_service_online->service_name, 
                        'service_rate'=>$doctor_service_online->service_rate,   
                        'medcert_content'=>$doctor_service_online->medcert_content,   
                        'diagnosis_findings'=>$doctor_service_online->diagnosis_findings,   
                        'recommendation'=>$doctor_service_online->recommendation,   
                        'remarks'=>$doctor_service_online->remarks,   
                        'issued_at'=>$doctor_service_online->issued_at,   
                        'process_remarks'=>$doctor_service_online->process_remarks,   
                        'order_status'=>$doctor_service_online->order_status,   
                        'status'=>$doctor_service_online->status,   
                        'created_at'=>$doctor_service_online->created_at,   
                        'updated_at'=>$doctor_service_online->updated_at   
                    ]); 
                }else{
                    DB::table('doctors_medical_certificate_ordered')->insert([  
                        'lmc_id'=>$doctor_service_online->lmc_id, 
                        'patient_id'=>$doctor_service_online->patient_id,  
                        'doctors_id'=>$doctor_service_online->doctors_id,   
                        'management_id'=>$doctor_service_online->management_id,   
                        'main_mgmt_id'=>$doctor_service_online->main_mgmt_id,   
                        'trace_number'=>$doctor_service_online->trace_number,   
                        'service_id'=>$doctor_service_online->service_id,    
                        'service_name'=>$doctor_service_online->service_name, 
                        'service_rate'=>$doctor_service_online->service_rate,   
                        'medcert_content'=>$doctor_service_online->medcert_content,   
                        'diagnosis_findings'=>$doctor_service_online->diagnosis_findings,   
                        'recommendation'=>$doctor_service_online->recommendation,   
                        'remarks'=>$doctor_service_online->remarks,   
                        'issued_at'=>$doctor_service_online->issued_at,   
                        'process_remarks'=>$doctor_service_online->process_remarks,   
                        'order_status'=>$doctor_service_online->order_status,   
                        'status'=>$doctor_service_online->status,   
                        'created_at'=>$doctor_service_online->created_at,   
                        'updated_at'=>$doctor_service_online->updated_at
                    ]); 
                } 
        }    
        
        return true;
    }

    public static function syncDoctorsNotes(){
        // syncronize doctors_notes table from offline to online 
        $notes_offline_List = DB::table('doctors_notes')->get();  
        foreach($notes_offline_List as $notes_ofline){  
            $notes_ofline_count = DB::connection('mysql2')->table('doctors_notes')->where('notes_id', $notes_ofline->notes_id)->get();
                if(count($notes_ofline_count) > 0){ 
                    if($notes_ofline->updated_at > $notes_ofline_count[0]->updated_at){  
                       DB::connection('mysql2')->table('doctors_notes')->where('notes_id', $notes_ofline->notes_id)->update([     
                           'patients_id'=>$notes_ofline->patients_id,
                           'doctors_id'=>$notes_ofline->doctors_id,
                           'case_file'=>$notes_ofline->case_file,
                           'initial_diagnosis'=>$notes_ofline->initial_diagnosis,
                           'notes'=>$notes_ofline->notes,
                           'status'=>$notes_ofline->status,
                           'created_at'=>$notes_ofline->created_at,
                           'updated_at'=>$notes_ofline->updated_at 
                       ]);
                   } 
                   
                   else{
                       DB::table('doctors_notes')->where('notes_id', $notes_ofline_count[0]->notes_id)->update([     
                           'patients_id'=>$notes_ofline_count[0]->patients_id,
                           'doctors_id'=>$notes_ofline_count[0]->doctors_id,
                           'case_file'=>$notes_ofline_count[0]->case_file,
                           'initial_diagnosis'=>$notes_ofline_count[0]->initial_diagnosis,
                           'notes'=>$notes_ofline_count[0]->notes,
                           'status'=>$notes_ofline_count[0]->status,
                           'created_at'=>$notes_ofline_count[0]->created_at,
                           'updated_at'=>$notes_ofline_count[0]->updated_at 
                       ]);
                   }  
                }else{
                    DB::connection('mysql2')->table('doctors_notes')->insert([   
                        'notes_id'=>$notes_ofline->notes_id,
                        'patients_id'=>$notes_ofline->patients_id,
                        'doctors_id'=>$notes_ofline->doctors_id,
                        'case_file'=>$notes_ofline->case_file,
                        'initial_diagnosis'=>$notes_ofline->initial_diagnosis,
                        'notes'=>$notes_ofline->notes,
                        'status'=>$notes_ofline->status,
                        'created_at'=>$notes_ofline->created_at,
                        'updated_at'=>$notes_ofline->updated_at 
                    ]); 
                } 
        }

       // syncronize doctors_notes table from online to offline 
       $notes_online_List = DB::connection('mysql2')->table('doctors_notes')->get();  
       foreach($notes_online_List as $notes_online){  
           $notes_online_count = DB::table('doctors_notes')->where('notes_id', $notes_online->notes_id)->get();
               if(count($notes_online_count) > 0){
                   DB::table('doctors_notes')->where('notes_id', $notes_online->notes_id)->update([     
                       'patients_id'=>$notes_online->patients_id,
                       'doctors_id'=>$notes_online->doctors_id,
                       'case_file'=>$notes_online->case_file,
                       'initial_diagnosis'=>$notes_online->initial_diagnosis,
                       'notes'=>$notes_online->notes,
                       'status'=>$notes_online->status,
                       'created_at'=>$notes_online->created_at,
                       'updated_at'=>$notes_online->updated_at 
                   ]);
    
               }else{
                   DB::table('doctors_notes')->insert([   
                       'notes_id'=>$notes_online->notes_id,
                       'patients_id'=>$notes_online->patients_id,
                       'doctors_id'=>$notes_online->doctors_id,
                       'case_file'=>$notes_online->case_file,
                       'initial_diagnosis'=>$notes_online->initial_diagnosis,
                       'notes'=>$notes_online->notes,
                       'status'=>$notes_online->status,
                       'created_at'=>$notes_online->created_at,
                       'updated_at'=>$notes_online->updated_at 
                   ]); 
               } 
       }  

       return true;
    }
    
    public static function syncDoctorsNotesCanvas(){
        // syncronize doctors_notes_canvas table from offline to online 
        $dnotes_canvas_offline = DB::table('doctors_notes_canvas')->get();  
        foreach($dnotes_canvas_offline as $dnotes_canvas){  
            $dnotes_canvas_count = DB::connection('mysql2')->table('doctors_notes_canvas')->where('dnc_id', $dnotes_canvas->dnc_id)->get();
                if(count($dnotes_canvas_count) > 0){ 
                    if($dnotes_canvas->updated_at > $dnotes_canvas_count[0]->updated_at){  
                       DB::connection('mysql2')->table('doctors_notes_canvas')->where('dnc_id', $dnotes_canvas->dnc_id)->update([     
                           'patient_id'=>$dnotes_canvas->patient_id,
                           'doctors_id'=>$dnotes_canvas->doctors_id,
                           'canvas'=>$dnotes_canvas->canvas, 
                           'status'=>$dnotes_canvas->status,
                           'created_at'=>$dnotes_canvas->created_at,
                           'updated_at'=>$dnotes_canvas->updated_at 
                       ]);
                   } 
                   
                   else{
                       DB::table('doctors_notes_canvas')->where('dnc_id', $dnotes_canvas_count[0]->dnc_id)->update([     
                           'patient_id'=>$dnotes_canvas_count[0]->patient_id,
                           'doctors_id'=>$dnotes_canvas_count[0]->doctors_id,
                           'canvas'=>$dnotes_canvas_count[0]->canvas, 
                           'status'=>$dnotes_canvas_count[0]->status,
                           'created_at'=>$dnotes_canvas_count[0]->created_at,
                           'updated_at'=>$dnotes_canvas_count[0]->updated_at 
                       ]);
                   }  
                }else{
                    DB::connection('mysql2')->table('doctors_notes_canvas')->insert([   
                        'dnc_id'=>$dnotes_canvas->dnc_id,
                        'patient_id'=>$dnotes_canvas->patient_id,
                        'doctors_id'=>$dnotes_canvas->doctors_id,
                        'canvas'=>$dnotes_canvas->canvas, 
                        'status'=>$dnotes_canvas->status,
                        'created_at'=>$dnotes_canvas->created_at,
                        'updated_at'=>$dnotes_canvas->updated_at 
                    ]); 
                } 
        }

       // syncronize doctors_notes_canvas table from online to offline 
       $doctors_notes_online = DB::connection('mysql2')->table('doctors_notes_canvas')->get();  
       foreach($doctors_notes_online as $dnotes_canvas_online){  
           $dnotes_canvas_online_count = DB::table('doctors_notes_canvas')->where('dnc_id', $dnotes_canvas_online->dnc_id)->get();
               if(count($dnotes_canvas_online_count) > 0){
                   DB::table('doctors_notes_canvas')->where('dnc_id', $dnotes_canvas_online->dnc_id)->update([     
                       'patient_id'=>$dnotes_canvas_online->patient_id,
                       'doctors_id'=>$dnotes_canvas_online->doctors_id,
                       'canvas'=>$dnotes_canvas_online->canvas, 
                       'status'=>$dnotes_canvas_online->status,
                       'created_at'=>$dnotes_canvas_online->created_at,
                       'updated_at'=>$dnotes_canvas_online->updated_at 
                   ]);
    
               }else{
                   DB::table('doctors_notes_canvas')->insert([   
                       'dnc_id'=>$dnotes_canvas_online->dnc_id,
                       'patient_id'=>$dnotes_canvas_online->patient_id,
                       'doctors_id'=>$dnotes_canvas_online->doctors_id,
                       'canvas'=>$dnotes_canvas_online->canvas, 
                       'status'=>$dnotes_canvas_online->status,
                       'created_at'=>$dnotes_canvas_online->created_at,
                       'updated_at'=>$dnotes_canvas_online->updated_at 
                   ]); 
               } 
       }  

       return true;
    }
    
    public static function syncDoctorsNotification(){
        // syncronize doctors_notification table from offline to online 
        $dnotif_offline = DB::table('doctors_notification')->get();  
        foreach($dnotif_offline as $dnotif){  
            $dnotif_count = DB::connection('mysql2')->table('doctors_notification')->where('notif_id', $dnotif->notif_id)->get();
                if(count($dnotif_count) > 0){ 
                    if($dnotif->updated_at > $dnotif_count[0]->updated_at){  
                       DB::connection('mysql2')->table('doctors_notification')->where('notif_id', $dnotif->notif_id)->update([     
                           'order_id'=>$dnotif->order_id,
                           'patient_id'=>$dnotif->patient_id,
                           'doctor_id'=>$dnotif->doctor_id, 
                           'category'=>$dnotif->category,
                           'department'=>$dnotif->department,
                           'message'=>$dnotif->message,
                           'is_view'=>$dnotif->is_view, 
                           'notification_from' =>$dnotif->notification_from, 
                           'status'=>$dnotif->status,
                           'created_at'=>$dnotif->created_at,
                           'updated_at'=>$dnotif->updated_at
                       ]);
                   } 
                   
                   else{
                       DB::table('doctors_notification')->where('notif_id', $dnotif_count[0]->notif_id)->update([    
                            'order_id'=>$dnotif_count[0]->order_id,
                            'patient_id'=>$dnotif_count[0]->patient_id,
                            'doctor_id'=>$dnotif_count[0]->doctor_id, 
                            'category'=>$dnotif_count[0]->category,
                            'department'=>$dnotif_count[0]->department,
                            'message'=>$dnotif_count[0]->message,
                            'is_view'=>$dnotif_count[0]->is_view, 
                            'notification_from' =>$dnotif_count[0]->notification_from, 
                            'status'=>$dnotif_count[0]->status,
                            'created_at'=>$dnotif_count[0]->created_at,
                            'updated_at'=>$dnotif_count[0]->updated_at
                       ]);
                   }  
                }else{
                    DB::connection('mysql2')->table('doctors_notification')->insert([    
                        'notif_id'=>$dnotif->notif_id,
                        'order_id'=>$dnotif->order_id,
                        'patient_id'=>$dnotif->patient_id,
                        'doctor_id'=>$dnotif->doctor_id, 
                        'category'=>$dnotif->category,
                        'department'=>$dnotif->department,
                        'message'=>$dnotif->message,
                        'is_view'=>$dnotif->is_view, 
                        'notification_from' =>$dnotif->notification_from, 
                        'status'=>$dnotif->status,
                        'created_at'=>$dnotif->created_at,
                        'updated_at'=>$dnotif->updated_at
                    ]); 
                } 
        }

       // syncronize doctors_notification table from online to offline 
       $dnotification_online = DB::connection('mysql2')->table('doctors_notification')->get();  
       foreach($dnotification_online as $dnotif_online){  
           $dnotif_online_count = DB::table('doctors_notification')->where('notif_id', $dnotif_online->notif_id)->get();
               if(count($dnotif_online_count) > 0){
                   DB::table('doctors_notification')->where('notif_id', $dnotif_online->notif_id)->update([      
                        'order_id'=>$dnotif_online->order_id,
                        'patient_id'=>$dnotif_online->patient_id,
                        'doctor_id'=>$dnotif_online->doctor_id, 
                        'category'=>$dnotif_online->category,
                        'department'=>$dnotif_online->department,
                        'message'=>$dnotif_online->message,
                        'is_view'=>$dnotif_online->is_view, 
                        'notification_from' =>$dnotif_online->notification_from, 
                        'status'=>$dnotif_online->status,
                        'created_at'=>$dnotif_online->created_at,
                        'updated_at'=>$dnotif_online->updated_at
                   ]);
    
               }else{
                   DB::table('doctors_notification')->insert([    
                       'notif_id'=>$dnotif_online->notif_id,
                       'order_id'=>$dnotif_online->order_id,
                       'patient_id'=>$dnotif_online->patient_id,
                       'doctor_id'=>$dnotif_online->doctor_id, 
                       'category'=>$dnotif_online->category,
                       'department'=>$dnotif_online->department,
                       'message'=>$dnotif_online->message,
                       'is_view'=>$dnotif_online->is_view, 
                       'notification_from' =>$dnotif_online->notification_from, 
                       'status'=>$dnotif_online->status,
                       'created_at'=>$dnotif_online->created_at,
                       'updated_at'=>$dnotif_online->updated_at
                   ]); 
               } 
       }  

       return true;
    }

    public static function syncDoctorsPatients($data){
        // syncronize doctors_patients table from offline to online 
        $offline_query = DB::table('doctors_patients')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('doctors_patients')->where('dp_id', $offline->dp_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                       DB::connection('mysql2')->table('doctors_patients')->where('dp_id', $offline->dp_id)->update([    
                           'management_id'=>$offline->management_id,
                           'doctors_userid'=>$offline->doctors_userid,
                           'patient_userid'=>$offline->patient_userid,
                           'added_by'=>$offline->added_by,
                           'added_from'=>$offline->added_from,
                           'status'=>$offline->status, 
                           'created_at'=>$offline->created_at,
                           'updated_at'=>$offline->updated_at 
                       ]);
                   } 
                   
                   else{
                       DB::table('doctors_patients')->where('dp_id', $offline_count[0]->dp_id)->update([    
                           'doctors_userid'=>$offline_count[0]->doctors_userid, 
                           'management_id'=>$offline_count[0]->management_id,
                           'doctors_userid'=>$offline_count[0]->doctors_userid,
                           'patient_userid'=>$offline_count[0]->patient_userid,
                           'added_by'=>$offline_count[0]->added_by,
                           'added_from'=>$offline_count[0]->added_from,
                           'status'=>$offline_count[0]->status, 
                           'created_at'=>$offline_count[0]->created_at,
                           'updated_at'=>$offline_count[0]->updated_at 
                       ]);
                   }  
                }else{
                    DB::connection('mysql2')->table('doctors_patients')->insert([     
                        'dp_id'=>$offline->dp_id,
                        'management_id'=>$offline->management_id,
                        'doctors_userid'=>$offline->doctors_userid,
                        'patient_userid'=>$offline->patient_userid,
                        'added_by'=>$offline->added_by,
                        'added_from'=>$offline->added_from,
                        'status'=>$offline->status, 
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at 
                    ]); 
                } 
        }

       // syncronize doctors_patients table from online to offline 
       $online_query = DB::connection('mysql2')->table('doctors_patients')->where('management_id', $data['management_id'])->get();  
       foreach($online_query as $online){  
           $online_count = DB::table('doctors_patients')->where('dp_id', $online->dp_id)->get();
               if(count($online_count) > 0){
                   DB::table('doctors_patients')->where('dp_id', $online->dp_id)->update([       
                        'management_id'=>$online->management_id,
                        'doctors_userid'=>$online->doctors_userid,
                        'patient_userid'=>$online->patient_userid,
                        'added_by'=>$online->added_by,
                        'added_from'=>$online->added_from,
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                   ]);
    
               }else{
                   DB::table('doctors_patients')->insert([     
                        'dp_id'=>$online->dp_id,
                        'management_id'=>$online->management_id,
                        'doctors_userid'=>$online->doctors_userid,
                        'patient_userid'=>$online->patient_userid,
                        'added_by'=>$online->added_by,
                        'added_from'=>$online->added_from,
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                   ]); 
               } 
       }  

       return true;
    }

    public static function syncDoctorsPrescriptions($data){ 
        // syncronize doctors_prescription table from offline to online  
        $offline_query = DB::table('doctors_prescription')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('doctors_prescription')->where('dp_id', $offline->dp_id)->get();
                if(count($offline_count) > 0){
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('doctors_prescription')->where('dp_id', $offline->dp_id)->update([       
                            'prescription_id'=>$offline->prescription_id, 
                            'management_id'=>$offline->management_id, 
                            'patients_id'=>$offline->patients_id, 
                            'case_file'=>$offline->case_file, 
                            'doctors_id'=>$offline->doctors_id,  
                            'prescription'=>$offline->prescription, 
                            'product_name'=>$offline->product_name, 
                            'product_amount'=>$offline->product_amount,  
                            'is_package'=>$offline->is_package, 
                            'brand'=>$offline->brand, 
                            'quantity'=>$offline->quantity, 
                            'quantity_claimed'=> $offline->quantity_claimed,
                            'quantity_order'=> $offline->quantity_order,
                            'quantity_order_batchno'=>$offline->quantity_order_batchno,
                            'type'=>$offline->type, 
                            'dosage'=>$offline->dosage,
                            'per_day'=>$offline->per_day,
                            'per_take'=>$offline->per_take,
                            'remarks'=>$offline->remarks, 
                            'prescription_type'=>$offline->prescription_type, 
                            'pharmacy_id'=>$offline->pharmacy_id, 
                            'claim_id'=>$offline->claim_id, 
                            'created_at'=>$offline->created_at, 
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('doctors_prescription')->where('dp_id', $offline_count[0]->dp_id)->update([       
                            'prescription_id'=>$offline_count[0]->prescription_id, 
                            'management_id'=>$offline_count[0]->management_id, 
                            'patients_id'=>$offline_count[0]->patients_id, 
                            'case_file'=>$offline_count[0]->case_file, 
                            'doctors_id'=>$offline_count[0]->doctors_id,  
                            'prescription'=>$offline_count[0]->prescription, 
                            'product_name'=>$offline_count[0]->product_name, 
                            'product_amount'=>$offline_count[0]->product_amount,  
                            'is_package'=>$offline_count[0]->is_package, 
                            'brand'=>$offline_count[0]->brand, 
                            'quantity'=>$offline_count[0]->quantity, 
                            'quantity_claimed'=> $offline_count[0]->quantity_claimed,
                            'quantity_order'=> $offline_count[0]->quantity_order,
                            'quantity_order_batchno'=>$offline_count[0]->quantity_order_batchno,
                            'type'=>$offline_count[0]->type, 
                            'dosage'=>$offline_count[0]->dosage,
                            'per_day'=>$offline_count[0]->per_day,
                            'per_take'=>$offline_count[0]->per_take,
                            'remarks'=>$offline_count[0]->remarks, 
                            'prescription_type'=>$offline_count[0]->prescription_type, 
                            'pharmacy_id'=>$offline_count[0]->pharmacy_id, 
                            'claim_id'=>$offline_count[0]->claim_id, 
                            'created_at'=>$offline_count[0]->created_at, 
                            'updated_at'=>$offline_count[0]->updated_at
                        ]); 
                    }   
                    
                }else{
                    DB::connection('mysql2')->table('doctors_prescription')->insert([   
                        'dp_id'=>$offline->dp_id, 
                        'prescription_id'=>$offline->prescription_id, 
                        'management_id'=>$offline->management_id, 
                        'patients_id'=>$offline->patients_id, 
                        'case_file'=>$offline->case_file, 
                        'doctors_id'=>$offline->doctors_id,  
                        'prescription'=>$offline->prescription, 
                        'product_name'=>$offline->product_name, 
                        'product_amount'=>$offline->product_amount,  
                        'is_package'=>$offline->is_package, 
                        'brand'=>$offline->brand, 
                        'quantity'=>$offline->quantity, 
                        'quantity_claimed'=> $offline->quantity_claimed,
                        'quantity_order'=> $offline->quantity_order,
                        'quantity_order_batchno'=>$offline->quantity_order_batchno,
                        'type'=>$offline->type, 
                        'dosage'=>$offline->dosage,
                        'per_day'=>$offline->per_day,
                        'per_take'=>$offline->per_take,
                        'remarks'=>$offline->remarks, 
                        'prescription_type'=>$offline->prescription_type, 
                        'pharmacy_id'=>$offline->pharmacy_id, 
                        'claim_id'=>$offline->claim_id, 
                        'created_at'=>$offline->created_at, 
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        } 


        // syncronize doctors_prescription table from online to offline 
        $online_query = DB::connection('mysql2')->table('doctors_prescription')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('doctors_prescription')->where('dp_id', $online->dp_id)->get();
                if(count($online_count) > 0){
                    DB::table('doctors_prescription')->where('dp_id', $online->dp_id)->update([    
                        'prescription_id'=>$online->prescription_id, 
                        'management_id'=>$online->management_id, 
                        'patients_id'=>$online->patients_id, 
                        'case_file'=>$online->case_file, 
                        'doctors_id'=>$online->doctors_id,  
                        'prescription'=>$online->prescription, 
                        'product_name'=>$online->product_name, 
                        'product_amount'=>$online->product_amount,  
                        'is_package'=>$online->is_package, 
                        'brand'=>$online->brand, 
                        'quantity'=>$online->quantity, 
                        'quantity_claimed'=> $online->quantity_claimed,
                        'quantity_order'=> $online->quantity_order,
                        'quantity_order_batchno'=>$online->quantity_order_batchno,
                        'type'=>$online->type, 
                        'dosage'=>$online->dosage,
                        'per_day'=>$online->per_day,
                        'per_take'=>$online->per_take,
                        'remarks'=>$online->remarks, 
                        'prescription_type'=>$online->prescription_type, 
                        'pharmacy_id'=>$online->pharmacy_id, 
                        'claim_id'=>$online->claim_id, 
                        'created_at'=>$online->created_at, 
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('doctors_prescription')->insert([   
                        'dp_id'=>$online->dp_id, 
                        'prescription_id'=>$online->prescription_id, 
                        'management_id'=>$online->management_id, 
                        'patients_id'=>$online->patients_id, 
                        'case_file'=>$online->case_file, 
                        'doctors_id'=>$online->doctors_id,  
                        'prescription'=>$online->prescription, 
                        'product_name'=>$online->product_name, 
                        'product_amount'=>$online->product_amount,  
                        'is_package'=>$online->is_package, 
                        'brand'=>$online->brand, 
                        'quantity'=>$online->quantity, 
                        'quantity_claimed'=> $online->quantity_claimed,
                        'quantity_order'=> $online->quantity_order,
                        'quantity_order_batchno'=>$online->quantity_order_batchno,
                        'type'=>$online->type, 
                        'dosage'=>$online->dosage,
                        'per_day'=>$online->per_day,
                        'per_take'=>$online->per_take,
                        'remarks'=>$online->remarks, 
                        'prescription_type'=>$online->prescription_type, 
                        'pharmacy_id'=>$online->pharmacy_id, 
                        'claim_id'=>$online->claim_id, 
                        'created_at'=>$online->created_at, 
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }  
        return true;
    }

    public static function syncDoctorsRxHeader(){
        // syncronize doctors_rxheader table from offline to online
        $offline = DB::table('doctors_rxheader')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('doctors_rxheader')->where('drxh_id', $offline->drxh_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('doctors_rxheader')->where('drxh_id', $offline->drxh_id)->update([    
                            'doctors_id'=>$offline->doctors_id,  
                            'header'=>$offline->header, 
                            'sub_header'=>$offline->sub_header, 
                            'location'=>$offline->location, 
                            'contact_no'=>$offline->contact_no, 
                            'days_open'=>$offline->days_open,  
                            'logo'=>$offline->logo,
                            'sub_logo'=>$offline->sub_logo,  
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('doctors_rxheader')->where('drxh_id', $offline_count[0]->drxh_id)->update([  
                            'doctors_id'=>$offline_count[0]->doctors_id,  
                            'header'=>$offline_count[0]->header, 
                            'sub_header'=>$offline_count[0]->sub_header, 
                            'location'=>$offline_count[0]->location, 
                            'contact_no'=>$offline_count[0]->contact_no, 
                            'days_open'=>$offline_count[0]->days_open,  
                            'logo'=>$offline_count[0]->logo,
                            'sub_logo'=>$offline_count[0]->sub_logo,  
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('doctors_rxheader')->insert([
                        'drxh_id'=> $offline->drxh_id, 
                        'doctors_id'=>$offline->doctors_id,  
                        'header'=>$offline->header, 
                        'sub_header'=>$offline->sub_header, 
                        'location'=>$offline->location, 
                        'contact_no'=>$offline->contact_no, 
                        'days_open'=>$offline->days_open,  
                        'logo'=>$offline->logo,
                        'sub_logo'=>$offline->sub_logo,  
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize doctors_rxheader table from online to offline 
        $online = DB::connection('mysql2')->table('doctors_rxheader')->get();
        foreach($online as $online){  
            $online_count = DB::table('doctors_rxheader')->where('drxh_id', $online->drxh_id)->get();
                if(count($online_count) > 0){
                    DB::table('doctors_rxheader')->where('drxh_id', $online->drxh_id)->update([
                        'doctors_id'=>$online->doctors_id,  
                        'header'=>$online->header, 
                        'sub_header'=>$online->sub_header, 
                        'location'=>$online->location, 
                        'contact_no'=>$online->contact_no, 
                        'days_open'=>$online->days_open,  
                        'logo'=>$online->logo,
                        'sub_logo'=>$online->sub_logo,  
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('doctors_rxheader')->insert([ 
                        'drxh_id'=> $online->drxh_id, 
                        'doctors_id'=>$online->doctors_id,  
                        'header'=>$online->header, 
                        'sub_header'=>$online->sub_header, 
                        'location'=>$online->location, 
                        'contact_no'=>$online->contact_no, 
                        'days_open'=>$online->days_open,  
                        'logo'=>$online->logo,
                        'sub_logo'=>$online->sub_logo,  
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncDoctorsSpecializationList(){ 
        // syncronize doctors_specialization_list table from offline to online  
        $offline_query = DB::table('doctors_specialization_list')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('doctors_specialization_list')->where('spec_id', $offline->spec_id)->get();
                if(count($offline_count) > 0){
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('doctors_specialization_list')->where('spec_id', $offline->spec_id)->update([        
                            'specialization'=>$offline->specialization, 
                            'status'=>$offline->status, 
                            'created_at'=>$offline->created_at, 
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('doctors_specialization_list')->where('spec_id', $offline_count[0]->spec_id)->update([     
                            'specialization'=>$offline_count[0]->specialization, 
                            'status'=>$offline_count[0]->status,  
                            'created_at'=>$offline_count[0]->created_at, 
                            'updated_at'=>$offline_count[0]->updated_at
                        ]); 
                    }   
                    
                }else{
                    DB::connection('mysql2')->table('doctors_specialization_list')->insert([   
                        'spec_id'=>$offline->spec_id,  
                        'specialization'=>$offline->specialization, 
                        'status'=>$offline->status,  
                        'created_at'=>$offline->created_at, 
                        'updated_at'=>$offline->updated_at 
                    ]); 
                } 
        } 


        // syncronize doctors_specialization_list table from online to offline 
        $online_query = DB::connection('mysql2')->table('doctors_specialization_list')->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('doctors_specialization_list')->where('spec_id', $online->spec_id)->get();
                if(count($online_count) > 0){
                    DB::table('doctors_specialization_list')->where('spec_id', $online->spec_id)->update([     
                        'specialization'=>$online->specialization, 
                        'status'=>$online->status,  
                        'created_at'=>$online->created_at, 
                        'updated_at'=>$online->updated_at 
                    ]); 
                }else{
                    DB::table('doctors_specialization_list')->insert([   
                        'spec_id'=>$online->spec_id,  
                        'specialization'=>$online->specialization, 
                        'status'=>$online->status,  
                        'created_at'=>$online->created_at, 
                        'updated_at'=>$online->updated_at 
                    ]); 
                } 
        }  

        return true;
    }

    public static function syncDoctorsTreatmentPlan($data){ 
        // syncronize doctors_treatment_plan table from offline to online  
        $offline_query = DB::table('doctors_treatment_plan')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('doctors_treatment_plan')->where('dtp_id', $offline->dtp_id)->get();
                if(count($offline_count) > 0){
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('doctors_treatment_plan')->where('dtp_id', $offline->dtp_id)->update([  
                            'treatment_id'=>$offline->treatment_id, 
                            'management_id'=>$offline->management_id, 
                            'doctors_id'=>$offline->doctors_id, 
                            'patient_id'=>$offline->patient_id, 
                            'treatment_plan'=>$offline->treatment_plan, 
                            'date'=>$offline->date, 
                            'type'=>$offline->type, 
                            'status'=>$offline->status,  
                            'created_at'=>$offline->created_at, 
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('doctors_treatment_plan')->where('dtp_id', $offline_count[0]->dtp_id)->update([     
                            'treatment_id'=>$offline_count[0]->treatment_id, 
                            'management_id'=>$offline_count[0]->management_id, 
                            'doctors_id'=>$offline_count[0]->doctors_id, 
                            'patient_id'=>$offline_count[0]->patient_id, 
                            'treatment_plan'=>$offline_count[0]->treatment_plan, 
                            'date'=>$offline_count[0]->date, 
                            'type'=>$offline_count[0]->type, 
                            'status'=>$offline_count[0]->status,  
                            'created_at'=>$offline_count[0]->created_at, 
                            'updated_at'=>$offline_count[0]->updated_at
                        ]); 
                    }   
                    
                }else{
                    DB::connection('mysql2')->table('doctors_treatment_plan')->insert([   
                        'dtp_id'=>$offline->dtp_id, 
                        'treatment_id'=>$offline->treatment_id, 
                        'management_id'=>$offline->management_id, 
                        'doctors_id'=>$offline->doctors_id, 
                        'patient_id'=>$offline->patient_id, 
                        'treatment_plan'=>$offline->treatment_plan, 
                        'date'=>$offline->date, 
                        'type'=>$offline->type, 
                        'status'=>$offline->status,  
                        'created_at'=>$offline->created_at, 
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        } 


        // syncronize doctors_treatment_plan table from online to offline 
        $online_query = DB::connection('mysql2')->table('doctors_treatment_plan')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('doctors_treatment_plan')->where('dtp_id', $online->dtp_id)->get();
                if(count($online_count) > 0){
                    DB::table('doctors_treatment_plan')->where('dtp_id', $online->dtp_id)->update([     
                        'treatment_id'=>$online->treatment_id, 
                        'management_id'=>$online->management_id, 
                        'doctors_id'=>$online->doctors_id, 
                        'patient_id'=>$online->patient_id, 
                        'treatment_plan'=>$online->treatment_plan, 
                        'date'=>$online->date, 
                        'type'=>$online->type, 
                        'status'=>$online->status,  
                        'created_at'=>$online->created_at, 
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('doctors_treatment_plan')->insert([   
                        'dtp_id'=>$online->dtp_id,  
                        'treatment_id'=>$online->treatment_id, 
                        'management_id'=>$online->management_id, 
                        'doctors_id'=>$online->doctors_id, 
                        'patient_id'=>$online->patient_id, 
                        'treatment_plan'=>$online->treatment_plan, 
                        'date'=>$online->date, 
                        'type'=>$online->type, 
                        'status'=>$online->status,  
                        'created_at'=>$online->created_at, 
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }  
        return true;
    }

    public static function syncDoctorSalaryRecord($data){ 
        // syncronize doctor_salary_record table from offline to online  
        $offline_query = DB::table('doctor_salary_record')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('doctor_salary_record')->where('dsr_id', $offline->dsr_id)->get();
                if(count($offline_count) > 0){
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('doctor_salary_record')->where('dsr_id', $offline->dsr_id)->update([  
                            'management_id'=>$offline->management_id, 
                            'main_mgmt_id'=>$offline->main_mgmt_id, 
                            'doctor_id'=>$offline->doctor_id, 
                            'type'=>$offline->type, 
                            'doctor_share'=>$offline->doctor_share, 
                            'company_share'=>$offline->company_share, 
                            'original_amount'=>$offline->original_amount, 
                            'date_from'=>$offline->date_from, 
                            'date_to'=>$offline->date_to,  
                            'is_received'=>$offline->is_received,  
                            'status'=>$offline->status,  
                            'created_at'=>$offline->created_at, 
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('doctor_salary_record')->where('dsr_id', $offline_count[0]->dsr_id)->update([     
                            'management_id'=>$offline_count[0]->management_id, 
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id, 
                            'doctor_id'=>$offline_count[0]->doctor_id, 
                            'type'=>$offline_count[0]->type, 
                            'doctor_share'=>$offline_count[0]->doctor_share, 
                            'company_share'=>$offline_count[0]->company_share, 
                            'original_amount'=>$offline_count[0]->original_amount, 
                            'date_from'=>$offline_count[0]->date_from, 
                            'date_to'=>$offline_count[0]->date_to,  
                            'is_received'=>$offline_count[0]->is_received,  
                            'status'=>$offline_count[0]->status,  
                            'created_at'=>$offline_count[0]->created_at, 
                            'updated_at'=>$offline_count[0]->updated_at
                        ]); 
                    }   
                    
                }else{
                    DB::connection('mysql2')->table('doctor_salary_record')->insert([   
                        'dsr_id'=>$offline->dsr_id, 
                        'management_id'=>$offline->management_id, 
                        'main_mgmt_id'=>$offline->main_mgmt_id, 
                        'doctor_id'=>$offline->doctor_id, 
                        'type'=>$offline->type, 
                        'doctor_share'=>$offline->doctor_share, 
                        'company_share'=>$offline->company_share, 
                        'original_amount'=>$offline->original_amount, 
                        'date_from'=>$offline->date_from, 
                        'date_to'=>$offline->date_to,  
                        'is_received'=>$offline->is_received,  
                        'status'=>$offline->status,  
                        'created_at'=>$offline->created_at, 
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        } 


        // syncronize doctor_salary_record table from online to offline 
        $online_query = DB::connection('mysql2')->table('doctor_salary_record')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('doctor_salary_record')->where('dsr_id', $online->dsr_id)->get();
                if(count($online_count) > 0){
                    DB::table('doctor_salary_record')->where('dsr_id', $online->dsr_id)->update([    
                        'management_id'=>$online->management_id, 
                        'main_mgmt_id'=>$online->main_mgmt_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'type'=>$online->type, 
                        'doctor_share'=>$online->doctor_share, 
                        'company_share'=>$online->company_share, 
                        'original_amount'=>$online->original_amount, 
                        'date_from'=>$online->date_from, 
                        'date_to'=>$online->date_to,  
                        'is_received'=>$online->is_received,  
                        'status'=>$online->status,  
                        'created_at'=>$online->created_at, 
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('doctor_salary_record')->insert([   
                        'dsr_id'=>$online->dsr_id,  
                        'management_id'=>$online->management_id, 
                        'main_mgmt_id'=>$online->main_mgmt_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'type'=>$online->type, 
                        'doctor_share'=>$online->doctor_share, 
                        'company_share'=>$online->company_share, 
                        'original_amount'=>$online->original_amount, 
                        'date_from'=>$online->date_from, 
                        'date_to'=>$online->date_to,  
                        'is_received'=>$online->is_received,  
                        'status'=>$online->status,  
                        'created_at'=>$online->created_at, 
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }  
        return true;
    }

    public static function syncEncoder($data){
        // syncronize encoder table from offline to online   
        $offline_query = DB::table('encoder')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('encoder')->where('e_id', $offline->e_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('encoder')->where('e_id', $offline->e_id)->update([     
                            'encoder_id'=>$offline->encoder_id,
                            'doctors_id'=>$offline->doctors_id,
                            'management_id'=>$offline->management_id,
                            'user_id'=>$offline->user_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'address'=>$offline->address,
                            'gender'=>$offline->gender,
                            'email'=>$offline->email,
                            'birthday'=>$offline->birthday,
                            'role'=>$offline->role,
                            'image'=>$offline->image,
                            'status'=>$offline->status,
                            'added_by'=>$offline->added_by,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    
                    else{
                        DB::table('encoder')->where('e_id', $offline_count[0]->e_id)->update([     
                            'encoder_id'=>$offline_count[0]->encoder_id,
                            'doctors_id'=>$offline_count[0]->doctors_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'address'=>$offline_count[0]->address,
                            'gender'=>$offline_count[0]->gender,
                            'email'=>$offline_count[0]->email,
                            'birthday'=>$offline_count[0]->birthday,
                            'role'=>$offline_count[0]->role,
                            'image'=>$offline_count[0]->image,
                            'status'=>$offline_count[0]->status,
                            'added_by'=>$offline_count[0]->added_by,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                     
                }else{
                    DB::connection('mysql2')->table('encoder')->insert([    
                        'e_id'=>$offline->e_id,
                        'encoder_id'=>$offline->encoder_id,
                        'doctors_id'=>$offline->doctors_id,
                        'management_id'=>$offline->management_id,
                        'user_id'=>$offline->user_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'address'=>$offline->address,
                        'gender'=>$offline->gender,
                        'email'=>$offline->email,
                        'birthday'=>$offline->birthday,
                        'role'=>$offline->role,
                        'image'=>$offline->image,
                        'status'=>$offline->status,
                        'added_by'=>$offline->added_by,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize encoder table from online to offline 
        $online_query = DB::connection('mysql2')->table('encoder')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('encoder')->where('e_id', $online->e_id)->get();
                if(count($online_count) > 0){
                    DB::table('encoder')->where('e_id', $online->e_id)->update([     
                        'encoder_id'=>$online->encoder_id,
                        'doctors_id'=>$online->doctors_id,
                        'management_id'=>$online->management_id,
                        'user_id'=>$online->user_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'gender'=>$online->gender,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'added_by'=>$online->added_by,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('encoder')->insert([    
                        'e_id'=>$online->e_id,
                        'encoder_id'=>$online->encoder_id,
                        'doctors_id'=>$online->doctors_id,
                        'management_id'=>$online->management_id,
                        'user_id'=>$online->user_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'gender'=>$online->gender,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'added_by'=>$online->added_by,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncEncoderPatientBillsRecord($data){
        // syncronize encoder_patientbills_records table from offline to online   
        $offline_query = DB::table('encoder_patientbills_records')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('encoder_patientbills_records')->where('epr_id', $offline->epr_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('encoder_patientbills_records')->where('epr_id', $offline->epr_id)->update([      
                            'trace_number'=>$offline->trace_number,
                            'management_id'=>$offline->management_id,
                            'doctors_id'=>$offline->doctors_id,
                            'patient_id'=>$offline->patient_id,
                            'bill_name'=>$offline->bill_name,
                            'bill_amount'=>$offline->bill_amount,
                            'bill_from'=>$offline->bill_from,
                            'bill_payment'=>$offline->bill_payment,
                            'bill_department'=>$offline->bill_department,
                            'bill_total'=>$offline->bill_total,
                            'process_by'=>$offline->process_by,
                            'receipt_number'=>$offline->receipt_number,
                            'order_id'=>$offline->order_id,
                            'is_refund'=>$offline->is_refund,
                            'is_refund_reason'=>$offline->is_refund_reason,
                            'is_refund_date'=>$offline->is_refund_date,
                            'is_refund_by'=>$offline->is_refund_by,
                            'status'=>$offline->status, 
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    
                    else{
                        DB::table('encoder_patientbills_records')->where('epr_id', $offline_count[0]->epr_id)->update([     
                            'trace_number'=>$offline_count[0]->trace_number,
                            'management_id'=>$offline_count[0]->management_id,
                            'doctors_id'=>$offline_count[0]->doctors_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'bill_name'=>$offline_count[0]->bill_name,
                            'bill_amount'=>$offline_count[0]->bill_amount,
                            'bill_from'=>$offline_count[0]->bill_from,
                            'bill_payment'=>$offline_count[0]->bill_payment,
                            'bill_department'=>$offline_count[0]->bill_department,
                            'bill_total'=>$offline_count[0]->bill_total,
                            'process_by'=>$offline_count[0]->process_by,
                            'receipt_number'=>$offline_count[0]->receipt_number,
                            'order_id'=>$offline_count[0]->order_id,
                            'is_refund'=>$offline_count[0]->is_refund,
                            'is_refund_reason'=>$offline_count[0]->is_refund_reason,
                            'is_refund_date'=>$offline_count[0]->is_refund_date,
                            'is_refund_by'=>$offline_count[0]->is_refund_by,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                     
                }else{
                    DB::connection('mysql2')->table('encoder_patientbills_records')->insert([    
                        'epr_id'=>$offline->epr_id,
                        'trace_number'=>$offline->trace_number,
                        'management_id'=>$offline->management_id,
                        'doctors_id'=>$offline->doctors_id,
                        'patient_id'=>$offline->patient_id,
                        'bill_name'=>$offline->bill_name,
                        'bill_amount'=>$offline->bill_amount,
                        'bill_from'=>$offline->bill_from,
                        'bill_payment'=>$offline->bill_payment,
                        'bill_department'=>$offline->bill_department,
                        'bill_total'=>$offline->bill_total,
                        'process_by'=>$offline->process_by,
                        'receipt_number'=>$offline->receipt_number,
                        'order_id'=>$offline->order_id,
                        'is_refund'=>$offline->is_refund,
                        'is_refund_reason'=>$offline->is_refund_reason,
                        'is_refund_date'=>$offline->is_refund_date,
                        'is_refund_by'=>$offline->is_refund_by,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize encoder_patientbills_records table from online to offline 
        $online_query = DB::connection('mysql2')->table('encoder_patientbills_records')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('encoder_patientbills_records')->where('epr_id', $online->epr_id)->get();
                if(count($online_count) > 0){
                    DB::table('encoder_patientbills_records')->where('epr_id', $online->epr_id)->update([     
                        'trace_number'=>$online->trace_number,
                        'management_id'=>$online->management_id,
                        'doctors_id'=>$online->doctors_id,
                        'patient_id'=>$online->patient_id,
                        'bill_name'=>$online->bill_name,
                        'bill_amount'=>$online->bill_amount,
                        'bill_from'=>$online->bill_from,
                        'bill_payment'=>$online->bill_payment,
                        'bill_department'=>$online->bill_department,
                        'bill_total'=>$online->bill_total,
                        'process_by'=>$online->process_by,
                        'receipt_number'=>$online->receipt_number,
                        'order_id'=>$online->order_id,
                        'is_refund'=>$online->is_refund,
                        'is_refund_reason'=>$online->is_refund_reason,
                        'is_refund_date'=>$online->is_refund_date,
                        'is_refund_by'=>$online->is_refund_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('encoder_patientbills_records')->insert([    
                        'epr_id'=>$online->epr_id,
                        'trace_number'=>$online->trace_number,
                        'management_id'=>$online->management_id,
                        'doctors_id'=>$online->doctors_id,
                        'patient_id'=>$online->patient_id,
                        'bill_name'=>$online->bill_name,
                        'bill_amount'=>$online->bill_amount,
                        'bill_from'=>$online->bill_from,
                        'bill_payment'=>$online->bill_payment,
                        'bill_department'=>$online->bill_department,
                        'bill_total'=>$online->bill_total,
                        'process_by'=>$online->process_by,
                        'receipt_number'=>$online->receipt_number,
                        'order_id'=>$online->order_id,
                        'is_refund'=>$online->is_refund,
                        'is_refund_reason'=>$online->is_refund_reason,
                        'is_refund_date'=>$online->is_refund_date,
                        'is_refund_by'=>$online->is_refund_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    } 

    public static function syncEndorsementAccount($data){
        // syncronize endorsement_account table from offline to online   
        $offline_query = DB::table('endorsement_account')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('endorsement_account')->where('ea_id', $offline->ea_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('endorsement_account')->where('ea_id', $offline->ea_id)->update([      
                            'endorsement_id'=>$offline->endorsement_id,
                            'management_id'=>$offline->management_id,
                            'user_id'=>$offline->user_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'address'=>$offline->address,
                            'gender'=>$offline->gender,
                            'email'=>$offline->email,
                            'birthday'=>$offline->birthday,
                            'image'=>$offline->image,
                            'role'=>$offline->role,
                            'added_by'=>$offline->added_by,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    
                    else{
                        DB::table('endorsement_account')->where('ea_id', $offline_count[0]->ea_id)->update([     
                            'endorsement_id'=>$offline_count[0]->endorsement_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'address'=>$offline_count[0]->address,
                            'gender'=>$offline_count[0]->gender,
                            'email'=>$offline_count[0]->email,
                            'birthday'=>$offline_count[0]->birthday,
                            'image'=>$offline_count[0]->image,
                            'role'=>$offline_count[0]->role,
                            'added_by'=>$offline_count[0]->added_by,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                     
                }else{
                    DB::connection('mysql2')->table('endorsement_account')->insert([   
                        'ea_id'=>$offline->ea_id,
                        'endorsement_id'=>$offline->endorsement_id,
                        'management_id'=>$offline->management_id,
                        'user_id'=>$offline->user_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'address'=>$offline->address,
                        'gender'=>$offline->gender,
                        'email'=>$offline->email,
                        'birthday'=>$offline->birthday,
                        'image'=>$offline->image,
                        'role'=>$offline->role,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize endorsement_account table from online to offline 
        $online_query = DB::connection('mysql2')->table('endorsement_account')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('endorsement_account')->where('ea_id', $online->ea_id)->get();
                if(count($online_count) > 0){
                    DB::table('endorsement_account')->where('ea_id', $online->ea_id)->update([     
                        'endorsement_id'=>$online->endorsement_id,
                        'management_id'=>$online->management_id,
                        'user_id'=>$online->user_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'gender'=>$online->gender,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'image'=>$online->image,
                        'role'=>$online->role,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('endorsement_account')->insert([    
                        'ea_id'=>$online->ea_id,
                        'endorsement_id'=>$online->endorsement_id,
                        'management_id'=>$online->management_id,
                        'user_id'=>$online->user_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'gender'=>$online->gender,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'image'=>$online->image,
                        'role'=>$online->role,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    } 

    public static function syncFormFooterHeaderInformation($data){
        // syncronize form_footer_header_information table from offline to online   
        $offline_query = DB::table('form_footer_header_information')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('form_footer_header_information')->where('ffhi_id', $offline->ffhi_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('form_footer_header_information')->where('ffhi_id', $offline->ffhi_id)->update([      
                            'management_id'=>$offline->management_id,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'used_to'=>$offline->used_to,
                            'subtitle1'=>$offline->subtitle1,
                            'subtitle2'=>$offline->subtitle2,
                            'subtitle3'=>$offline->subtitle3,
                            'company_name'=>$offline->company_name,
                            'to_company'=>$offline->to_company,
                            'to_attention'=>$offline->to_attention,
                            'to_address'=>$offline->to_address,
                            'to_full_address'=>$offline->to_full_address,
                            'ref_number'=>$offline->ref_number,
                            'expense_category'=>$offline->expense_category,
                            'prepared_by'=>$offline->prepared_by,
                            'checked_by'=>$offline->checked_by,
                            'verified_by'=>$offline->verified_by,
                            'noted_by'=>$offline->noted_by,
                            'approved_by'=>$offline->approved_by,
                            'reviewed_by'=>$offline->reviewed_by,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('form_footer_header_information')->where('ffhi_id', $offline_count[0]->ffhi_id)->update([   
                            'management_id'=>$offline_count[0]->management_id,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'used_to'=>$offline_count[0]->used_to,
                            'subtitle1'=>$offline_count[0]->subtitle1,
                            'subtitle2'=>$offline_count[0]->subtitle2,
                            'subtitle3'=>$offline_count[0]->subtitle3,
                            'company_name'=>$offline_count[0]->company_name,
                            'to_company'=>$offline_count[0]->to_company,
                            'to_attention'=>$offline_count[0]->to_attention,
                            'to_address'=>$offline_count[0]->to_address,
                            'to_full_address'=>$offline_count[0]->to_full_address,
                            'ref_number'=>$offline_count[0]->ref_number,
                            'expense_category'=>$offline_count[0]->expense_category,
                            'prepared_by'=>$offline_count[0]->prepared_by,
                            'checked_by'=>$offline_count[0]->checked_by,
                            'verified_by'=>$offline_count[0]->verified_by,
                            'noted_by'=>$offline_count[0]->noted_by,
                            'approved_by'=>$offline_count[0]->approved_by,
                            'reviewed_by'=>$offline_count[0]->reviewed_by,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                     
                }else{
                    DB::connection('mysql2')->table('form_footer_header_information')->insert([   
                        'ffhi_id'=>$offline->ffhi_id,
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'used_to'=>$offline->used_to,
                        'subtitle1'=>$offline->subtitle1,
                        'subtitle2'=>$offline->subtitle2,
                        'subtitle3'=>$offline->subtitle3,
                        'company_name'=>$offline->company_name,
                        'to_company'=>$offline->to_company,
                        'to_attention'=>$offline->to_attention,
                        'to_address'=>$offline->to_address,
                        'to_full_address'=>$offline->to_full_address,
                        'ref_number'=>$offline->ref_number,
                        'expense_category'=>$offline->expense_category,
                        'prepared_by'=>$offline->prepared_by,
                        'checked_by'=>$offline->checked_by,
                        'verified_by'=>$offline->verified_by,
                        'noted_by'=>$offline->noted_by,
                        'approved_by'=>$offline->approved_by,
                        'reviewed_by'=>$offline->reviewed_by,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize form_footer_header_information table from online to offline 
        $online_query = DB::connection('mysql2')->table('form_footer_header_information')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('form_footer_header_information')->where('ffhi_id', $online->ffhi_id)->get();
                if(count($online_count) > 0){
                    DB::table('form_footer_header_information')->where('ffhi_id', $online->ffhi_id)->update([     
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'used_to'=>$online->used_to,
                        'subtitle1'=>$online->subtitle1,
                        'subtitle2'=>$online->subtitle2,
                        'subtitle3'=>$online->subtitle3,
                        'company_name'=>$online->company_name,
                        'to_company'=>$online->to_company,
                        'to_attention'=>$online->to_attention,
                        'to_address'=>$online->to_address,
                        'to_full_address'=>$online->to_full_address,
                        'ref_number'=>$online->ref_number,
                        'expense_category'=>$online->expense_category,
                        'prepared_by'=>$online->prepared_by,
                        'checked_by'=>$online->checked_by,
                        'verified_by'=>$online->verified_by,
                        'noted_by'=>$online->noted_by,
                        'approved_by'=>$online->approved_by,
                        'reviewed_by'=>$online->reviewed_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('form_footer_header_information')->insert([    
                        'ffhi_id'=>$online->ffhi_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'used_to'=>$online->used_to,
                        'subtitle1'=>$online->subtitle1,
                        'subtitle2'=>$online->subtitle2,
                        'subtitle3'=>$online->subtitle3,
                        'company_name'=>$online->company_name,
                        'to_company'=>$online->to_company,
                        'to_attention'=>$online->to_attention,
                        'to_address'=>$online->to_address,
                        'to_full_address'=>$online->to_full_address,
                        'ref_number'=>$online->ref_number,
                        'expense_category'=>$online->expense_category,
                        'prepared_by'=>$online->prepared_by,
                        'checked_by'=>$online->checked_by,
                        'verified_by'=>$online->verified_by,
                        'noted_by'=>$online->noted_by,
                        'approved_by'=>$online->approved_by,
                        'reviewed_by'=>$online->reviewed_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    } 
    
    public static function syncGeneralManagement(){
         // syncronize general_management table from offline to online   
         $offline_query = DB::table('general_management')->get();  
         foreach($offline_query as $offline){  
             $offline_count = DB::connection('mysql2')->table('general_management')->where('gm_id', $offline->gm_id)->get();
                 if(count($offline_count) > 0){ 
                     if($offline->updated_at > $offline_count[0]->updated_at){  
                         DB::connection('mysql2')->table('general_management')->where('gm_id', $offline->gm_id)->update([      
                            'general_management_id'=>$offline->general_management_id,
                            'company'=>$offline->company,
                            'owner'=>$offline->owner,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                         ]);
                     } 
                     
                     else{
                         DB::table('general_management')->where('gm_id', $offline_count[0]->gm_id)->update([     
                            'general_management_id'=>$offline_count[0]->general_management_id,
                            'company'=>$offline_count[0]->company,
                            'owner'=>$offline_count[0]->owner,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                         ]);
                     }  
                      
                 }else{
                    DB::connection('mysql2')->table('general_management')->insert([    
                        'gm_id'=>$offline->gm_id,
                        'general_management_id'=>$offline->general_management_id,
                        'company'=>$offline->company,
                        'owner'=>$offline->owner,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                 } 
         }
 
         // syncronize general_management table from online to offline 
         $online_query = DB::connection('mysql2')->table('general_management')->get();  
         foreach($online_query as $online){  
             $online_count = DB::table('general_management')->where('gm_id', $online->gm_id)->get();
                 if(count($online_count) > 0){
                     DB::table('general_management')->where('gm_id', $online->gm_id)->update([   
                        'general_management_id'=>$online->general_management_id,
                        'company'=>$online->company,
                        'owner'=>$online->owner,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                     ]); 
                 }else{
                     DB::table('general_management')->insert([    
                        'gm_id'=>$online->gm_id,
                        'general_management_id'=>$online->general_management_id,
                        'company'=>$online->company,
                        'owner'=>$online->owner,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                     ]); 
                 } 
         }   
 
         return true;
    }

    public static function syncGeneralManagementBranches(){
         // syncronize general_management_branches table from offline to online   
         $offline_query = DB::table('general_management_branches')->get();  
         foreach($offline_query as $offline){  
             $offline_count = DB::connection('mysql2')->table('general_management_branches')->where('gmb_id', $offline->gmb_id)->get();
                 if(count($offline_count) > 0){ 
                     if($offline->updated_at > $offline_count[0]->updated_at){  
                         DB::connection('mysql2')->table('general_management_branches')->where('gmb_id', $offline->gmb_id)->update([      
                            'general_management_id'=>$offline->general_management_id,
                            'management_id'=>$offline->management_id,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                         ]);
                     } 
                     
                     else{
                         DB::table('general_management_branches')->where('gmb_id', $offline_count[0]->gmb_id)->update([     
                            'general_management_id'=>$offline->general_management_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                         ]);
                     }  
                      
                 }else{
                    DB::connection('mysql2')->table('general_management_branches')->insert([    
                        'gmb_id'=>$offline->gmb_id,
                        'general_management_id'=>$offline->general_management_id,
                        'management_id'=>$offline->management_id,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                 } 
         }
 
         // syncronize general_management_branches table from online to offline 
         $online_query = DB::connection('mysql2')->table('general_management_branches')->get();  
         foreach($online_query as $online){  
             $online_count = DB::table('general_management_branches')->where('gmb_id', $online->gmb_id)->get();
                 if(count($online_count) > 0){
                     DB::table('general_management_branches')->where('gmb_id', $online->gmb_id)->update([   
                        'general_management_id'=>$online->general_management_id,
                        'management_id'=>$online->management_id,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                     ]); 
                 }else{
                     DB::table('general_management_branches')->insert([    
                        'gmb_id'=>$online->gmb_id,
                        'general_management_id'=>$online->general_management_id,
                        'management_id'=>$online->management_id,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                     ]); 
                 } 
         }   
 
         return true;
    }

    public static function syncHaptechAccount($data){
        // syncronize haptech_account table from offline to online   
        $offline_query = DB::table('haptech_account')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('haptech_account')->where('ha_id', $offline->ha_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('haptech_account')->where('ha_id', $offline->ha_id)->update([      
                            'hap_id'=>$offline->hap_id,
                            'user_id'=>$offline->user_id,
                            'management_id'=>$offline->management_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'address'=>$offline->address,
                            'gender'=>$offline->gender,
                            'birthday'=>$offline->birthday,
                            'email'=>$offline->email,
                            'role' => $offline->role,
                            'image'=>$offline->image,
                            'added_by'=>$offline->added_by,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    
                    else{
                        DB::table('haptech_account')->where('ha_id', $offline_count[0]->ha_id)->update([     
                            'hap_id'=>$offline_count[0]->hap_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'address'=>$offline_count[0]->address,
                            'gender'=>$offline_count[0]->gender,
                            'birthday'=>$offline_count[0]->birthday,
                            'email'=>$offline_count[0]->email,
                            'role' => $offline_count[0]->role,
                            'image'=>$offline_count[0]->image,
                            'added_by'=>$offline_count[0]->added_by,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                     
                }else{
                    DB::connection('mysql2')->table('haptech_account')->insert([    
                        'ha_id'=>$offline->ha_id,
                        'hap_id'=>$offline->hap_id,
                        'user_id'=>$offline->user_id,
                        'management_id'=>$offline->management_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'address'=>$offline->address,
                        'gender'=>$offline->gender,
                        'birthday'=>$offline->birthday,
                        'email'=>$offline->email,
                        'role' => $offline->role,
                        'image'=>$offline->image,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize haptech_account table from online to offline 
        $online_query = DB::connection('mysql2')->table('haptech_account')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('haptech_account')->where('ha_id', $online->ha_id)->get();
                if(count($online_count) > 0){
                    DB::table('haptech_account')->where('ha_id', $online->ha_id)->update([   
                        'hap_id'=>$online->hap_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'gender'=>$online->gender,
                        'birthday'=>$online->birthday,
                        'email'=>$online->email,
                        'role' => $online->role,
                        'image'=>$online->image,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('haptech_account')->insert([    
                        'ha_id'=>$online->ha_id,
                        'hap_id'=>$online->hap_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'gender'=>$online->gender,
                        'birthday'=>$online->birthday,
                        'email'=>$online->email,
                        'role' => $online->role,
                        'image'=>$online->image,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncHMOList($data){
        // syncronize hmo_list table from offline to online   
        $offline_query = DB::table('hmo_list')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('hmo_list')->where('hl_id', $offline->hl_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('hmo_list')->where('hl_id', $offline->hl_id)->update([      
                            'hap_id'=>$offline->hap_id,
                            'management_id'=>$offline->management_id,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'name'=>$offline->name,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    
                    else{
                        DB::table('hmo_list')->where('hl_id', $offline_count[0]->hl_id)->update([     
                            'hap_id'=>$offline_count[0]->hap_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'name'=>$offline_count[0]->name,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                     
                }else{
                    DB::connection('mysql2')->table('hmo_list')->insert([    
                        'hl_id'=>$offline->hl_id,
                        'hap_id'=>$offline->hap_id,
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'name'=>$offline->name,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize hmo_list table from online to offline 
        $online_query = DB::connection('mysql2')->table('hmo_list')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('hmo_list')->where('hl_id', $online->hl_id)->get();
                if(count($online_count) > 0){
                    DB::table('hmo_list')->where('hl_id', $online->hl_id)->update([   
                        'hap_id'=>$online->hap_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'name'=>$online->name,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('hmo_list')->insert([    
                        'hl_id'=>$online->hl_id,
                        'hap_id'=>$online->hap_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'name'=>$online->name,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncHospitalBillingAccount($data){
        // syncronize hospital_billing_account table from offline to online   
        $offline_query = DB::table('hospital_billing_account')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('hospital_billing_account')->where('bu_id', $offline->bu_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('hospital_billing_account')->where('bu_id', $offline->bu_id)->update([      
                            'buser_id'=>$offline->buser_id,
                            'management_id'=>$offline->management_id,
                            'user_id'=>$offline->user_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'address'=>$offline->address,
                            'gender'=>$offline->gender,
                            'birthday'=>$offline->birthday,
                            'role'=>$offline->role,
                            'email'=>$offline->email,
                            'image'=>$offline->image,
                            'added_by'=>$offline->added_by,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    
                    else{
                        DB::table('hospital_billing_account')->where('bu_id', $offline_count[0]->bu_id)->update([     
                            'buser_id'=>$offline_count[0]->buser_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'address'=>$offline_count[0]->address,
                            'gender'=>$offline_count[0]->gender,
                            'birthday'=>$offline_count[0]->birthday,
                            'role'=>$offline_count[0]->role,
                            'email'=>$offline_count[0]->email,
                            'image'=>$offline_count[0]->image,
                            'added_by'=>$offline_count[0]->added_by,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                     
                }else{
                    DB::connection('mysql2')->table('hospital_billing_account')->insert([    
                        'bu_id'=>$offline->bu_id,
                        'buser_id'=>$offline->buser_id,
                        'management_id'=>$offline->management_id,
                        'user_id'=>$offline->user_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'address'=>$offline->address,
                        'gender'=>$offline->gender,
                        'birthday'=>$offline->birthday,
                        'role'=>$offline->role,
                        'email'=>$offline->email,
                        'image'=>$offline->image,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize hospital_billing_account table from online to offline 
        $online_query = DB::connection('mysql2')->table('hospital_billing_account')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('hospital_billing_account')->where('bu_id', $online->bu_id)->get();
                if(count($online_count) > 0){
                    DB::table('hospital_billing_account')->where('bu_id', $online->bu_id)->update([   
                        'buser_id'=>$online->buser_id,
                        'management_id'=>$online->management_id,
                        'user_id'=>$online->user_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'gender'=>$online->gender,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'email'=>$online->email,
                        'image'=>$online->image,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('hospital_billing_account')->insert([    
                        'bu_id'=>$online->bu_id,
                        'buser_id'=>$online->buser_id,
                        'management_id'=>$online->management_id,
                        'user_id'=>$online->user_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'gender'=>$online->gender,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'email'=>$online->email,
                        'image'=>$online->image,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncHospitalDTRLogs($data){
        // syncronize hospital_dtr_logs table from offline to online   
        $offline_query = DB::table('hospital_dtr_logs')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('hospital_dtr_logs')->where('dtr_id', $offline->dtr_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('hospital_dtr_logs')->where('dtr_id', $offline->dtr_id)->update([      
                            'user_id'=>$offline->user_id,
                            'management_id'=>$offline->management_id,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'timein'=>$offline->timein,
                            'timeout'=>$offline->timeout,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('hospital_dtr_logs')->where('dtr_id', $offline_count[0]->dtr_id)->update([  
                            'user_id'=>$offline_count[0]->user_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'timein'=>$offline_count[0]->timein,
                            'timeout'=>$offline_count[0]->timeout,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                     
                }else{
                    DB::connection('mysql2')->table('hospital_dtr_logs')->insert([    
                        'dtr_id'=>$offline->dtr_id,
                        'user_id'=>$offline->user_id,
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'timein'=>$offline->timein,
                        'timeout'=>$offline->timeout,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize hospital_dtr_logs table from online to offline 
        $online_query = DB::connection('mysql2')->table('hospital_dtr_logs')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('hospital_dtr_logs')->where('dtr_id', $online->dtr_id)->get();
                if(count($online_count) > 0){
                    DB::table('hospital_dtr_logs')->where('dtr_id', $online->dtr_id)->update([   
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'timein'=>$online->timein,
                        'timeout'=>$online->timeout,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('hospital_dtr_logs')->insert([    
                        'dtr_id'=>$online->dtr_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'timein'=>$online->timein,
                        'timeout'=>$online->timeout,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncHospitalEmployeeDetails($data){
        // syncronize hospital_employee_details table from offline to online   
        $offline_query = DB::table('hospital_employee_details')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('hospital_employee_details')->where('hed_id', $offline->hed_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('hospital_employee_details')->where('hed_id', $offline->hed_id)->update([      
                            'user_id'=>$offline->user_id,
                            'management_id'=>$offline->management_id,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'date_started'=>$offline->date_started,
                            'date_birth'=>$offline->date_birth,
                            'employee_status'=>$offline->employee_status,
                            'civil_status'=>$offline->civil_status,
                            'contact'=>$offline->contact,
                            'position'=>$offline->position,
                            'shared'=>$offline->shared,
                            'sick_leave'=>$offline->sick_leave,
                            'sick_leave_orig'=>$offline->sick_leave_orig,
                            'vacation_leave'=>$offline->vacation_leave,
                            'vacation_leave_orig'=>$offline->vacation_leave_orig,
                            'hazard_start_15'=>$offline->hazard_start_15,
                            'hazard_16_end'=>$offline->hazard_16_end,
                            'rate_classification'=>$offline->rate_classification,
                            'monthly_salary'=>$offline->monthly_salary,
                            'daily_salary'=>$offline->daily_salary,
                            'added_by'=>$offline->added_by,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('hospital_employee_details')->where('hed_id', $offline_count[0]->hed_id)->update([  
                            'user_id'=>$offline_count[0]->user_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'date_started'=>$offline_count[0]->date_started,
                            'date_birth'=>$offline_count[0]->date_birth,
                            'employee_status'=>$offline_count[0]->employee_status,
                            'civil_status'=>$offline_count[0]->civil_status,
                            'contact'=>$offline_count[0]->contact,
                            'position'=>$offline_count[0]->position,
                            'shared'=>$offline_count[0]->shared,
                            'sick_leave'=>$offline_count[0]->sick_leave,
                            'sick_leave_orig'=>$offline_count[0]->sick_leave_orig,
                            'vacation_leave'=>$offline_count[0]->vacation_leave,
                            'vacation_leave_orig'=>$offline_count[0]->vacation_leave_orig,
                            'hazard_start_15'=>$offline_count[0]->hazard_start_15,
                            'hazard_16_end'=>$offline_count[0]->hazard_16_end,
                            'rate_classification'=>$offline_count[0]->rate_classification,
                            'monthly_salary'=>$offline_count[0]->monthly_salary,
                            'daily_salary'=>$offline_count[0]->daily_salary,
                            'added_by'=>$offline_count[0]->added_by,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                     
                }else{
                    DB::connection('mysql2')->table('hospital_employee_details')->insert([    
                        'hed_id'=>$offline->hed_id,
                        'user_id'=>$offline->user_id,
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'date_started'=>$offline->date_started,
                        'date_birth'=>$offline->date_birth,
                        'employee_status'=>$offline->employee_status,
                        'civil_status'=>$offline->civil_status,
                        'contact'=>$offline->contact,
                        'position'=>$offline->position,
                        'shared'=>$offline->shared,
                        'sick_leave'=>$offline->sick_leave,
                        'sick_leave_orig'=>$offline->sick_leave_orig,
                        'vacation_leave'=>$offline->vacation_leave,
                        'vacation_leave_orig'=>$offline->vacation_leave_orig,
                        'hazard_start_15'=>$offline->hazard_start_15,
                        'hazard_16_end'=>$offline->hazard_16_end,
                        'rate_classification'=>$offline->rate_classification,
                        'monthly_salary'=>$offline->monthly_salary,
                        'daily_salary'=>$offline->daily_salary,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize hospital_employee_details table from online to offline 
        $online_query = DB::connection('mysql2')->table('hospital_employee_details')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('hospital_employee_details')->where('hed_id', $online->hed_id)->get();
                if(count($online_count) > 0){
                    DB::table('hospital_employee_details')->where('hed_id', $online->hed_id)->update([  
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'date_started'=>$online->date_started,
                        'date_birth'=>$online->date_birth,
                        'employee_status'=>$online->employee_status,
                        'civil_status'=>$online->civil_status,
                        'contact'=>$online->contact,
                        'position'=>$online->position,
                        'shared'=>$online->shared,
                        'sick_leave'=>$online->sick_leave,
                        'sick_leave_orig'=>$online->sick_leave_orig,
                        'vacation_leave'=>$online->vacation_leave,
                        'vacation_leave_orig'=>$online->vacation_leave_orig,
                        'hazard_start_15'=>$online->hazard_start_15,
                        'hazard_16_end'=>$online->hazard_16_end,
                        'rate_classification'=>$online->rate_classification,
                        'monthly_salary'=>$online->monthly_salary,
                        'daily_salary'=>$online->daily_salary,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('hospital_employee_details')->insert([ 
                        'hed_id'=>$online->hed_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'date_started'=>$online->date_started,
                        'date_birth'=>$online->date_birth,
                        'employee_status'=>$online->employee_status,
                        'civil_status'=>$online->civil_status,
                        'contact'=>$online->contact,
                        'position'=>$online->position,
                        'shared'=>$online->shared,
                        'sick_leave'=>$online->sick_leave,
                        'sick_leave_orig'=>$online->sick_leave_orig,
                        'vacation_leave'=>$online->vacation_leave,
                        'vacation_leave_orig'=>$online->vacation_leave_orig,
                        'hazard_start_15'=>$online->hazard_start_15,
                        'hazard_16_end'=>$online->hazard_16_end,
                        'rate_classification'=>$online->rate_classification,
                        'monthly_salary'=>$online->monthly_salary,
                        'daily_salary'=>$online->daily_salary,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncHospitalEmployeePayrollAdd($data){
        // syncronize hospital_employee_payroll_add table from offline to online   
        $offline_query = DB::table('hospital_employee_payroll_add')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('hospital_employee_payroll_add')->where('hepa_id', $offline->hepa_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('hospital_employee_payroll_add')->where('hepa_id', $offline->hepa_id)->update([      
                            'user_id'=>$offline->user_id,
                            'management_id'=>$offline->management_id,
                            'header_id'=>$offline->header_id,
                            'header_cat'=>$offline->header_cat,
                            'amount'=>$offline->amount,
                            'covered_period_start'=>$offline->covered_period_start,
                            'covered_period_end'=>$offline->covered_period_end,
                            'added_by'=> $offline->added_by,
                            'status' => $offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('hospital_employee_payroll_add')->where('hepa_id', $offline_count[0]->hepa_id)->update([  
                            'user_id'=>$offline_count[0]->user_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'header_id'=>$offline_count[0]->header_id,
                            'header_cat'=>$offline_count[0]->header_cat,
                            'amount'=>$offline_count[0]->amount,
                            'covered_period_start'=>$offline_count[0]->covered_period_start,
                            'covered_period_end'=>$offline_count[0]->covered_period_end,
                            'added_by'=> $offline_count[0]->added_by,
                            'status' => $offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                     
                }else{
                    DB::connection('mysql2')->table('hospital_employee_payroll_add')->insert([    
                        'hepa_id'=>$offline->hepa_id,
                        'user_id'=>$offline->user_id,
                        'management_id'=>$offline->management_id,
                        'header_id'=>$offline->header_id,
                        'header_cat'=>$offline->header_cat,
                        'amount'=>$offline->amount,
                        'covered_period_start'=>$offline->covered_period_start,
                        'covered_period_end'=>$offline->covered_period_end,
                        'added_by'=> $offline->added_by,
                        'status' => $offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize hospital_employee_payroll_add table from online to offline 
        $online_query = DB::connection('mysql2')->table('hospital_employee_payroll_add')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('hospital_employee_payroll_add')->where('hepa_id', $online->hepa_id)->get();
                if(count($online_count) > 0){
                    DB::table('hospital_employee_payroll_add')->where('hepa_id', $online->hepa_id)->update([  
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'header_id'=>$online->header_id,
                        'header_cat'=>$online->header_cat,
                        'amount'=>$online->amount,
                        'covered_period_start'=>$online->covered_period_start,
                        'covered_period_end'=>$online->covered_period_end,
                        'added_by'=> $online->added_by,
                        'status' => $online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('hospital_employee_payroll_add')->insert([ 
                        'hepa_id'=>$online->hepa_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'header_id'=>$online->header_id,
                        'header_cat'=>$online->header_cat,
                        'amount'=>$online->amount,
                        'covered_period_start'=>$online->covered_period_start,
                        'covered_period_end'=>$online->covered_period_end,
                        'added_by'=> $online->added_by,
                        'status' => $online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncHrAccount($data){
        // syncronize hr_account table from offline to online   
        $offline_query = DB::table('hr_account')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('hr_account')->where('h_id', $offline->h_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('hr_account')->where('h_id', $offline->h_id)->update([      
                            'hr_id'=>$offline->hr_id,
                            'user_id'=>$offline->user_id,
                            'management_id'=>$offline->management_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'gender'=>$offline->gender,
                            'address'=> $offline->address,
                            'email' => $offline->email,
                            'birthday'=>$offline->birthday,
                            'role'=>$offline->role,
                            'image'=>$offline->image,
                            'status'=>$offline->status,
                            'added_by'=>$offline->added_by,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    
                    else{
                        DB::table('hr_account')->where('h_id', $offline_count[0]->h_id)->update([  
                            'hr_id'=>$offline_count[0]->hr_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'gender'=>$offline_count[0]->gender,
                            'address'=> $offline_count[0]->address,
                            'email' => $offline_count[0]->email,
                            'birthday'=>$offline_count[0]->birthday,
                            'role'=>$offline_count[0]->role,
                            'image'=>$offline_count[0]->image,
                            'status'=>$offline_count[0]->status,
                            'added_by'=>$offline_count[0]->added_by,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                     
                }else{
                    DB::connection('mysql2')->table('hr_account')->insert([    
                        'h_id'=>$offline->h_id,
                        'hr_id'=>$offline->hr_id,
                        'user_id'=>$offline->user_id,
                        'management_id'=>$offline->management_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'gender'=>$offline->gender,
                        'address'=> $offline->address,
                        'email' => $offline->email,
                        'birthday'=>$offline->birthday,
                        'role'=>$offline->role,
                        'image'=>$offline->image,
                        'status'=>$offline->status,
                        'added_by'=>$offline->added_by,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize hr_account table from online to offline 
        $online_query = DB::connection('mysql2')->table('hr_account')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('hr_account')->where('h_id', $online->h_id)->get();
                if(count($online_count) > 0){
                    DB::table('hr_account')->where('h_id', $online->h_id)->update([   
                        'hr_id'=>$online->hr_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'address'=> $online->address,
                        'email' => $online->email,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'added_by'=>$online->added_by,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('hr_account')->insert([ 
                        'h_id'=>$online->h_id,
                        'hr_id'=>$online->hr_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'address'=> $online->address,
                        'email' => $online->email,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'added_by'=>$online->added_by,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncImaging($data){ 
        // syncronize imaging table from offline to online  
        $imaging_offline_List = DB::table('imaging')->where('management_id', $data['management_id'])->get();  
        foreach($imaging_offline_List as $imaging_offline){  
            $imaging_offline_count = DB::connection('mysql2')->table('imaging')->where('i_id', $imaging_offline->i_id)->get();
                if(count($imaging_offline_count) > 0){ 
                    if($imaging_offline->updated_at > $imaging_offline_count[0]->updated_at){ 
                        DB::connection('mysql2')->table('imaging')->where('i_id', $imaging_offline->i_id)->update([      
                            'imaging_id'=> $imaging_offline->imaging_id,
                            'management_id'=> $imaging_offline->management_id,
                            'user_id'=> $imaging_offline->user_id,
                            'user_fullname'=> $imaging_offline->user_fullname,
                            'user_address'=> $imaging_offline->user_address,
                            'name'=> $imaging_offline->name,
                            'gender'=> $imaging_offline->gender,
                            'birthday'=> $imaging_offline->birthday,
                            'address'=> $imaging_offline->address,
                            'allow_virtual'=> $imaging_offline->allow_virtual,
                            'role'=> $imaging_offline->role,
                            'email'=> $imaging_offline->email,
                            'image'=> $imaging_offline->image,
                            'added_by'=> $imaging_offline->added_by,
                            'created_at'=> $imaging_offline->created_at,
                            'updated_at'=> $imaging_offline->updated_at
                        ]);  
                    } 
                    
                    else{
                        DB::table('imaging')->where('i_id', $imaging_offline_count[0]->i_id)->update([      
                            'imaging_id'=> $imaging_offline_count[0]->imaging_id,
                            'management_id'=> $imaging_offline_count[0]->management_id,
                            'user_id'=> $imaging_offline_count[0]->user_id,
                            'user_fullname'=> $imaging_offline_count[0]->user_fullname,
                            'user_address'=> $imaging_offline_count[0]->user_address,
                            'name'=> $imaging_offline_count[0]->name,
                            'gender'=> $imaging_offline_count[0]->gender,
                            'birthday'=> $imaging_offline_count[0]->birthday,
                            'address'=> $imaging_offline_count[0]->address,
                            'allow_virtual'=> $imaging_offline_count[0]->allow_virtual,
                            'role'=> $imaging_offline_count[0]->role,
                            'email'=> $imaging_offline_count[0]->email,
                            'image'=> $imaging_offline_count[0]->image,
                            'added_by'=> $imaging_offline_count[0]->added_by,
                            'created_at'=> $imaging_offline_count[0]->created_at,
                            'updated_at'=> $imaging_offline_count[0]->updated_at
                        ]);
                    } 
                }
                
                else{ 
                    DB::connection('mysql2')->table('imaging')->insert([    
                        'i_id'=> $imaging_offline->i_id,
                        'imaging_id'=> $imaging_offline->imaging_id,
                        'management_id'=> $imaging_offline->management_id,
                        'user_id'=> $imaging_offline->user_id,
                        'user_fullname'=> $imaging_offline->user_fullname,
                        'user_address'=> $imaging_offline->user_address,
                        'name'=> $imaging_offline->name,
                        'gender'=> $imaging_offline->gender,
                        'birthday'=> $imaging_offline->birthday,
                        'address'=> $imaging_offline->address,
                        'allow_virtual'=> $imaging_offline->allow_virtual,
                        'role'=> $imaging_offline->role,
                        'email'=> $imaging_offline->email,
                        'image'=> $imaging_offline->image,
                        'added_by'=> $imaging_offline->added_by,
                        'created_at'=> $imaging_offline->created_at,
                        'updated_at'=> $imaging_offline->updated_at
                    ]);  
                } 
        } 
     
        // syncronize imaging table from online to offline 
        $imaging_online_List = DB::connection('mysql2')->table('imaging')->where('management_id', $data['management_id'])->get();  
        foreach($imaging_online_List as $imaging_online){  
            $imaging_online_count = DB::table('imaging')->where('i_id', $imaging_online->i_id)->get();
                if(count($imaging_online_count) > 0){
                    DB::table('imaging')->where('i_id', $imaging_online->i_id)->update([  
                        'imaging_id'=> $imaging_online->imaging_id,
                        'management_id'=> $imaging_online->management_id,
                        'user_id'=> $imaging_online->user_id,
                        'user_fullname'=> $imaging_online->user_fullname,
                        'user_address'=> $imaging_online->user_address,
                        'name'=> $imaging_online->name,
                        'gender'=> $imaging_online->gender,
                        'birthday'=> $imaging_online->birthday,
                        'address'=> $imaging_online->address,
                        'allow_virtual'=> $imaging_online->allow_virtual,
                        'role'=> $imaging_online->role,
                        'email'=> $imaging_online->email,
                        'image'=> $imaging_online->image,
                        'added_by'=> $imaging_online->added_by,
                        'created_at'=> $imaging_online->created_at,
                        'updated_at'=> $imaging_online->updated_at
                    ]); 
                }else{
                    DB::table('imaging')->insert([    
                        'i_id'=> $imaging_online->i_id,
                        'imaging_id'=> $imaging_online->imaging_id,
                        'management_id'=> $imaging_online->management_id,
                        'user_id'=> $imaging_online->user_id,
                        'user_fullname'=> $imaging_online->user_fullname,
                        'user_address'=> $imaging_online->user_address,
                        'name'=> $imaging_online->name,
                        'gender'=> $imaging_online->gender,
                        'birthday'=> $imaging_online->birthday,
                        'address'=> $imaging_online->address,
                        'allow_virtual'=> $imaging_online->allow_virtual,
                        'role'=> $imaging_online->role,
                        'email'=> $imaging_online->email,
                        'image'=> $imaging_online->image,
                        'added_by'=> $imaging_online->added_by,
                        'created_at'=> $imaging_online->created_at,
                        'updated_at'=> $imaging_online->updated_at
                    ]); 
                } 
        } 
        
        return true;
    }

    public static function syncImagingCenter(){
        // syncronize imaging_center table from offline to online  
        $offline_query = DB::table('imaging_center')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('imaging_center')->where('imaging_center_id', $offline->imaging_center_id)->get();
                if(count($offline_count) > 0){  
                    if($offline->updated_at > $offline_count[0]->updated_at){ 
                        DB::connection('mysql2')->table('imaging_center')->where('imaging_center_id', $offline->imaging_center_id)->update([      
                            'patients_id'=>$offline->patients_id,
                            'doctors_id'=>$offline->doctors_id,
                            'trace_number'=>$offline->trace_number,
                            'ward_nurse_id'=>$offline->ward_nurse_id,
                            'case_file'=>$offline->case_file,
                            'radiologist'=>$offline->radiologist,
                            'radiologist_type'=>$offline->radiologist_type,
                            'request_ward'=>$offline->request_ward,
                            'request_doctor'=>$offline->request_doctor,
                            'charge_slip'=>$offline->charge_slip,
                            'additional_charge_slip'=>$offline->additional_charge_slip,
                            'number_shots'=>$offline->number_shots,
                            'additional_number_shots'=>$offline->additional_number_shots, 
                            'imaging_order'=>$offline->imaging_order,
                            'imaging_remarks'=>$offline->imaging_remarks,
                            'imaging_center'=>$offline->imaging_center,
                            'imaging_result'=>$offline->imaging_result,
                            'imaging_result_screenshot'=>$offline->imaging_result_screenshot,
                            'imaging_results_remarks'=>$offline->imaging_results_remarks,
                            'imaging_result_attachment'=>$offline->imaging_result_attachment,
                            'stitch_order_request'=>$offline->stitch_order_request,
                            'stitch_reason_request'=>$offline->stitch_reason_request,
                            'stitch_result_attachment'=>$offline->stitch_result_attachment, 
                            'is_viewed'=>$offline->is_viewed, 
                            'is_processed'=>$offline->is_processed,
                            'processed_by'=>$offline->processed_by,  
                            'start_time'=>$offline->start_time,
                            'end_time'=>$offline->end_time,
                            'is_pending'=>$offline->is_pending,
                            'pending_reason'=>$offline->pending_reason,
                            'pending_date'=>$offline->pending_date,
                            'pending_by'=>$offline->pending_by,
                            'referring_physician' => $offline->referring_physician,
                            'file_no' => $offline->file_no,
                            'clinical_data' => $offline->clinical_data,
                            'print_category' => $offline->print_category,
                            'template_name' => $offline->template_name,
                            'manage_by'=>$offline->manage_by, 
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'edit_by_encoder'=>$offline->edit_by_encoder,
                            'order_from'=>$offline->order_from, 
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);  
                    } 
                    
                    else{
                        DB::table('imaging_center')->where('imaging_center_id', $offline_count[0]->imaging_center_id)->update([   
                            'patients_id'=>$offline_count[0]->patients_id,
                            'doctors_id'=>$offline_count[0]->doctors_id,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id,
                            'case_file'=>$offline_count[0]->case_file,
                            'radiologist'=>$offline_count[0]->radiologist,
                            'radiologist_type'=>$offline_count[0]->radiologist_type,
                            'request_ward'=>$offline_count[0]->request_ward,
                            'request_doctor'=>$offline_count[0]->request_doctor,
                            'charge_slip'=>$offline_count[0]->charge_slip,
                            'additional_charge_slip'=>$offline_count[0]->additional_charge_slip,
                            'number_shots'=>$offline_count[0]->number_shots,
                            'additional_number_shots'=>$offline_count[0]->additional_number_shots, 
                            'imaging_order'=>$offline_count[0]->imaging_order,
                            'imaging_remarks'=>$offline_count[0]->imaging_remarks,
                            'imaging_center'=>$offline_count[0]->imaging_center,
                            'imaging_result'=>$offline_count[0]->imaging_result,
                            'imaging_result_screenshot'=>$offline_count[0]->imaging_result_screenshot,
                            'imaging_results_remarks'=>$offline_count[0]->imaging_results_remarks,
                            'imaging_result_attachment'=>$offline_count[0]->imaging_result_attachment,
                            'stitch_order_request'=>$offline_count[0]->stitch_order_request,
                            'stitch_reason_request'=>$offline_count[0]->stitch_reason_request,
                            'stitch_result_attachment'=>$offline_count[0]->stitch_result_attachment, 
                            'is_viewed'=>$offline_count[0]->is_viewed, 
                            'is_processed'=>$offline_count[0]->is_processed,
                            'processed_by'=>$offline_count[0]->processed_by,  
                            'start_time'=>$offline_count[0]->start_time,
                            'end_time'=>$offline_count[0]->end_time,
                            'is_pending'=>$offline_count[0]->is_pending,
                            'pending_reason'=>$offline_count[0]->pending_reason,
                            'pending_date'=>$offline_count[0]->pending_date,
                            'pending_by'=>$offline_count[0]->pending_by,
                            'referring_physician' => $offline_count[0]->referring_physician,
                            'file_no' => $offline_count[0]->file_no,
                            'clinical_data' => $offline_count[0]->clinical_data,
                            'print_category' => $offline_count[0]->print_category,
                            'template_name' => $offline_count[0]->template_name,
                            'manage_by'=>$offline_count[0]->manage_by, 
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'edit_by_encoder'=>$offline_count[0]->edit_by_encoder,
                            'order_from'=>$offline_count[0]->order_from, 
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    } 
                }
                
                else{ 
                    DB::connection('mysql2')->table('imaging_center')->insert([    
                        'imaging_center_id'=>$offline->imaging_center_id,
                        'patients_id'=>$offline->patients_id,
                        'doctors_id'=>$offline->doctors_id,
                        'trace_number'=>$offline->trace_number,
                        'ward_nurse_id'=>$offline->ward_nurse_id,
                        'case_file'=>$offline->case_file,
                        'radiologist'=>$offline->radiologist,
                        'radiologist_type'=>$offline->radiologist_type,
                        'request_ward'=>$offline->request_ward,
                        'request_doctor'=>$offline->request_doctor,
                        'charge_slip'=>$offline->charge_slip,
                        'additional_charge_slip'=>$offline->additional_charge_slip,
                        'number_shots'=>$offline->number_shots,
                        'additional_number_shots'=>$offline->additional_number_shots, 
                        'imaging_order'=>$offline->imaging_order,
                        'imaging_remarks'=>$offline->imaging_remarks,
                        'imaging_center'=>$offline->imaging_center,
                        'imaging_result'=>$offline->imaging_result,
                        'imaging_result_screenshot'=>$offline->imaging_result_screenshot,
                        'imaging_results_remarks'=>$offline->imaging_results_remarks,
                        'imaging_result_attachment'=>$offline->imaging_result_attachment,
                        'stitch_order_request'=>$offline->stitch_order_request,
                        'stitch_reason_request'=>$offline->stitch_reason_request,
                        'stitch_result_attachment'=>$offline->stitch_result_attachment, 
                        'is_viewed'=>$offline->is_viewed, 
                        'is_processed'=>$offline->is_processed,
                        'processed_by'=>$offline->processed_by,  
                        'start_time'=>$offline->start_time,
                        'end_time'=>$offline->end_time,
                        'is_pending'=>$offline->is_pending,
                        'pending_reason'=>$offline->pending_reason,
                        'pending_date'=>$offline->pending_date,
                        'pending_by'=>$offline->pending_by,
                        'referring_physician' => $offline->referring_physician,
                        'file_no' => $offline->file_no,
                        'clinical_data' => $offline->clinical_data,
                        'print_category' => $offline->print_category,
                        'template_name' => $offline->template_name,
                        'manage_by'=>$offline->manage_by, 
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'edit_by_encoder'=>$offline->edit_by_encoder,
                        'order_from'=>$offline->order_from, 
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);  
                } 
        } 
     
        // syncronize imaging_center table from online to offline 
        $online_query = DB::connection('mysql2')->table('imaging_center')->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('imaging_center')->where('imaging_center_id', $online->imaging_center_id)->get();
                if(count($online_count) > 0){
                    DB::table('imaging_center')->where('imaging_center_id', $online->imaging_center_id)->update([  
                        'patients_id'=>$online->patients_id,
                        'doctors_id'=>$online->doctors_id,
                        'trace_number'=>$online->trace_number,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'radiologist'=>$online->radiologist,
                        'radiologist_type'=>$online->radiologist_type,
                        'request_ward'=>$online->request_ward,
                        'request_doctor'=>$online->request_doctor,
                        'charge_slip'=>$online->charge_slip,
                        'additional_charge_slip'=>$online->additional_charge_slip,
                        'number_shots'=>$online->number_shots,
                        'additional_number_shots'=>$online->additional_number_shots, 
                        'imaging_order'=>$online->imaging_order,
                        'imaging_remarks'=>$online->imaging_remarks,
                        'imaging_center'=>$online->imaging_center,
                        'imaging_result'=>$online->imaging_result,
                        'imaging_result_screenshot'=>$online->imaging_result_screenshot,
                        'imaging_results_remarks'=>$online->imaging_results_remarks,
                        'imaging_result_attachment'=>$online->imaging_result_attachment,
                        'stitch_order_request'=>$online->stitch_order_request,
                        'stitch_reason_request'=>$online->stitch_reason_request,
                        'stitch_result_attachment'=>$online->stitch_result_attachment, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed,
                        'processed_by'=>$online->processed_by,  
                        'start_time'=>$online->start_time,
                        'end_time'=>$online->end_time,
                        'is_pending'=>$online->is_pending,
                        'pending_reason'=>$online->pending_reason,
                        'pending_date'=>$online->pending_date,
                        'pending_by'=>$online->pending_by,
                        'referring_physician' => $online->referring_physician,
                        'file_no' => $online->file_no,
                        'clinical_data' => $online->clinical_data,
                        'print_category' => $online->print_category,
                        'template_name' => $online->template_name,
                        'manage_by'=>$online->manage_by, 
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'edit_by_encoder'=>$online->edit_by_encoder,
                        'order_from'=>$online->order_from, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('imaging_center')->insert([    
                        'imaging_center_id'=>$online->imaging_center_id,
                        'patients_id'=>$online->patients_id,
                        'doctors_id'=>$online->doctors_id,
                        'trace_number'=>$online->trace_number,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'radiologist'=>$online->radiologist,
                        'radiologist_type'=>$online->radiologist_type,
                        'request_ward'=>$online->request_ward,
                        'request_doctor'=>$online->request_doctor,
                        'charge_slip'=>$online->charge_slip,
                        'additional_charge_slip'=>$online->additional_charge_slip,
                        'number_shots'=>$online->number_shots,
                        'additional_number_shots'=>$online->additional_number_shots, 
                        'imaging_order'=>$online->imaging_order,
                        'imaging_remarks'=>$online->imaging_remarks,
                        'imaging_center'=>$online->imaging_center,
                        'imaging_result'=>$online->imaging_result,
                        'imaging_result_screenshot'=>$online->imaging_result_screenshot,
                        'imaging_results_remarks'=>$online->imaging_results_remarks,
                        'imaging_result_attachment'=>$online->imaging_result_attachment,
                        'stitch_order_request'=>$online->stitch_order_request,
                        'stitch_reason_request'=>$online->stitch_reason_request,
                        'stitch_result_attachment'=>$online->stitch_result_attachment, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed,
                        'processed_by'=>$online->processed_by,  
                        'start_time'=>$online->start_time,
                        'end_time'=>$online->end_time,
                        'is_pending'=>$online->is_pending,
                        'pending_reason'=>$online->pending_reason,
                        'pending_date'=>$online->pending_date,
                        'pending_by'=>$online->pending_by,
                        'referring_physician' => $online->referring_physician,
                        'file_no' => $online->file_no,
                        'clinical_data' => $online->clinical_data,
                        'print_category' => $online->print_category,
                        'template_name' => $online->template_name,
                        'manage_by'=>$online->manage_by, 
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'edit_by_encoder'=>$online->edit_by_encoder,
                        'order_from'=>$online->order_from, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        } 
        
        return true;
    }

    public static function syncImagingCenterRecord(){ 
        // syncronize imaging_center_record table from offline to online  
        $offline_query = DB::table('imaging_center_record')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('imaging_center_record')->where('transaction_id', $offline->transaction_id)->get();
                if(count($offline_count) > 0){  
                    if($offline->updated_at > $offline_count[0]->updated_at){ 
                        DB::connection('mysql2')->table('imaging_center_record')->where('transaction_id', $offline->transaction_id)->update([      
                            'patients_id'=>$offline->patients_id,
                            'case_file'=>$offline->case_file,
                            'imaging_order'=>$offline->imaging_order,
                            'processed_by'=>$offline->processed_by,
                            'order_type'=>$offline->order_type,
                            'amount'=>$offline->amount,
                            'record_from'=>$offline->record_from,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);  
                    } 
                    
                    else{
                        DB::table('imaging_center_record')->where('transaction_id', $offline_count[0]->transaction_id)->update([   
                            'patients_id'=>$offline_count[0]->patients_id,
                            'case_file'=>$offline_count[0]->case_file,
                            'imaging_order'=>$offline_count[0]->imaging_order,
                            'processed_by'=>$offline_count[0]->processed_by,
                            'order_type'=>$offline_count[0]->order_type,
                            'amount'=>$offline_count[0]->amount,
                            'record_from'=>$offline_count[0]->record_from,
                            'created_at'=>$offline_count[0]->created_at, 
                            'updated_at'=>$offline_count[0]->updated_at 
                        ]);
                    } 
                }
                
                else{ 
                    DB::connection('mysql2')->table('imaging_center_record')->insert([    
                        'transaction_id'=>$offline->transaction_id,
                        'patients_id'=>$offline->patients_id,
                        'case_file'=>$offline->case_file,
                        'imaging_order'=>$offline->imaging_order,
                        'processed_by'=>$offline->processed_by,
                        'order_type'=>$offline->order_type,
                        'amount'=>$offline->amount,
                        'record_from'=>$offline->record_from,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at 
                    ]);  
                } 
        } 
     
        // syncronize imaging_center_record table from online to offline 
        $online_query = DB::connection('mysql2')->table('imaging_center_record')->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('imaging_center_record')->where('transaction_id', $online->transaction_id)->get();
                if(count($online_count) > 0){
                    DB::table('imaging_center_record')->where('transaction_id', $online->transaction_id)->update([       
                        'patients_id'=>$online->patients_id,
                        'case_file'=>$online->case_file,
                        'imaging_order'=>$online->imaging_order,
                        'processed_by'=>$online->processed_by,
                        'order_type'=>$online->order_type,
                        'amount'=>$online->amount,
                        'record_from'=>$online->record_from,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at 
                    ]); 
                }else{
                    DB::table('imaging_center_record')->insert([    
                        'transaction_id'=>$online->transaction_id,
                        'patients_id'=>$online->patients_id,
                        'case_file'=>$online->case_file,
                        'imaging_order'=>$online->imaging_order,
                        'processed_by'=>$online->processed_by,
                        'order_type'=>$online->order_type,
                        'amount'=>$online->amount,
                        'record_from'=>$online->record_from,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at 
                    ]); 
                } 
        } 
        
        return true;
    }

    public static function syncImagingFormHeader($data){ 
        // syncronize imaging_formheader table from offline to online  
        $offline_query = DB::table('imaging_formheader')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('imaging_formheader')->where('ifh_id', $offline->ifh_id)->get();
            if(count($offline_count) > 0){  
                if($offline->updated_at > $offline_count[0]->updated_at){ 
                    DB::connection('mysql2')->table('imaging_formheader')->where('ifh_id', $offline->ifh_id)->update([      
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'name'=>$offline->name,
                        'address'=>$offline->address,
                        'contact_number'=>$offline->contact_number,
                        'radiologist'=>$offline->radiologist,
                        'title'=>$offline->title,
                        'radiologist_lcn'=>$offline->radiologist_lcn,
                        'radiologist_signature'=>$offline->radiologist_signature,
                        'logo'=>$offline->logo,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);  
                } 
                
                else{
                    DB::table('imaging_formheader')->where('ifh_id', $offline_count[0]->ifh_id)->update([   
                        'management_id'=>$offline_count[0]->management_id,
                        'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                        'name'=>$offline_count[0]->name,
                        'address'=>$offline_count[0]->address,
                        'contact_number'=>$offline_count[0]->contact_number,
                        'radiologist'=>$offline_count[0]->radiologist,
                        'title'=>$offline_count[0]->title,
                        'radiologist_lcn'=>$offline_count[0]->radiologist_lcn,
                        'radiologist_signature'=>$offline_count[0]->radiologist_signature,
                        'logo'=>$offline_count[0]->logo,
                        'status'=>$offline_count[0]->status,
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);
                } 
            }
            
            else{ 
                DB::connection('mysql2')->table('imaging_formheader')->insert([    
                    'ifh_id'=>$offline->ifh_id,
                    'management_id'=>$offline->management_id,
                    'main_mgmt_id'=>$offline->main_mgmt_id,
                    'name'=>$offline->name,
                    'address'=>$offline->address,
                    'contact_number'=>$offline->contact_number,
                    'radiologist'=>$offline->radiologist,
                    'title'=>$offline->title,
                    'radiologist_lcn'=>$offline->radiologist_lcn,
                    'radiologist_signature'=>$offline->radiologist_signature,
                    'logo'=>$offline->logo,
                    'status'=>$offline->status,
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at
                ]);  
            } 
        } 
     
        // syncronize imaging_formheader table from online to offline 
        $online_query = DB::connection('mysql2')->table('imaging_formheader')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('imaging_formheader')->where('ifh_id', $online->ifh_id)->get();
            if(count($online_count) > 0){
                DB::table('imaging_formheader')->where('ifh_id', $online->ifh_id)->update([     
                    'management_id'=>$online->management_id,
                    'main_mgmt_id'=>$online->main_mgmt_id,
                    'name'=>$online->name,
                    'address'=>$online->address,
                    'contact_number'=>$online->contact_number,
                    'radiologist'=>$online->radiologist,
                    'title'=>$online->title,
                    'radiologist_lcn'=>$online->radiologist_lcn,
                    'radiologist_signature'=>$online->radiologist_signature,
                    'logo'=>$online->logo,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            }else{
                DB::table('imaging_formheader')->insert([    
                    'ifh_id'=>$online->ifh_id,
                    'management_id'=>$online->management_id,
                    'main_mgmt_id'=>$online->main_mgmt_id,
                    'name'=>$online->name,
                    'address'=>$online->address,
                    'contact_number'=>$online->contact_number,
                    'radiologist'=>$online->radiologist,
                    'title'=>$online->title,
                    'radiologist_lcn'=>$online->radiologist_lcn,
                    'radiologist_signature'=>$online->radiologist_signature,
                    'logo'=>$online->logo,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            } 
        } 
        
        return true;
    }

    public static function syncImagingOrderMenu($data){ 
        // syncronize imaging_order_menu table from offline to online  
        $offline_query = DB::table('imaging_order_menu')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('imaging_order_menu')->where('order_id', $offline->order_id)->get();
            if(count($offline_count) > 0){  
                if($offline->updated_at > $offline_count[0]->updated_at){ 
                    DB::connection('mysql2')->table('imaging_order_menu')->where('order_id', $offline->order_id)->update([      
                        'management_id'=>$offline->management_id,
                        'order_desc'=>$offline->order_desc,
                        'type'=>$offline->type,
                        'order_cost'=>$offline->order_cost,
                        'order_shots'=>$offline->order_shots,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'create_at'=>$offline->create_at
                    ]);  
                } 
                
                else{
                    DB::table('imaging_order_menu')->where('order_id', $offline_count[0]->order_id)->update([   
                        'management_id'=>$offline_count[0]->management_id,
                        'order_desc'=>$offline_count[0]->order_desc,
                        'type'=>$offline_count[0]->type,
                        'order_cost'=>$offline_count[0]->order_cost,
                        'order_shots'=>$offline_count[0]->order_shots,
                        'status'=>$offline_count[0]->status,
                        'updated_at'=>$offline_count[0]->updated_at,
                        'create_at'=>$offline_count[0]->create_at
                    ]);
                } 
            }
            
            else{ 
                DB::connection('mysql2')->table('imaging_order_menu')->insert([    
                    'order_id'=>$offline->order_id,
                    'management_id'=>$offline->management_id,
                    'order_desc'=>$offline->order_desc,
                    'type'=>$offline->type,
                    'order_cost'=>$offline->order_cost,
                    'order_shots'=>$offline->order_shots,
                    'status'=>$offline->status,
                    'updated_at'=>$offline->updated_at,
                    'create_at'=>$offline->create_at
                ]);  
            } 
        } 
     
        // syncronize imaging_order_menu table from online to offline 
        $online_query = DB::connection('mysql2')->table('imaging_order_menu')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('imaging_order_menu')->where('order_id', $online->order_id)->get();
            if(count($online_count) > 0){
                DB::table('imaging_order_menu')->where('order_id', $online->order_id)->update([       
                    'management_id'=>$online->management_id,
                    'order_desc'=>$online->order_desc,
                    'type'=>$online->type,
                    'order_cost'=>$online->order_cost,
                    'order_shots'=>$online->order_shots,
                    'status'=>$online->status,
                    'updated_at'=>$online->updated_at,
                    'create_at'=>$online->create_at
                ]); 
            }else{
                DB::table('imaging_order_menu')->insert([    
                    'order_id'=>$online->order_id,
                    'management_id'=>$online->management_id,
                    'order_desc'=>$online->order_desc,
                    'type'=>$online->type,
                    'order_cost'=>$online->order_cost,
                    'order_shots'=>$online->order_shots,
                    'status'=>$online->status,
                    'updated_at'=>$online->updated_at,
                    'create_at'=>$online->create_at
                ]); 
            } 
        } 
        
        return true;
    }

    public static function syncLaboratory(){ 
        // syncronize laboratory table from offline to online  
        $offline_query = DB::table('laboratory')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory')->where('lab_id', $offline->lab_id)->get();
                if(count($offline_count) > 0){  
                    if($offline->updated_at > $offline_count[0]->updated_at){ 
                        DB::connection('mysql2')->table('laboratory')->where('lab_id', $offline->lab_id)->update([      
                            'laboratory_id'=>$offline->laboratory_id,
                            'patients_id'=>$offline->patients_id,
                            'doctors_id'=>$offline->doctors_id,
                            'ward_nurse_id'=>$offline->ward_nurse_id,
                            'case_file'=>$offline->case_file,
                            'doctors_remarks'=>$offline->doctors_remarks,
                            'laboratory_orders'=>$offline->laboratory_orders,
                            'laboratory_results'=>$offline->laboratory_results,
                            'laboratory_result_image'=>$offline->laboratory_result_image,
                            'laboratory_remarks'=>$offline->laboratory_remarks,
                            'laboratory_attachment'=>$offline->laboratory_attachment,
                            'is_viewed'=>$offline->is_viewed,
                            'is_processed'=>$offline->is_processed,
                            'processed_by'=>$offline->processed_by,
                            'start_time'=>$offline->start_time,
                            'time_end'=>$offline->time_end,
                            'is_pending'=>$offline->is_pending,
                            'pending_reason'=>$offline->pending_reason,
                            'pending_date'=>$offline->pending_date,
                            'pending_by'=>$offline->pending_by,
                            'order_from'=>$offline->order_from,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);  
                    } 
                    
                    else{
                        DB::table('laboratory')->where('lab_id', $offline_count[0]->lab_id)->update([   
                            'laboratory_id'=>$offline_count[0]->laboratory_id,
                            'patients_id'=>$offline_count[0]->patients_id,
                            'doctors_id'=>$offline_count[0]->doctors_id,
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id,
                            'case_file'=>$offline_count[0]->case_file,
                            'doctors_remarks'=>$offline_count[0]->doctors_remarks,
                            'laboratory_orders'=>$offline_count[0]->laboratory_orders,
                            'laboratory_results'=>$offline_count[0]->laboratory_results,
                            'laboratory_result_image'=>$offline_count[0]->laboratory_result_image,
                            'laboratory_remarks'=>$offline_count[0]->laboratory_remarks,
                            'laboratory_attachment'=>$offline_count[0]->laboratory_attachment,
                            'is_viewed'=>$offline_count[0]->is_viewed,
                            'is_processed'=>$offline_count[0]->is_processed,
                            'processed_by'=>$offline_count[0]->processed_by,
                            'start_time'=>$offline_count[0]->start_time,
                            'time_end'=>$offline_count[0]->time_end,
                            'is_pending'=>$offline_count[0]->is_pending,
                            'pending_reason'=>$offline_count[0]->pending_reason,
                            'pending_date'=>$offline_count[0]->pending_date,
                            'pending_by'=>$offline_count[0]->pending_by,
                            'order_from'=>$offline_count[0]->order_from,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    } 
                }
                
                else{ 
                    DB::connection('mysql2')->table('laboratory')->insert([    
                        'lab_id'=>$offline->lab_id,
                        'laboratory_id'=>$offline->laboratory_id,
                        'patients_id'=>$offline->patients_id,
                        'doctors_id'=>$offline->doctors_id,
                        'ward_nurse_id'=>$offline->ward_nurse_id,
                        'case_file'=>$offline->case_file,
                        'doctors_remarks'=>$offline->doctors_remarks,
                        'laboratory_orders'=>$offline->laboratory_orders,
                        'laboratory_results'=>$offline->laboratory_results,
                        'laboratory_result_image'=>$offline->laboratory_result_image,
                        'laboratory_remarks'=>$offline->laboratory_remarks,
                        'laboratory_attachment'=>$offline->laboratory_attachment,
                        'is_viewed'=>$offline->is_viewed,
                        'is_processed'=>$offline->is_processed,
                        'processed_by'=>$offline->processed_by,
                        'start_time'=>$offline->start_time,
                        'time_end'=>$offline->time_end,
                        'is_pending'=>$offline->is_pending,
                        'pending_reason'=>$offline->pending_reason,
                        'pending_date'=>$offline->pending_date,
                        'pending_by'=>$offline->pending_by,
                        'order_from'=>$offline->order_from,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);  
                } 
        } 
     
        // syncronize laboratory table from online to offline 
        $online_query = DB::connection('mysql2')->table('laboratory')->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('laboratory')->where('lab_id', $online->lab_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory')->where('lab_id', $online->lab_id)->update([    
                        'laboratory_id'=>$online->laboratory_id,
                        'patients_id'=>$online->patients_id,
                        'doctors_id'=>$online->doctors_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'doctors_remarks'=>$online->doctors_remarks,
                        'laboratory_orders'=>$online->laboratory_orders,
                        'laboratory_results'=>$online->laboratory_results,
                        'laboratory_result_image'=>$online->laboratory_result_image,
                        'laboratory_remarks'=>$online->laboratory_remarks,
                        'laboratory_attachment'=>$online->laboratory_attachment,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'processed_by'=>$online->processed_by,
                        'start_time'=>$online->start_time,
                        'time_end'=>$online->time_end,
                        'is_pending'=>$online->is_pending,
                        'pending_reason'=>$online->pending_reason,
                        'pending_date'=>$online->pending_date,
                        'pending_by'=>$online->pending_by,
                        'order_from'=>$online->order_from,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('laboratory')->insert([    
                        'lab_id'=>$online->lab_id,
                        'laboratory_id'=>$online->laboratory_id,
                        'patients_id'=>$online->patients_id,
                        'doctors_id'=>$online->doctors_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'doctors_remarks'=>$online->doctors_remarks,
                        'laboratory_orders'=>$online->laboratory_orders,
                        'laboratory_results'=>$online->laboratory_results,
                        'laboratory_result_image'=>$online->laboratory_result_image,
                        'laboratory_remarks'=>$online->laboratory_remarks,
                        'laboratory_attachment'=>$online->laboratory_attachment,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'processed_by'=>$online->processed_by,
                        'start_time'=>$online->start_time,
                        'time_end'=>$online->time_end,
                        'is_pending'=>$online->is_pending,
                        'pending_reason'=>$online->pending_reason,
                        'pending_date'=>$online->pending_date,
                        'pending_by'=>$online->pending_by,
                        'order_from'=>$online->order_from,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        } 
        
        return true;
    }

    public static function syncLaboratoryCBC(){
        // syncronize laboratory_cbc table from offline to online  
        $offline_query = DB::table('laboratory_cbc')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_cbc')->where('lc_id', $offline->lc_id)->get();
                if(count($offline_count) > 0){  
                    if($offline->updated_at > $offline_count[0]->updated_at){ 
                        DB::connection('mysql2')->table('laboratory_cbc')->where('lc_id', $offline->lc_id)->update([      
                            'order_id'=>$offline->order_id,
                            'doctor_id'=>$offline->doctor_id,
                            'patient_id'=>$offline->patient_id,
                            'laboratory_id'=>$offline->laboratory_id,
                            'ward_nurse_id'=>$offline->ward_nurse_id,
                            'case_file'=>$offline->case_file,
                            'is_viewed'=>$offline->is_viewed,
                            'is_processed'=>$offline->is_processed,
                            'is_processed_by'=>$offline->is_processed_by,
                            'is_processed_time_start'=>$offline->is_processed_time_start,
                            'is_processed_time_end'=>$offline->is_processed_time_end,
                            'is_pending'=>$offline->is_pending,
                            'is_pending_reason'=>$offline->is_pending_reason,
                            'is_pending_date'=>$offline->is_pending_date,
                            'is_pending_by'=>$offline->is_pending_by,
                            'cbc'=>$offline->cbc,
                            'cbc_platelet'=>$offline->cbc_platelet,
                            'wbc'=>$offline->wbc,
                            'lym'=>$offline->lym,
                            'mid'=>$offline->mid,
                            'neut'=>$offline->neut,
                            'rbc'=>$offline->rbc,
                            'hgb'=>$offline->hgb,
                            'hct'=>$offline->hct,
                            'mcv'=>$offline->mcv,
                            'mch'=>$offline->mch,
                            'mchc'=>$offline->mchc,
                            'rdw_sd'=>$offline->rdw_sd,
                            'rdw_cv'=>$offline->rdw_cv,
                            'mpv'=>$offline->mpv,
                            'pdw'=>$offline->pdw,
                            'pct'=>$offline->pct,
                            'plt'=>$offline->plt,
                            'p_lcr'=>$offline->p_lcr,

                            'monocytes'=>$offline->monocytes,
                            'eosinophils'=>$offline->eosinophils,
                            'basophils'=>$offline->basophils,
                            'reticulocyte'=>$offline->reticulocyte,
                            'esr_male'=>$offline->esr_male,
                            'esr_female'=>$offline->esr_female,
                            'clotting_time'=>$offline->clotting_time,
                            'bleeding_time'=>$offline->bleeding_time,
                            'blood_type'=>$offline->blood_type,

                            'remarks'=>$offline->remarks,
                            'order_status'=>$offline->order_status,
                            'medtech'=>$offline->medtech,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);  
                    } 
                    
                    else{
                        DB::table('laboratory_cbc')->where('lc_id', $offline_count[0]->lc_id)->update([   
                            'order_id'=>$offline_count[0]->order_id,
                            'doctor_id'=>$offline_count[0]->doctor_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'laboratory_id'=>$offline_count[0]->laboratory_id,
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id,
                            'case_file'=>$offline_count[0]->case_file,
                            'is_viewed'=>$offline_count[0]->is_viewed,
                            'is_processed'=>$offline_count[0]->is_processed,
                            'is_processed_by'=>$offline_count[0]->is_processed_by,
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start,
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end,
                            'is_pending'=>$offline_count[0]->is_pending,
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason,
                            'is_pending_date'=>$offline_count[0]->is_pending_date,
                            'is_pending_by'=>$offline_count[0]->is_pending_by,
                            'cbc'=>$offline_count[0]->cbc,
                            'cbc_platelet'=>$offline_count[0]->cbc_platelet,
                            'wbc'=>$offline_count[0]->wbc,
                            'lym'=>$offline_count[0]->lym,
                            'mid'=>$offline_count[0]->mid,
                            'neut'=>$offline_count[0]->neut,
                            'rbc'=>$offline_count[0]->rbc,
                            'hgb'=>$offline_count[0]->hgb,
                            'hct'=>$offline_count[0]->hct,
                            'mcv'=>$offline_count[0]->mcv,
                            'mch'=>$offline_count[0]->mch,
                            'mchc'=>$offline_count[0]->mchc,
                            'rdw_sd'=>$offline_count[0]->rdw_sd,
                            'rdw_cv'=>$offline_count[0]->rdw_cv,
                            'mpv'=>$offline_count[0]->mpv,
                            'pdw'=>$offline_count[0]->pdw,
                            'pct'=>$offline_count[0]->pct,
                            'plt'=>$offline_count[0]->plt,
                            'p_lcr'=>$offline_count[0]->p_lcr,

                            'monocytes'=>$offline_count[0]->monocytes,
                            'eosinophils'=>$offline_count[0]->eosinophils,
                            'basophils'=>$offline_count[0]->basophils,
                            'reticulocyte'=>$offline_count[0]->reticulocyte,
                            'esr_male'=>$offline_count[0]->esr_male,
                            'esr_female'=>$offline_count[0]->esr_female,
                            'clotting_time'=>$offline_count[0]->clotting_time,
                            'bleeding_time'=>$offline_count[0]->bleeding_time,
                            'blood_type'=>$offline_count[0]->blood_type,

                            'remarks'=>$offline_count[0]->remarks,
                            'order_status'=>$offline_count[0]->order_status,
                            'medtech'=>$offline_count[0]->medtech,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    } 
                }
                
                else{ 
                    DB::connection('mysql2')->table('laboratory_cbc')->insert([    
                        'lc_id'=>$offline->lc_id,
                        'order_id'=>$offline->order_id,
                        'doctor_id'=>$offline->doctor_id,
                        'patient_id'=>$offline->patient_id,
                        'laboratory_id'=>$offline->laboratory_id,
                        'ward_nurse_id'=>$offline->ward_nurse_id,
                        'case_file'=>$offline->case_file,
                        'is_viewed'=>$offline->is_viewed,
                        'is_processed'=>$offline->is_processed,
                        'is_processed_by'=>$offline->is_processed_by,
                        'is_processed_time_start'=>$offline->is_processed_time_start,
                        'is_processed_time_end'=>$offline->is_processed_time_end,
                        'is_pending'=>$offline->is_pending,
                        'is_pending_reason'=>$offline->is_pending_reason,
                        'is_pending_date'=>$offline->is_pending_date,
                        'is_pending_by'=>$offline->is_pending_by,
                        'cbc'=>$offline->cbc,
                        'cbc_platelet'=>$offline->cbc_platelet,
                        'wbc'=>$offline->wbc,
                        'lym'=>$offline->lym,
                        'mid'=>$offline->mid,
                        'neut'=>$offline->neut,
                        'rbc'=>$offline->rbc,
                        'hgb'=>$offline->hgb,
                        'hct'=>$offline->hct,
                        'mcv'=>$offline->mcv,
                        'mch'=>$offline->mch,
                        'mchc'=>$offline->mchc,
                        'rdw_sd'=>$offline->rdw_sd,
                        'rdw_cv'=>$offline->rdw_cv,
                        'mpv'=>$offline->mpv,
                        'pdw'=>$offline->pdw,
                        'pct'=>$offline->pct,
                        'plt'=>$offline->plt,
                        'p_lcr'=>$offline->p_lcr,

                        'monocytes'=>$offline->monocytes,
                        'eosinophils'=>$offline->eosinophils,
                        'basophils'=>$offline->basophils,
                        'reticulocyte'=>$offline->reticulocyte,
                        'esr_male'=>$offline->esr_male,
                        'esr_female'=>$offline->esr_female,
                        'clotting_time'=>$offline->clotting_time,
                        'bleeding_time'=>$offline->bleeding_time,
                        'blood_type'=>$offline->blood_type,

                        'remarks'=>$offline->remarks,
                        'order_status'=>$offline->order_status,
                        'medtech'=>$offline->medtech,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);  
                } 
        } 

        // syncronize laboratory_cbc table from online to offline 
        $online_query = DB::connection('mysql2')->table('laboratory_cbc')->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('laboratory_cbc')->where('lc_id', $online->lc_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_cbc')->where('lc_id', $online->lc_id)->update([  
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'laboratory_id'=>$online->laboratory_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'cbc'=>$online->cbc,
                        'cbc_platelet'=>$online->cbc_platelet,
                        'wbc'=>$online->wbc,
                        'lym'=>$online->lym,
                        'mid'=>$online->mid,
                        'neut'=>$online->neut,
                        'rbc'=>$online->rbc,
                        'hgb'=>$online->hgb,
                        'hct'=>$online->hct,
                        'mcv'=>$online->mcv,
                        'mch'=>$online->mch,
                        'mchc'=>$online->mchc,
                        'rdw_sd'=>$online->rdw_sd,
                        'rdw_cv'=>$online->rdw_cv,
                        'mpv'=>$online->mpv,
                        'pdw'=>$online->pdw,
                        'pct'=>$online->pct,
                        'plt'=>$online->plt,
                        'p_lcr'=>$online->p_lcr,

                        'monocytes'=>$online->monocytes,
                        'eosinophils'=>$online->eosinophils,
                        'basophils'=>$online->basophils,
                        'reticulocyte'=>$online->reticulocyte,
                        'esr_male'=>$online->esr_male,
                        'esr_female'=>$online->esr_female,
                        'clotting_time'=>$online->clotting_time,
                        'bleeding_time'=>$online->bleeding_time,
                        'blood_type'=>$online->blood_type,

                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('laboratory_cbc')->insert([    
                        'lc_id'=>$online->lc_id,
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'laboratory_id'=>$online->laboratory_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'cbc'=>$online->cbc,
                        'cbc_platelet'=>$online->cbc_platelet,
                        'wbc'=>$online->wbc,
                        'lym'=>$online->lym,
                        'mid'=>$online->mid,
                        'neut'=>$online->neut,
                        'rbc'=>$online->rbc,
                        'hgb'=>$online->hgb,
                        'hct'=>$online->hct,
                        'mcv'=>$online->mcv,
                        'mch'=>$online->mch,
                        'mchc'=>$online->mchc,
                        'rdw_sd'=>$online->rdw_sd,
                        'rdw_cv'=>$online->rdw_cv,
                        'mpv'=>$online->mpv,
                        'pdw'=>$online->pdw,
                        'pct'=>$online->pct,
                        'plt'=>$online->plt,
                        'p_lcr'=>$online->p_lcr,

                        'monocytes'=>$online->monocytes,
                        'eosinophils'=>$online->eosinophils,
                        'basophils'=>$online->basophils,
                        'reticulocyte'=>$online->reticulocyte,
                        'esr_male'=>$online->esr_male,
                        'esr_female'=>$online->esr_female,
                        'clotting_time'=>$online->clotting_time,
                        'bleeding_time'=>$online->bleeding_time,
                        'blood_type'=>$online->blood_type,

                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        } 
        
        return true;
    }

    public static function syncLaboratoryChemistry(){
        // syncronize laboratory_chemistry table from offline to online
        $offline_query = DB::table('laboratory_chemistry')->get();
        foreach ($offline_query as $offline) {
            $offline_count = DB::connection('mysql2')->table('laboratory_chemistry')->where('lc_id', $offline->lc_id)->get();
            if (count($offline_count) > 0) {
                if ($offline->updated_at > $offline_count[0]->updated_at) {
                    DB::connection('mysql2')->table('laboratory_chemistry')->where('lc_id', $offline->lc_id)->update([
                        'order_id' => $offline->order_id,
                        'doctor_id' => $offline->doctor_id,
                        'patient_id' => $offline->patient_id,
                        'laboratory_id' => $offline->laboratory_id,
                        'ward_nurse_id' => $offline->ward_nurse_id,
                        'case_file' => $offline->case_file,
                        'is_viewed' => $offline->is_viewed,
                        'is_processed' => $offline->is_processed,
                        'is_processed_by' => $offline->is_processed_by,
                        'is_processed_time_start' => $offline->is_processed_time_start,
                        'is_processed_time_end' => $offline->is_processed_time_end,
                        'is_pending' => $offline->is_pending,
                        'is_pending_reason' => $offline->is_pending_reason,
                        'is_pending_date' => $offline->is_pending_date,
                        'is_pending_by' => $offline->is_pending_by,
                        'spicemen' => $offline->spicemen,
                        'glucose' => $offline->glucose,
                        'glucose_remarks' => $offline->glucose_remarks,
                        'fbs' => $offline->fbs,
                        'fbs_remarks' => $offline->fbs_remarks,
                        'creatinine' => $offline->creatinine,
                        'creatinine_remarks' => $offline->creatinine_remarks,
                        'uric_acid' => $offline->uric_acid,
                        'uric_acid_remarks' => $offline->uric_acid_remarks,
                        'cholesterol' => $offline->cholesterol,
                        'cholesterol_remarks' => $offline->cholesterol_remarks,
                        'triglyceride' => $offline->triglyceride,
                        'triglyceride_remarks' => $offline->triglyceride_remarks,
                        'hdl_cholesterol' => $offline->hdl_cholesterol,
                        'hdl_cholesterol_remarks' => $offline->hdl_cholesterol_remarks,
                        'ldl_cholesterol' => $offline->ldl_cholesterol,
                        'ldl_cholesterol_remarks' => $offline->ldl_cholesterol_remarks,
                        'sgot' => $offline->sgot,
                        'sgot_remarks' => $offline->sgot_remarks,
                        'sgpt' => $offline->sgpt,
                        'sgpt_remarks' => $offline->sgpt_remarks,
                        'bun' => $offline->bun,
                        'bun_remarks' => $offline->bun_remarks,
                        'soduim' => $offline->soduim,
                        'soduim_remarks' => $offline->soduim_remarks,
                        'potassium' => $offline->potassium,
                        'potassium_remarks' => $offline->potassium_remarks,
                        'hba1c' => $offline->hba1c,
                        'hba1c_remarks' => $offline->hba1c_remarks,
                        'alkaline_phosphatase' => $offline->alkaline_phosphatase,
                        'alkaline_phosphatase_remarks' => $offline->alkaline_phosphatase_remarks,
                        'albumin' => $offline->albumin,
                        'albumin_remarks' => $offline->albumin_remarks,
                        'calcium' => $offline->calcium,
                        'calcium_remarks' => $offline->calcium_remarks,
                        'magnesium' => $offline->magnesium,
                        'magnesium_remarks' => $offline->magnesium_remarks,
                        'chloride' => $offline->chloride,
                        'chloride_remarks' => $offline->chloride_remarks,
                        'serum_uric_acid' => $offline->serum_uric_acid,
                        'serum_uric_acid_remarks' => $offline->serum_uric_acid_remarks,
                        'lipid_profile' => $offline->lipid_profile,
                        'lipid_profile_remarks' => $offline->lipid_profile_remarks,
                        'ldh' => $offline->ldh,
                        'ldh_remarks' => $offline->ldh_remarks,
                        'tpag_ratio' => $offline->tpag_ratio,
                        'tpag_ratio_remarks' => $offline->tpag_ratio_remarks,
                        'bilirubin' => $offline->bilirubin,
                        'bilirubin_remarks' => $offline->bilirubin_remarks,
                        'total_protein' => $offline->total_protein,
                        'total_protein_remarks' => $offline->total_protein_remarks,
                        'potassium_kplus' => $offline->potassium_kplus,
                        'potassium_kplus_remarks' => $offline->potassium_kplus_remarks,
                        'na_plus_kplus' => $offline->na_plus_kplus,
                        'na_plus_kplus_remarks' => $offline->na_plus_kplus_remarks,
                        'ggt' => $offline->ggt,
                        'ggt_remarks' => $offline->ggt_remarks,
                        'cholinesterase' => $offline->cholinesterase,
                        'cholinesterase_remarks' => $offline->cholinesterase_remarks,
                        'phosphorous' => $offline->phosphorous,
                        'phosphorous_remarks' => $offline->phosphorous_remarks,
                        'rbs' => $offline->rbs,
                        'rbs_remarks' => $offline->rbs_remarks,
                        'vldl' => $offline->vldl,
                        'vldl_remarks' => $offline->vldl_remarks,
                        'rbc_cholinesterase' => $offline->rbc_cholinesterase,
                        'rbc_cholinesterase_remarks' => $offline->rbc_cholinesterase_remarks,
                        'crp' => $offline->crp,
                        'crp_remarks' => $offline->crp_remarks,
                        'pro_calcitonin' => $offline->pro_calcitonin,
                        'pro_calcitonin_crp_remarks' => $offline->pro_calcitonin_crp_remarks,
                        'ogct_take_one_50grm' => $offline->ogct_take_one_50grm,
                        'ogct_take_one_50grm_baseline' => $offline->ogct_take_one_50grm_baseline,
                        'ogct_take_one_50grm_first_hour' => $offline->ogct_take_one_50grm_first_hour,
                        'ogct_take_one_50grm_second_hour' => $offline->ogct_take_one_50grm_second_hour,
                        'ogct_take_one_75grm' => $offline->ogct_take_one_75grm,
                        'ogct_take_one_75grm_baseline' => $offline->ogct_take_one_75grm_baseline,
                        'ogct_take_one_75grm_first_hour' => $offline->ogct_take_one_75grm_first_hour,
                        'ogct_take_one_75grm_second_hour' => $offline->ogct_take_one_75grm_second_hour,
                        'ogct_take_two_100grm' => $offline->ogct_take_two_100grm,
                        'ogct_take_two_100grm_baseline' => $offline->ogct_take_two_100grm_baseline,
                        'ogct_take_two_100grm_first_hour' => $offline->ogct_take_two_100grm_first_hour,
                        'ogct_take_two_100grm_second_hour' => $offline->ogct_take_two_100grm_second_hour,
                        'ogct_take_two_75grm' => $offline->ogct_take_two_75grm,
                        'ogct_take_two_75grm_baseline' => $offline->ogct_take_two_75grm_baseline,
                        'ogct_take_two_75grm_first_hour' => $offline->ogct_take_two_75grm_first_hour,
                        'ogct_take_two_75grm_second_hour' => $offline->ogct_take_two_75grm_second_hour,
                        'ogct_take_three_100grm' => $offline->ogct_take_three_100grm,
                        'ogct_take_three_100grm_baseline' => $offline->ogct_take_three_100grm_baseline,
                        'ogct_take_three_100grm_first_hour' => $offline->ogct_take_three_100grm_first_hour,
                        'ogct_take_three_100grm_second_hour' => $offline->ogct_take_three_100grm_second_hour,
                        'ogct_take_four_100grm' => $offline->ogct_take_four_100grm,
                        'ogct_take_four_100grm_baseline' => $offline->ogct_take_four_100grm_baseline,
                        'ogct_take_four_100grm_first_hour' => $offline->ogct_take_four_100grm_first_hour,
                        'ogct_take_four_100grm_second_hour' => $offline->ogct_take_four_100grm_second_hour,
                        'remarks' => $offline->remarks,
                        'order_status' => $offline->order_status,
                        'medtech'=>$offline->medtech,
                        'trace_number' => $offline->trace_number,
                        'status' => $offline->status,
                        'created_at' => $offline->created_at,
                        'updated_at' => $offline->updated_at
                    ]);
                } else {
                    DB::table('laboratory_chemistry')->where('lc_id', $offline_count[0]->lc_id)->update([
                        'order_id' => $offline_count[0]->order_id,
                        'doctor_id' => $offline_count[0]->doctor_id,
                        'patient_id' => $offline_count[0]->patient_id,
                        'laboratory_id' => $offline_count[0]->laboratory_id,
                        'ward_nurse_id' => $offline_count[0]->ward_nurse_id,
                        'case_file' => $offline_count[0]->case_file,
                        'is_viewed' => $offline_count[0]->is_viewed,
                        'is_processed' => $offline_count[0]->is_processed,
                        'is_processed_by' => $offline_count[0]->is_processed_by,
                        'is_processed_time_start' => $offline_count[0]->is_processed_time_start,
                        'is_processed_time_end' => $offline_count[0]->is_processed_time_end,
                        'is_pending' => $offline_count[0]->is_pending,
                        'is_pending_reason' => $offline_count[0]->is_pending_reason,
                        'is_pending_date' => $offline_count[0]->is_pending_date,
                        'is_pending_by' => $offline_count[0]->is_pending_by,
                        'spicemen' => $offline_count[0]->spicemen,
                        'glucose' => $offline_count[0]->glucose,
                        'glucose_remarks' => $offline_count[0]->glucose_remarks,
                        'fbs' => $offline_count[0]->fbs,
                        'fbs_remarks' => $offline_count[0]->fbs_remarks,
                        'creatinine' => $offline_count[0]->creatinine,
                        'creatinine_remarks' => $offline_count[0]->creatinine_remarks,
                        'uric_acid' => $offline_count[0]->uric_acid,
                        'uric_acid_remarks' => $offline_count[0]->uric_acid_remarks,
                        'cholesterol' => $offline_count[0]->cholesterol,
                        'cholesterol_remarks' => $offline_count[0]->cholesterol_remarks,
                        'triglyceride' => $offline_count[0]->triglyceride,
                        'triglyceride_remarks' => $offline_count[0]->triglyceride_remarks,
                        'hdl_cholesterol' => $offline_count[0]->hdl_cholesterol,
                        'hdl_cholesterol_remarks' => $offline_count[0]->hdl_cholesterol_remarks,
                        'ldl_cholesterol' => $offline_count[0]->ldl_cholesterol,
                        'ldl_cholesterol_remarks' => $offline_count[0]->ldl_cholesterol_remarks,
                        'sgot' => $offline_count[0]->sgot,
                        'sgot_remarks' => $offline_count[0]->sgot_remarks,
                        'sgpt' => $offline_count[0]->sgpt,
                        'sgpt_remarks' => $offline_count[0]->sgpt_remarks,
                        'bun' => $offline_count[0]->bun,
                        'bun_remarks' => $offline_count[0]->bun_remarks,
                        'soduim' => $offline_count[0]->soduim,
                        'soduim_remarks' => $offline_count[0]->soduim_remarks,
                        'potassium' => $offline_count[0]->potassium,
                        'potassium_remarks' => $offline_count[0]->potassium_remarks,
                        'hba1c' => $offline_count[0]->hba1c,
                        'hba1c_remarks' => $offline_count[0]->hba1c_remarks,
                        'alkaline_phosphatase' => $offline_count[0]->alkaline_phosphatase,
                        'alkaline_phosphatase_remarks' => $offline_count[0]->alkaline_phosphatase_remarks,
                        'albumin' => $offline_count[0]->albumin,
                        'albumin_remarks' => $offline_count[0]->albumin_remarks,
                        'calcium' => $offline_count[0]->calcium,
                        'calcium_remarks' => $offline_count[0]->calcium_remarks,
                        'magnesium' => $offline_count[0]->magnesium,
                        'magnesium_remarks' => $offline_count[0]->magnesium_remarks,
                        'chloride' => $offline_count[0]->chloride,
                        'chloride_remarks' => $offline_count[0]->chloride_remarks,
                        'serum_uric_acid' => $offline_count[0]->serum_uric_acid,
                        'serum_uric_acid_remarks' => $offline_count[0]->serum_uric_acid_remarks,
                        'lipid_profile' => $offline_count[0]->lipid_profile,
                        'lipid_profile_remarks' => $offline_count[0]->lipid_profile_remarks,
                        'ldh' => $offline_count[0]->ldh,
                        'ldh_remarks' => $offline_count[0]->ldh_remarks,
                        'tpag_ratio' => $offline_count[0]->tpag_ratio,
                        'tpag_ratio_remarks' => $offline_count[0]->tpag_ratio_remarks,
                        'bilirubin' => $offline_count[0]->bilirubin,
                        'bilirubin_remarks' => $offline_count[0]->bilirubin_remarks,
                        'total_protein' => $offline_count[0]->total_protein,
                        'total_protein_remarks' => $offline_count[0]->total_protein_remarks,
                        'potassium_kplus' => $offline_count[0]->potassium_kplus,
                        'potassium_kplus_remarks' => $offline_count[0]->potassium_kplus_remarks,
                        'na_plus_kplus' => $offline_count[0]->na_plus_kplus,
                        'na_plus_kplus_remarks' => $offline_count[0]->na_plus_kplus_remarks,
                        'ggt' => $offline_count[0]->ggt,
                        'ggt_remarks' => $offline_count[0]->ggt_remarks,
                        'cholinesterase' => $offline_count[0]->cholinesterase,
                        'cholinesterase_remarks' => $offline_count[0]->cholinesterase_remarks,
                        'phosphorous' => $offline_count[0]->phosphorous,
                        'phosphorous_remarks' => $offline_count[0]->phosphorous_remarks,
                        'rbs' => $offline_count[0]->rbs,
                        'rbs_remarks' => $offline_count[0]->rbs_remarks,
                        'vldl' => $offline_count[0]->vldl,
                        'vldl_remarks' => $offline_count[0]->vldl_remarks,
                        'rbc_cholinesterase' => $offline_count[0]->rbc_cholinesterase,
                        'rbc_cholinesterase_remarks' => $offline_count[0]->rbc_cholinesterase_remarks,
                        'crp' => $offline_count[0]->crp,
                        'crp_remarks' => $offline_count[0]->crp_remarks,
                        'pro_calcitonin' => $offline_count[0]->pro_calcitonin,
                        'pro_calcitonin_crp_remarks' => $offline_count[0]->pro_calcitonin_crp_remarks,
                        'ogct_take_one_50grm' => $offline_count[0]->ogct_take_one_50grm,
                        'ogct_take_one_50grm_baseline' => $offline_count[0]->ogct_take_one_50grm_baseline,
                        'ogct_take_one_50grm_first_hour' => $offline_count[0]->ogct_take_one_50grm_first_hour,
                        'ogct_take_one_50grm_second_hour' => $offline_count[0]->ogct_take_one_50grm_second_hour,
                        'ogct_take_one_75grm' => $offline_count[0]->ogct_take_one_75grm,
                        'ogct_take_one_75grm_baseline' => $offline_count[0]->ogct_take_one_75grm_baseline,
                        'ogct_take_one_75grm_first_hour' => $offline_count[0]->ogct_take_one_75grm_first_hour,
                        'ogct_take_one_75grm_second_hour' => $offline_count[0]->ogct_take_one_75grm_second_hour,
                        'ogct_take_two_100grm' => $offline_count[0]->ogct_take_two_100grm,
                        'ogct_take_two_100grm_baseline' => $offline_count[0]->ogct_take_two_100grm_baseline,
                        'ogct_take_two_100grm_first_hour' => $offline_count[0]->ogct_take_two_100grm_first_hour,
                        'ogct_take_two_100grm_second_hour' => $offline_count[0]->ogct_take_two_100grm_second_hour,
                        'ogct_take_two_75grm' => $offline_count[0]->ogct_take_two_75grm,
                        'ogct_take_two_75grm_baseline' => $offline_count[0]->ogct_take_two_75grm_baseline,
                        'ogct_take_two_75grm_first_hour' => $offline_count[0]->ogct_take_two_75grm_first_hour,
                        'ogct_take_two_75grm_second_hour' => $offline_count[0]->ogct_take_two_75grm_second_hour,
                        'ogct_take_three_100grm' => $offline_count[0]->ogct_take_three_100grm,
                        'ogct_take_three_100grm_baseline' => $offline_count[0]->ogct_take_three_100grm_baseline,
                        'ogct_take_three_100grm_first_hour' => $offline_count[0]->ogct_take_three_100grm_first_hour,
                        'ogct_take_three_100grm_second_hour' => $offline_count[0]->ogct_take_three_100grm_second_hour,
                        'ogct_take_four_100grm' => $offline_count[0]->ogct_take_four_100grm,
                        'ogct_take_four_100grm_baseline' => $offline_count[0]->ogct_take_four_100grm_baseline,
                        'ogct_take_four_100grm_first_hour' => $offline_count[0]->ogct_take_four_100grm_first_hour,
                        'ogct_take_four_100grm_second_hour' => $offline_count[0]->ogct_take_four_100grm_second_hour,
                        'remarks' => $offline_count[0]->remarks,
                        'order_status' => $offline_count[0]->order_status,
                        'medtech'=>$offline_count[0]->medtech,
                        'trace_number' => $offline_count[0]->trace_number,
                        'status' => $offline_count[0]->status,
                        'created_at' => $offline_count[0]->created_at,
                        'updated_at' => $offline_count[0]->updated_at
                    ]);
                }
            } else {
                DB::connection('mysql2')->table('laboratory_chemistry')->insert([
                    'lc_id' => $offline->lc_id,
                    'order_id' => $offline->order_id,
                    'doctor_id' => $offline->doctor_id,
                    'patient_id' => $offline->patient_id,
                    'laboratory_id' => $offline->laboratory_id,
                    'ward_nurse_id' => $offline->ward_nurse_id,
                    'case_file' => $offline->case_file,
                    'is_viewed' => $offline->is_viewed,
                    'is_processed' => $offline->is_processed,
                    'is_processed_by' => $offline->is_processed_by,
                    'is_processed_time_start' => $offline->is_processed_time_start,
                    'is_processed_time_end' => $offline->is_processed_time_end,
                    'is_pending' => $offline->is_pending,
                    'is_pending_reason' => $offline->is_pending_reason,
                    'is_pending_date' => $offline->is_pending_date,
                    'is_pending_by' => $offline->is_pending_by,
                    'spicemen' => $offline->spicemen,
                    'glucose' => $offline->glucose,
                    'glucose_remarks' => $offline->glucose_remarks,
                    'fbs' => $offline->fbs,
                    'fbs_remarks' => $offline->fbs_remarks,
                    'creatinine' => $offline->creatinine,
                    'creatinine_remarks' => $offline->creatinine_remarks,
                    'uric_acid' => $offline->uric_acid,
                    'uric_acid_remarks' => $offline->uric_acid_remarks,
                    'cholesterol' => $offline->cholesterol,
                    'cholesterol_remarks' => $offline->cholesterol_remarks,
                    'triglyceride' => $offline->triglyceride,
                    'triglyceride_remarks' => $offline->triglyceride_remarks,
                    'hdl_cholesterol' => $offline->hdl_cholesterol,
                    'hdl_cholesterol_remarks' => $offline->hdl_cholesterol_remarks,
                    'ldl_cholesterol' => $offline->ldl_cholesterol,
                    'ldl_cholesterol_remarks' => $offline->ldl_cholesterol_remarks,
                    'sgot' => $offline->sgot,
                    'sgot_remarks' => $offline->sgot_remarks,
                    'sgpt' => $offline->sgpt,
                    'sgpt_remarks' => $offline->sgpt_remarks,
                    'bun' => $offline->bun,
                    'bun_remarks' => $offline->bun_remarks,
                    'soduim' => $offline->soduim,
                    'soduim_remarks' => $offline->soduim_remarks,
                    'potassium' => $offline->potassium,
                    'potassium_remarks' => $offline->potassium_remarks,
                    'hba1c' => $offline->hba1c,
                    'hba1c_remarks' => $offline->hba1c_remarks,
                    'alkaline_phosphatase' => $offline->alkaline_phosphatase,
                    'alkaline_phosphatase_remarks' => $offline->alkaline_phosphatase_remarks,
                    'albumin' => $offline->albumin,
                    'albumin_remarks' => $offline->albumin_remarks,
                    'calcium' => $offline->calcium,
                    'calcium_remarks' => $offline->calcium_remarks,
                    'magnesium' => $offline->magnesium,
                    'magnesium_remarks' => $offline->magnesium_remarks,
                    'chloride' => $offline->chloride,
                    'chloride_remarks' => $offline->chloride_remarks,
                    'serum_uric_acid' => $offline->serum_uric_acid,
                    'serum_uric_acid_remarks' => $offline->serum_uric_acid_remarks,
                    'lipid_profile' => $offline->lipid_profile,
                    'lipid_profile_remarks' => $offline->lipid_profile_remarks,
                    'ldh' => $offline->ldh,
                    'ldh_remarks' => $offline->ldh_remarks,
                    'tpag_ratio' => $offline->tpag_ratio,
                    'tpag_ratio_remarks' => $offline->tpag_ratio_remarks,
                    'bilirubin' => $offline->bilirubin,
                    'bilirubin_remarks' => $offline->bilirubin_remarks,
                    'total_protein' => $offline->total_protein,
                    'total_protein_remarks' => $offline->total_protein_remarks,
                    'potassium_kplus' => $offline->potassium_kplus,
                    'potassium_kplus_remarks' => $offline->potassium_kplus_remarks,
                    'na_plus_kplus' => $offline->na_plus_kplus,
                    'na_plus_kplus_remarks' => $offline->na_plus_kplus_remarks,
                    'ggt' => $offline->ggt,
                    'ggt_remarks' => $offline->ggt_remarks,
                    'cholinesterase' => $offline->cholinesterase,
                    'cholinesterase_remarks' => $offline->cholinesterase_remarks,
                    'phosphorous' => $offline->phosphorous,
                    'phosphorous_remarks' => $offline->phosphorous_remarks,
                    'rbs' => $offline->rbs,
                    'rbs_remarks' => $offline->rbs_remarks,
                    'vldl' => $offline->vldl,
                    'vldl_remarks' => $offline->vldl_remarks,
                    'rbc_cholinesterase' => $offline->rbc_cholinesterase,
                    'rbc_cholinesterase_remarks' => $offline->rbc_cholinesterase_remarks,
                    'crp' => $offline->crp,
                    'crp_remarks' => $offline->crp_remarks,
                    'pro_calcitonin' => $offline->pro_calcitonin,
                    'pro_calcitonin_crp_remarks' => $offline->pro_calcitonin_crp_remarks,
                    'ogct_take_one_50grm' => $offline->ogct_take_one_50grm,
                    'ogct_take_one_50grm_baseline' => $offline->ogct_take_one_50grm_baseline,
                    'ogct_take_one_50grm_first_hour' => $offline->ogct_take_one_50grm_first_hour,
                    'ogct_take_one_50grm_second_hour' => $offline->ogct_take_one_50grm_second_hour,
                    'ogct_take_one_75grm' => $offline->ogct_take_one_75grm,
                    'ogct_take_one_75grm_baseline' => $offline->ogct_take_one_75grm_baseline,
                    'ogct_take_one_75grm_first_hour' => $offline->ogct_take_one_75grm_first_hour,
                    'ogct_take_one_75grm_second_hour' => $offline->ogct_take_one_75grm_second_hour,
                    'ogct_take_two_100grm' => $offline->ogct_take_two_100grm,
                    'ogct_take_two_100grm_baseline' => $offline->ogct_take_two_100grm_baseline,
                    'ogct_take_two_100grm_first_hour' => $offline->ogct_take_two_100grm_first_hour,
                    'ogct_take_two_100grm_second_hour' => $offline->ogct_take_two_100grm_second_hour,
                    'ogct_take_two_75grm' => $offline->ogct_take_two_75grm,
                    'ogct_take_two_75grm_baseline' => $offline->ogct_take_two_75grm_baseline,
                    'ogct_take_two_75grm_first_hour' => $offline->ogct_take_two_75grm_first_hour,
                    'ogct_take_two_75grm_second_hour' => $offline->ogct_take_two_75grm_second_hour,
                    'ogct_take_three_100grm' => $offline->ogct_take_three_100grm,
                    'ogct_take_three_100grm_baseline' => $offline->ogct_take_three_100grm_baseline,
                    'ogct_take_three_100grm_first_hour' => $offline->ogct_take_three_100grm_first_hour,
                    'ogct_take_three_100grm_second_hour' => $offline->ogct_take_three_100grm_second_hour,
                    'ogct_take_four_100grm' => $offline->ogct_take_four_100grm,
                    'ogct_take_four_100grm_baseline' => $offline->ogct_take_four_100grm_baseline,
                    'ogct_take_four_100grm_first_hour' => $offline->ogct_take_four_100grm_first_hour,
                    'ogct_take_four_100grm_second_hour' => $offline->ogct_take_four_100grm_second_hour,
                    'remarks' => $offline->remarks,
                    'order_status' => $offline->order_status,
                    'medtech' => $offline->medtech,
                    'trace_number' => $offline->trace_number,
                    'status' => $offline->status,
                    'created_at' => $offline->created_at,
                    'updated_at' => $offline->updated_at
                ]);
            }
        }

        // syncronize laboratory table from online to offline
        $online_query = DB::connection('mysql2')->table('laboratory_chemistry')->get();
        foreach ($online_query as $online) {
            $online_count = DB::table('laboratory_chemistry')->where('lc_id', $online->lc_id)->get();
            if (count($online_count) > 0) {
                DB::table('laboratory_chemistry')->where('lc_id', $online->lc_id)->update([
                    'order_id' => $online->order_id,
                    'doctor_id' => $online->doctor_id,
                    'patient_id' => $online->patient_id,
                    'laboratory_id' => $online->laboratory_id,
                    'ward_nurse_id' => $online->ward_nurse_id,
                    'case_file' => $online->case_file,
                    'is_viewed' => $online->is_viewed,
                    'is_processed' => $online->is_processed,
                    'is_processed_by' => $online->is_processed_by,
                    'is_processed_time_start' => $online->is_processed_time_start,
                    'is_processed_time_end' => $online->is_processed_time_end,
                    'is_pending' => $online->is_pending,
                    'is_pending_reason' => $online->is_pending_reason,
                    'is_pending_date' => $online->is_pending_date,
                    'is_pending_by' => $online->is_pending_by,
                    'spicemen' => $online->spicemen,
                    'glucose' => $online->glucose,
                    'glucose_remarks' => $online->glucose_remarks,
                    'fbs' => $online->fbs,
                    'fbs_remarks' => $online->fbs_remarks,
                    'creatinine' => $online->creatinine,
                    'creatinine_remarks' => $online->creatinine_remarks,
                    'uric_acid' => $online->uric_acid,
                    'uric_acid_remarks' => $online->uric_acid_remarks,
                    'cholesterol' => $online->cholesterol,
                    'cholesterol_remarks' => $online->cholesterol_remarks,
                    'triglyceride' => $online->triglyceride,
                    'triglyceride_remarks' => $online->triglyceride_remarks,
                    'hdl_cholesterol' => $online->hdl_cholesterol,
                    'hdl_cholesterol_remarks' => $online->hdl_cholesterol_remarks,
                    'ldl_cholesterol' => $online->ldl_cholesterol,
                    'ldl_cholesterol_remarks' => $online->ldl_cholesterol_remarks,
                    'sgot' => $online->sgot,
                    'sgot_remarks' => $online->sgot_remarks,
                    'sgpt' => $online->sgpt,
                    'sgpt_remarks' => $online->sgpt_remarks,
                    'bun' => $online->bun,
                    'bun_remarks' => $online->bun_remarks,
                    'soduim' => $online->soduim,
                    'soduim_remarks' => $online->soduim_remarks,
                    'potassium' => $online->potassium,
                    'potassium_remarks' => $online->potassium_remarks,
                    'hba1c' => $online->hba1c,
                    'hba1c_remarks' => $online->hba1c_remarks,
                    'alkaline_phosphatase' => $online->alkaline_phosphatase,
                    'alkaline_phosphatase_remarks' => $online->alkaline_phosphatase_remarks,
                    'albumin' => $online->albumin,
                    'albumin_remarks' => $online->albumin_remarks,
                    'calcium' => $online->calcium,
                    'calcium_remarks' => $online->calcium_remarks,
                    'magnesium' => $online->magnesium,
                    'magnesium_remarks' => $online->magnesium_remarks,
                    'chloride' => $online->chloride,
                    'chloride_remarks' => $online->chloride_remarks,
                    'serum_uric_acid' => $online->serum_uric_acid,
                    'serum_uric_acid_remarks' => $online->serum_uric_acid_remarks,
                    'lipid_profile' => $online->lipid_profile,
                    'lipid_profile_remarks' => $online->lipid_profile_remarks,
                    'ldh' => $online->ldh,
                    'ldh_remarks' => $online->ldh_remarks,
                    'tpag_ratio' => $online->tpag_ratio,
                    'tpag_ratio_remarks' => $online->tpag_ratio_remarks,
                    'bilirubin' => $online->bilirubin,
                    'bilirubin_remarks' => $online->bilirubin_remarks,
                    'total_protein' => $online->total_protein,
                    'total_protein_remarks' => $online->total_protein_remarks,
                    'potassium_kplus' => $online->potassium_kplus,
                    'potassium_kplus_remarks' => $online->potassium_kplus_remarks,
                    'na_plus_kplus' => $online->na_plus_kplus,
                    'na_plus_kplus_remarks' => $online->na_plus_kplus_remarks,
                    'ggt' => $online->ggt,
                    'ggt_remarks' => $online->ggt_remarks,
                    'cholinesterase' => $online->cholinesterase,
                    'cholinesterase_remarks' => $online->cholinesterase_remarks,
                    'phosphorous' => $online->phosphorous,
                    'phosphorous_remarks' => $online->phosphorous_remarks,
                    'rbs' => $online->rbs,
                    'rbs_remarks' => $online->rbs_remarks,
                    'vldl' => $online->vldl,
                    'vldl_remarks' => $online->vldl_remarks,
                    'rbc_cholinesterase' => $online->rbc_cholinesterase,
                    'rbc_cholinesterase_remarks' => $online->rbc_cholinesterase_remarks,
                    'crp' => $online->crp,
                    'crp_remarks' => $online->crp_remarks,
                    'pro_calcitonin' => $online->pro_calcitonin,
                    'pro_calcitonin_crp_remarks' => $online->pro_calcitonin_crp_remarks,
                    'ogct_take_one_50grm' => $online->ogct_take_one_50grm,
                    'ogct_take_one_50grm_baseline' => $online->ogct_take_one_50grm_baseline,
                    'ogct_take_one_50grm_first_hour' => $online->ogct_take_one_50grm_first_hour,
                    'ogct_take_one_50grm_second_hour' => $online->ogct_take_one_50grm_second_hour,
                    'ogct_take_one_75grm' => $online->ogct_take_one_75grm,
                    'ogct_take_one_75grm_baseline' => $online->ogct_take_one_75grm_baseline,
                    'ogct_take_one_75grm_first_hour' => $online->ogct_take_one_75grm_first_hour,
                    'ogct_take_one_75grm_second_hour' => $online->ogct_take_one_75grm_second_hour,
                    'ogct_take_two_100grm' => $online->ogct_take_two_100grm,
                    'ogct_take_two_100grm_baseline' => $online->ogct_take_two_100grm_baseline,
                    'ogct_take_two_100grm_first_hour' => $online->ogct_take_two_100grm_first_hour,
                    'ogct_take_two_100grm_second_hour' => $online->ogct_take_two_100grm_second_hour,
                    'ogct_take_two_75grm' => $online->ogct_take_two_75grm,
                    'ogct_take_two_75grm_baseline' => $online->ogct_take_two_75grm_baseline,
                    'ogct_take_two_75grm_first_hour' => $online->ogct_take_two_75grm_first_hour,
                    'ogct_take_two_75grm_second_hour' => $online->ogct_take_two_75grm_second_hour,
                    'ogct_take_three_100grm' => $online->ogct_take_three_100grm,
                    'ogct_take_three_100grm_baseline' => $online->ogct_take_three_100grm_baseline,
                    'ogct_take_three_100grm_first_hour' => $online->ogct_take_three_100grm_first_hour,
                    'ogct_take_three_100grm_second_hour' => $online->ogct_take_three_100grm_second_hour,
                    'ogct_take_four_100grm' => $online->ogct_take_four_100grm,
                    'ogct_take_four_100grm_baseline' => $online->ogct_take_four_100grm_baseline,
                    'ogct_take_four_100grm_first_hour' => $online->ogct_take_four_100grm_first_hour,
                    'ogct_take_four_100grm_second_hour' => $online->ogct_take_four_100grm_second_hour,
                    'remarks' => $online->remarks,
                    'order_status' => $online->order_status,
                    'medtech' => $online->medtech,
                    'trace_number' => $online->trace_number,
                    'status' => $online->status,
                    'created_at' => $online->created_at,
                    'updated_at' => $online->updated_at
                ]);
            } else {
                DB::table('laboratory_chemistry')->insert([
                    'lc_id' => $online->lc_id,
                    'order_id' => $online->order_id,
                    'doctor_id' => $online->doctor_id,
                    'patient_id' => $online->patient_id,
                    'laboratory_id' => $online->laboratory_id,
                    'ward_nurse_id' => $online->ward_nurse_id,
                    'case_file' => $online->case_file,
                    'is_viewed' => $online->is_viewed,
                    'is_processed' => $online->is_processed,
                    'is_processed_by' => $online->is_processed_by,
                    'is_processed_time_start' => $online->is_processed_time_start,
                    'is_processed_time_end' => $online->is_processed_time_end,
                    'is_pending' => $online->is_pending,
                    'is_pending_reason' => $online->is_pending_reason,
                    'is_pending_date' => $online->is_pending_date,
                    'is_pending_by' => $online->is_pending_by,
                    'spicemen' => $online->spicemen,
                    'glucose' => $online->glucose,
                    'glucose_remarks' => $online->glucose_remarks,
                    'fbs' => $online->fbs,
                    'fbs_remarks' => $online->fbs_remarks,
                    'creatinine' => $online->creatinine,
                    'creatinine_remarks' => $online->creatinine_remarks,
                    'uric_acid' => $online->uric_acid,
                    'uric_acid_remarks' => $online->uric_acid_remarks,
                    'cholesterol' => $online->cholesterol,
                    'cholesterol_remarks' => $online->cholesterol_remarks,
                    'triglyceride' => $online->triglyceride,
                    'triglyceride_remarks' => $online->triglyceride_remarks,
                    'hdl_cholesterol' => $online->hdl_cholesterol,
                    'hdl_cholesterol_remarks' => $online->hdl_cholesterol_remarks,
                    'ldl_cholesterol' => $online->ldl_cholesterol,
                    'ldl_cholesterol_remarks' => $online->ldl_cholesterol_remarks,
                    'sgot' => $online->sgot,
                    'sgot_remarks' => $online->sgot_remarks,
                    'sgpt' => $online->sgpt,
                    'sgpt_remarks' => $online->sgpt_remarks,
                    'bun' => $online->bun,
                    'bun_remarks' => $online->bun_remarks,
                    'soduim' => $online->soduim,
                    'soduim_remarks' => $online->soduim_remarks,
                    'potassium' => $online->potassium,
                    'potassium_remarks' => $online->potassium_remarks,
                    'hba1c' => $online->hba1c,
                    'hba1c_remarks' => $online->hba1c_remarks,
                    'alkaline_phosphatase' => $online->alkaline_phosphatase,
                    'alkaline_phosphatase_remarks' => $online->alkaline_phosphatase_remarks,
                    'albumin' => $online->albumin,
                    'albumin_remarks' => $online->albumin_remarks,
                    'calcium' => $online->calcium,
                    'calcium_remarks' => $online->calcium_remarks,
                    'magnesium' => $online->magnesium,
                    'magnesium_remarks' => $online->magnesium_remarks,
                    'chloride' => $online->chloride,
                    'chloride_remarks' => $online->chloride_remarks,
                    'serum_uric_acid' => $online->serum_uric_acid,
                    'serum_uric_acid_remarks' => $online->serum_uric_acid_remarks,
                    'lipid_profile' => $online->lipid_profile,
                    'lipid_profile_remarks' => $online->lipid_profile_remarks,
                    'ldh' => $online->ldh,
                    'ldh_remarks' => $online->ldh_remarks,
                    'tpag_ratio' => $online->tpag_ratio,
                    'tpag_ratio_remarks' => $online->tpag_ratio_remarks,
                    'bilirubin' => $online->bilirubin,
                    'bilirubin_remarks' => $online->bilirubin_remarks,
                    'total_protein' => $online->total_protein,
                    'total_protein_remarks' => $online->total_protein_remarks,
                    'potassium_kplus' => $online->potassium_kplus,
                    'potassium_kplus_remarks' => $online->potassium_kplus_remarks,
                    'na_plus_kplus' => $online->na_plus_kplus,
                    'na_plus_kplus_remarks' => $online->na_plus_kplus_remarks,
                    'ggt' => $online->ggt,
                    'ggt_remarks' => $online->ggt_remarks,
                    'cholinesterase' => $online->cholinesterase,
                    'cholinesterase_remarks' => $online->cholinesterase_remarks,
                    'phosphorous' => $online->phosphorous,
                    'phosphorous_remarks' => $online->phosphorous_remarks,
                    'rbs' => $online->rbs,
                    'rbs_remarks' => $online->rbs_remarks,
                    'vldl' => $online->vldl,
                    'vldl_remarks' => $online->vldl_remarks,
                    'rbc_cholinesterase' => $online->rbc_cholinesterase,
                    'rbc_cholinesterase_remarks' => $online->rbc_cholinesterase_remarks,
                    'crp' => $online->crp,
                    'crp_remarks' => $online->crp_remarks,
                    'pro_calcitonin' => $online->pro_calcitonin,
                    'pro_calcitonin_crp_remarks' => $online->pro_calcitonin_crp_remarks,
                    'ogct_take_one_50grm' => $online->ogct_take_one_50grm,
                    'ogct_take_one_50grm_baseline' => $online->ogct_take_one_50grm_baseline,
                    'ogct_take_one_50grm_first_hour' => $online->ogct_take_one_50grm_first_hour,
                    'ogct_take_one_50grm_second_hour' => $online->ogct_take_one_50grm_second_hour,
                    'ogct_take_one_75grm' => $online->ogct_take_one_75grm,
                    'ogct_take_one_75grm_baseline' => $online->ogct_take_one_75grm_baseline,
                    'ogct_take_one_75grm_first_hour' => $online->ogct_take_one_75grm_first_hour,
                    'ogct_take_one_75grm_second_hour' => $online->ogct_take_one_75grm_second_hour,
                    'ogct_take_two_100grm' => $online->ogct_take_two_100grm,
                    'ogct_take_two_100grm_baseline' => $online->ogct_take_two_100grm_baseline,
                    'ogct_take_two_100grm_first_hour' => $online->ogct_take_two_100grm_first_hour,
                    'ogct_take_two_100grm_second_hour' => $online->ogct_take_two_100grm_second_hour,
                    'ogct_take_two_75grm' => $online->ogct_take_two_75grm,
                    'ogct_take_two_75grm_baseline' => $online->ogct_take_two_75grm_baseline,
                    'ogct_take_two_75grm_first_hour' => $online->ogct_take_two_75grm_first_hour,
                    'ogct_take_two_75grm_second_hour' => $online->ogct_take_two_75grm_second_hour,
                    'ogct_take_three_100grm' => $online->ogct_take_three_100grm,
                    'ogct_take_three_100grm_baseline' => $online->ogct_take_three_100grm_baseline,
                    'ogct_take_three_100grm_first_hour' => $online->ogct_take_three_100grm_first_hour,
                    'ogct_take_three_100grm_second_hour' => $online->ogct_take_three_100grm_second_hour,
                    'ogct_take_four_100grm' => $online->ogct_take_four_100grm,
                    'ogct_take_four_100grm_baseline' => $online->ogct_take_four_100grm_baseline,
                    'ogct_take_four_100grm_first_hour' => $online->ogct_take_four_100grm_first_hour,
                    'ogct_take_four_100grm_second_hour' => $online->ogct_take_four_100grm_second_hour,
                    'remarks' => $online->remarks,
                    'order_status' => $online->order_status,
                    'medtech' => $online->medtech,
                    'trace_number' => $online->trace_number,
                    'status' => $online->status,
                    'created_at' => $online->created_at,
                    'updated_at' => $online->updated_at
                ]);
            }
        }

        return true;
    }

    public static function syncLaboratoryCovid19Test(){
        // syncronize laboratory_covid19_test table from offline to online  
        $offline_query = DB::table('laboratory_covid19_test')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_covid19_test')->where('lct_id', $offline->lct_id)->get();
                if(count($offline_count) > 0){  
                    if($offline->updated_at > $offline_count[0]->updated_at){ 
                        DB::connection('mysql2')->table('laboratory_covid19_test')->where('lct_id', $offline->lct_id)->update([      
                            'order_id'=>$offline->order_id,
                            'doctor_id'=>$offline->doctor_id,
                            'patient_id'=>$offline->patient_id,
                            'laboratory_id'=>$offline->laboratory_id,
                            'ward_nurse_id'=>$offline->ward_nurse_id,
                            'case_file'=>$offline->case_file,
                            'is_viewed'=>$offline->is_viewed,
                            'is_processed'=>$offline->is_processed,
                            'is_processed_by'=>$offline->is_processed_by,
                            'is_processed_time_start'=>$offline->is_processed_time_start,
                            'is_processed_time_end'=>$offline->is_processed_time_end,
                            'is_pending'=>$offline->is_pending,
                            'is_pending_reason'=>$offline->is_pending_reason,
                            'is_pending_date'=>$offline->is_pending_date,
                            'is_pending_by'=>$offline->is_pending_by,
                            'rapid_test'=>$offline->rapid_test,
                            'rapid_test_result'=>$offline->rapid_test_result,
                            'rapid_test_result_remarks'=>$offline->rapid_test_result_remarks,
                            'antigen_test'=>$offline->antigen_test,
                            'antigen_test_result'=>$offline->antigen_test_result,
                            'antigen_test_result_remarks'=>$offline->antigen_test_result_remarks,
                            'order_status'=>$offline->order_status,
                            'medtech'=>$offline->medtech,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'remarks'=>$offline->remarks,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);  
                    } 
                    
                    else{
                        DB::table('laboratory_covid19_test')->where('lct_id', $offline_count[0]->lct_id)->update([   
                            'order_id'=>$offline_count[0]->order_id,
                            'doctor_id'=>$offline_count[0]->doctor_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'laboratory_id'=>$offline_count[0]->laboratory_id,
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id,
                            'case_file'=>$offline_count[0]->case_file,
                            'is_viewed'=>$offline_count[0]->is_viewed,
                            'is_processed'=>$offline_count[0]->is_processed,
                            'is_processed_by'=>$offline_count[0]->is_processed_by,
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start,
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end,
                            'is_pending'=>$offline_count[0]->is_pending,
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason,
                            'is_pending_date'=>$offline_count[0]->is_pending_date,
                            'is_pending_by'=>$offline_count[0]->is_pending_by,
                            'rapid_test'=>$offline_count[0]->rapid_test,
                            'rapid_test_result'=>$offline_count[0]->rapid_test_result,
                            'rapid_test_result_remarks'=>$offline_count[0]->rapid_test_result_remarks,
                            'antigen_test'=>$offline_count[0]->antigen_test,
                            'antigen_test_result'=>$offline_count[0]->antigen_test_result,
                            'antigen_test_result_remarks'=>$offline_count[0]->antigen_test_result_remarks,
                            'order_status'=>$offline_count[0]->order_status,
                            'medtech'=>$offline_count[0]->medtech,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'remarks'=>$offline_count[0]->remarks,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    } 
                }
                
                else{ 
                    DB::connection('mysql2')->table('laboratory_covid19_test')->insert([    
                        'lct_id'=>$offline->lct_id,
                        'order_id'=>$offline->order_id,
                        'doctor_id'=>$offline->doctor_id,
                        'patient_id'=>$offline->patient_id,
                        'laboratory_id'=>$offline->laboratory_id,
                        'ward_nurse_id'=>$offline->ward_nurse_id,
                        'case_file'=>$offline->case_file,
                        'is_viewed'=>$offline->is_viewed,
                        'is_processed'=>$offline->is_processed,
                        'is_processed_by'=>$offline->is_processed_by,
                        'is_processed_time_start'=>$offline->is_processed_time_start,
                        'is_processed_time_end'=>$offline->is_processed_time_end,
                        'is_pending'=>$offline->is_pending,
                        'is_pending_reason'=>$offline->is_pending_reason,
                        'is_pending_date'=>$offline->is_pending_date,
                        'is_pending_by'=>$offline->is_pending_by,
                        'rapid_test'=>$offline->rapid_test,
                        'rapid_test_result'=>$offline->rapid_test_result,
                        'rapid_test_result_remarks'=>$offline->rapid_test_result_remarks,
                        'antigen_test'=>$offline->antigen_test,
                        'antigen_test_result'=>$offline->antigen_test_result,
                        'antigen_test_result_remarks'=>$offline->antigen_test_result_remarks,
                        'order_status'=>$offline->order_status,
                        'medtech'=>$offline->medtech,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'remarks'=>$offline->remarks,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);  
                } 
        } 

        // syncronize laboratory_covid19_test table from online to offline 
        $online_query = DB::connection('mysql2')->table('laboratory_covid19_test')->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('laboratory_covid19_test')->where('lct_id', $online->lct_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_covid19_test')->where('lct_id', $online->lct_id)->update([  
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'laboratory_id'=>$online->laboratory_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'rapid_test'=>$online->rapid_test,
                        'rapid_test_result'=>$online->rapid_test_result,
                        'rapid_test_result_remarks'=>$online->rapid_test_result_remarks,
                        'antigen_test'=>$online->antigen_test,
                        'antigen_test_result'=>$online->antigen_test_result,
                        'antigen_test_result_remarks'=>$online->antigen_test_result_remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'remarks'=>$online->remarks,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('laboratory_covid19_test')->insert([    
                        'lct_id'=>$online->lct_id,
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'laboratory_id'=>$online->laboratory_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'rapid_test'=>$online->rapid_test,
                        'rapid_test_result'=>$online->rapid_test_result,
                        'rapid_test_result_remarks'=>$online->rapid_test_result_remarks,
                        'antigen_test'=>$online->antigen_test,
                        'antigen_test_result'=>$online->antigen_test_result,
                        'antigen_test_result_remarks'=>$online->antigen_test_result_remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'remarks'=>$online->remarks,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        } 
        
        return true;
        
    }

    public static function syncLaboratoryDrugTest(){
        // syncronize laboratory_drug_test table from offline to online
        $offline = DB::table('laboratory_drug_test')->get();
        foreach ($offline as $offline) {
            $offline_count = DB::connection('mysql2')->table('laboratory_drug_test')->where('ldt_id', $offline->ldt_id)->get();
            if (count($offline_count) > 0) {
                if ($offline->updated_at > $offline_count[0]->updated_at) {
                    DB::connection('mysql2')->table('laboratory_drug_test')->where('ldt_id', $offline->ldt_id)->update([
                        'order_id' => $offline->order_id, 
                        'doctor_id' => $offline->doctor_id, 
                        'patient_id' => $offline->patient_id, 
                        'laboratory_id' => $offline->laboratory_id, 
                        'ward_nurse_id' => $offline->ward_nurse_id, 
                        'case_file' => $offline->case_file, 
                        'is_viewed' => $offline->is_viewed, 
                        'is_processed' => $offline->is_processed, 
                        'is_processed_by' => $offline->is_processed_by, 
                        'is_processed_time_start' => $offline->is_processed_time_start, 
                        'is_processed_time_end' => $offline->is_processed_time_end, 
                        'is_pending' => $offline->is_pending, 
                        'is_pending_reason' => $offline->is_pending_reason, 
                        'is_pending_date' => $offline->is_pending_date, 
                        'is_pending_by' => $offline->is_pending_by, 
                        'two_panels' => $offline->two_panels, 
                        'two_panels_result' => $offline->two_panels_result, 
                        'three_panels' => $offline->three_panels, 
                        'three_panels_result' => $offline->three_panels_result, 
                        'five_panels' => $offline->five_panels, 
                        'five_panels_result' => $offline->five_panels_result, 
                        'remarks' => $offline->remarks, 
                        'order_status' => $offline->order_status, 
                        'medtech' => $offline->medtech, 
                        'trace_number' => $offline->trace_number, 
                        'status' => $offline->status, 
                        'created_at' => $offline->created_at,
                        'updated_at' => $offline->updated_at
                    ]);
                } else {
                    DB::table('laboratory_drug_test')->where('ldt_id', $offline_count[0]->ldt_id)->update([
                        'order_id' => $offline_count[0]->order_id, 
                        'doctor_id' => $offline_count[0]->doctor_id, 
                        'patient_id' => $offline_count[0]->patient_id, 
                        'laboratory_id' => $offline_count[0]->laboratory_id, 
                        'ward_nurse_id' => $offline_count[0]->ward_nurse_id, 
                        'case_file' => $offline_count[0]->case_file, 
                        'is_viewed' => $offline_count[0]->is_viewed, 
                        'is_processed' => $offline_count[0]->is_processed, 
                        'is_processed_by' => $offline_count[0]->is_processed_by, 
                        'is_processed_time_start' => $offline_count[0]->is_processed_time_start, 
                        'is_processed_time_end' => $offline_count[0]->is_processed_time_end, 
                        'is_pending' => $offline_count[0]->is_pending, 
                        'is_pending_reason' => $offline_count[0]->is_pending_reason, 
                        'is_pending_date' => $offline_count[0]->is_pending_date, 
                        'is_pending_by' => $offline_count[0]->is_pending_by, 
                        'two_panels' => $offline_count[0]->two_panels, 
                        'two_panels_result' => $offline_count[0]->two_panels_result, 
                        'three_panels' => $offline_count[0]->three_panels, 
                        'three_panels_result' => $offline_count[0]->three_panels_result, 
                        'five_panels' => $offline_count[0]->five_panels, 
                        'five_panels_result' => $offline_count[0]->five_panels_result, 
                        'remarks' => $offline_count[0]->remarks, 
                        'order_status' => $offline_count[0]->order_status, 
                        'medtech' => $offline_count[0]->medtech, 
                        'trace_number' => $offline_count[0]->trace_number, 
                        'status' => $offline_count[0]->status, 
                        'created_at' => $offline_count[0]->created_at,
                        'updated_at' => $offline_count[0]->updated_at
                    ]);
                }
            } else {
                DB::connection('mysql2')->table('laboratory_drug_test')->insert([
                    'ldt_id' => $offline->ldt_id, 
                    'order_id' => $offline->order_id, 
                    'doctor_id' => $offline->doctor_id, 
                    'patient_id' => $offline->patient_id, 
                    'laboratory_id' => $offline->laboratory_id, 
                    'ward_nurse_id' => $offline->ward_nurse_id, 
                    'case_file' => $offline->case_file, 
                    'is_viewed' => $offline->is_viewed, 
                    'is_processed' => $offline->is_processed, 
                    'is_processed_by' => $offline->is_processed_by, 
                    'is_processed_time_start' => $offline->is_processed_time_start, 
                    'is_processed_time_end' => $offline->is_processed_time_end, 
                    'is_pending' => $offline->is_pending, 
                    'is_pending_reason' => $offline->is_pending_reason, 
                    'is_pending_date' => $offline->is_pending_date, 
                    'is_pending_by' => $offline->is_pending_by, 
                    'two_panels' => $offline->two_panels, 
                    'two_panels_result' => $offline->two_panels_result, 
                    'three_panels' => $offline->three_panels, 
                    'three_panels_result' => $offline->three_panels_result, 
                    'five_panels' => $offline->five_panels, 
                    'five_panels_result' => $offline->five_panels_result, 
                    'remarks' => $offline->remarks, 
                    'order_status' => $offline->order_status, 
                    'medtech' => $offline->medtech, 
                    'trace_number' => $offline->trace_number, 
                    'status' => $offline->status, 
                    'created_at' => $offline->created_at,
                    'updated_at' => $offline->updated_at
                ]);
            }
        }

        // syncronize laboratory_drug_test table from online to offline
        $online = DB::connection('mysql2')->table('laboratory_drug_test')->get();
        foreach ($online as $online) {
            $online_count = DB::table('laboratory_drug_test')->where('ldt_id', $online->ldt_id)->get();
            if (count($online_count) > 0) {
                DB::table('laboratory_drug_test')->where('ldt_id', $online->ldt_id)->update([
                    'order_id' => $online->order_id, 
                    'doctor_id' => $online->doctor_id, 
                    'patient_id' => $online->patient_id, 
                    'laboratory_id' => $online->laboratory_id, 
                    'ward_nurse_id' => $online->ward_nurse_id, 
                    'case_file' => $online->case_file, 
                    'is_viewed' => $online->is_viewed, 
                    'is_processed' => $online->is_processed, 
                    'is_processed_by' => $online->is_processed_by, 
                    'is_processed_time_start' => $online->is_processed_time_start, 
                    'is_processed_time_end' => $online->is_processed_time_end, 
                    'is_pending' => $online->is_pending, 
                    'is_pending_reason' => $online->is_pending_reason, 
                    'is_pending_date' => $online->is_pending_date, 
                    'is_pending_by' => $online->is_pending_by, 
                    'two_panels' => $online->two_panels, 
                    'two_panels_result' => $online->two_panels_result, 
                    'three_panels' => $online->three_panels, 
                    'three_panels_result' => $online->three_panels_result, 
                    'five_panels' => $online->five_panels, 
                    'five_panels_result' => $online->five_panels_result, 
                    'remarks' => $online->remarks, 
                    'order_status' => $online->order_status, 
                    'medtech' => $online->medtech, 
                    'trace_number' => $online->trace_number, 
                    'status' => $online->status, 
                    'created_at' => $online->created_at,
                    'updated_at' => $online->updated_at
                ]);
            } else {
                DB::table('laboratory_drug_test')->insert([
                    'ldt_id' => $online->ldt_id,  
                    'order_id' => $online->order_id, 
                    'doctor_id' => $online->doctor_id, 
                    'patient_id' => $online->patient_id, 
                    'laboratory_id' => $online->laboratory_id, 
                    'ward_nurse_id' => $online->ward_nurse_id, 
                    'case_file' => $online->case_file, 
                    'is_viewed' => $online->is_viewed, 
                    'is_processed' => $online->is_processed, 
                    'is_processed_by' => $online->is_processed_by, 
                    'is_processed_time_start' => $online->is_processed_time_start, 
                    'is_processed_time_end' => $online->is_processed_time_end, 
                    'is_pending' => $online->is_pending, 
                    'is_pending_reason' => $online->is_pending_reason, 
                    'is_pending_date' => $online->is_pending_date, 
                    'is_pending_by' => $online->is_pending_by, 
                    'two_panels' => $online->two_panels, 
                    'two_panels_result' => $online->two_panels_result, 
                    'three_panels' => $online->three_panels, 
                    'three_panels_result' => $online->three_panels_result, 
                    'five_panels' => $online->five_panels, 
                    'five_panels_result' => $online->five_panels_result, 
                    'remarks' => $online->remarks, 
                    'order_status' => $online->order_status, 
                    'medtech' => $online->medtech, 
                    'trace_number' => $online->trace_number, 
                    'status' => $online->status, 
                    'created_at' => $online->created_at,
                    'updated_at' => $online->updated_at
                ]);
            }
        }

        return true;
    }

    public static function syncLaboratoryECG(){
        // syncronize laboratory_ecg table from offline to online  
        $offline_query = DB::table('laboratory_ecg')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_ecg')->where('le_id', $offline->le_id)->get();
                if(count($offline_count) > 0){  
                    if($offline->updated_at > $offline_count[0]->updated_at){ 
                        DB::connection('mysql2')->table('laboratory_ecg')->where('le_id', $offline->le_id)->update([      
                            'order_id'=>$offline->order_id, 
                            'doctor_id'=>$offline->doctor_id, 
                            'patient_id'=>$offline->patient_id, 
                            'laboratory_id'=>$offline->laboratory_id, 
                            'ward_nurse_id'=>$offline->ward_nurse_id, 
                            'case_file'=>$offline->case_file, 
                            'is_viewed'=>$offline->is_viewed, 
                            'is_processed'=>$offline->is_processed, 
                            'is_processed_by'=>$offline->is_processed_by, 
                            'is_processed_time_start'=>$offline->is_processed_time_start, 
                            'is_processed_time_end'=>$offline->is_processed_time_end, 
                            'is_pending'=>$offline->is_pending, 
                            'is_pending_reason'=>$offline->is_pending_reason, 
                            'is_pending_date'=>$offline->is_pending_date, 
                            'is_pending_by'=>$offline->is_pending_by, 
                            'ecg_test'=>$offline->ecg_test,
                            'atrial_ventricular_rate'=>$offline->atrial_ventricular_rate,
                            'rhythm'=>$offline->rhythm,
                            'axis'=>$offline->axis,
                            'p_wave'=>$offline->p_wave,
                            'pr_interval'=>$offline->pr_interval,
                            'qrs'=>$offline->qrs,
                            'qt_interval'=>$offline->qt_interval,
                            'qrs_complex'=>$offline->qrs_complex,
                            'st_segment'=>$offline->st_segment,
                            'others'=>$offline->others,
                            'interpretation'=>$offline->interpretation,
                            'image'=>$offline->image,
                            'remarks'=>$offline->remarks, 
                            'order_status'=>$offline->order_status, 
                            'medtech'=>$offline->medtech, 
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,  
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);  
                    } 
                    
                    else{
                        DB::table('laboratory_ecg')->where('le_id', $offline_count[0]->le_id)->update([   
                            'order_id'=>$offline_count[0]->order_id, 
                            'doctor_id'=>$offline_count[0]->doctor_id, 
                            'patient_id'=>$offline_count[0]->patient_id, 
                            'laboratory_id'=>$offline_count[0]->laboratory_id, 
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id, 
                            'case_file'=>$offline_count[0]->case_file, 
                            'is_viewed'=>$offline_count[0]->is_viewed, 
                            'is_processed'=>$offline_count[0]->is_processed, 
                            'is_processed_by'=>$offline_count[0]->is_processed_by, 
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start, 
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end, 
                            'is_pending'=>$offline_count[0]->is_pending, 
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason, 
                            'is_pending_date'=>$offline_count[0]->is_pending_date, 
                            'is_pending_by'=>$offline_count[0]->is_pending_by, 
                            'ecg_test'=>$offline_count[0]->ecg_test,
                            'atrial_ventricular_rate'=>$offline_count[0]->atrial_ventricular_rate,
                            'rhythm'=>$offline_count[0]->rhythm,
                            'axis'=>$offline_count[0]->axis,
                            'p_wave'=>$offline_count[0]->p_wave,
                            'pr_interval'=>$offline_count[0]->pr_interval,
                            'qrs'=>$offline_count[0]->qrs,
                            'qt_interval'=>$offline_count[0]->qt_interval,
                            'qrs_complex'=>$offline_count[0]->qrs_complex,
                            'st_segment'=>$offline_count[0]->st_segment,
                            'others'=>$offline_count[0]->others,
                            'interpretation'=>$offline_count[0]->interpretation,
                            'image'=>$offline_count[0]->image,
                            'remarks'=>$offline_count[0]->remarks, 
                            'order_status'=>$offline_count[0]->order_status, 
                            'medtech'=>$offline_count[0]->medtech, 
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,  
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    } 
                }
                
                else{ 
                    DB::connection('mysql2')->table('laboratory_ecg')->insert([  
                        'le_id'=>$offline->le_id,
                        'order_id'=>$offline->order_id, 
                        'doctor_id'=>$offline->doctor_id, 
                        'patient_id'=>$offline->patient_id, 
                        'laboratory_id'=>$offline->laboratory_id, 
                        'ward_nurse_id'=>$offline->ward_nurse_id, 
                        'case_file'=>$offline->case_file, 
                        'is_viewed'=>$offline->is_viewed, 
                        'is_processed'=>$offline->is_processed, 
                        'is_processed_by'=>$offline->is_processed_by, 
                        'is_processed_time_start'=>$offline->is_processed_time_start, 
                        'is_processed_time_end'=>$offline->is_processed_time_end, 
                        'is_pending'=>$offline->is_pending, 
                        'is_pending_reason'=>$offline->is_pending_reason, 
                        'is_pending_date'=>$offline->is_pending_date, 
                        'is_pending_by'=>$offline->is_pending_by, 
                        'ecg_test'=>$offline->ecg_test,
                        'atrial_ventricular_rate'=>$offline->atrial_ventricular_rate,
                        'rhythm'=>$offline->rhythm,
                        'axis'=>$offline->axis,
                        'p_wave'=>$offline->p_wave,
                        'pr_interval'=>$offline->pr_interval,
                        'qrs'=>$offline->qrs,
                        'qt_interval'=>$offline->qt_interval,
                        'qrs_complex'=>$offline->qrs_complex,
                        'st_segment'=>$offline->st_segment,
                        'others'=>$offline->others,
                        'interpretation'=>$offline->interpretation,
                        'image'=>$offline->image,
                        'remarks'=>$offline->remarks, 
                        'order_status'=>$offline->order_status, 
                        'medtech'=>$offline->medtech, 
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,  
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);  
                } 
        } 

        // syncronize laboratory_ecg table from online to offline 
        $online_query = DB::connection('mysql2')->table('laboratory_ecg')->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('laboratory_ecg')->where('le_id', $online->le_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_ecg')->where('le_id', $online->le_id)->update([   
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by, 
                        'ecg_test'=>$online->ecg_test,
                        'atrial_ventricular_rate'=>$online->atrial_ventricular_rate,
                        'rhythm'=>$online->rhythm,
                        'axis'=>$online->axis,
                        'p_wave'=>$online->p_wave,
                        'pr_interval'=>$online->pr_interval,
                        'qrs'=>$online->qrs,
                        'qt_interval'=>$online->qt_interval,
                        'qrs_complex'=>$online->qrs_complex,
                        'st_segment'=>$online->st_segment,
                        'others'=>$online->others,
                        'interpretation'=>$online->interpretation,
                        'image'=>$online->image,
                        'remarks'=>$online->remarks, 
                        'order_status'=>$online->order_status, 
                        'medtech'=>$online->medtech, 
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,  
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('laboratory_ecg')->insert([    
                        'le_id'=>$online->le_id,
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by, 
                        'ecg_test'=>$online->ecg_test,
                        'atrial_ventricular_rate'=>$online->atrial_ventricular_rate,
                        'rhythm'=>$online->rhythm,
                        'axis'=>$online->axis,
                        'p_wave'=>$online->p_wave,
                        'pr_interval'=>$online->pr_interval,
                        'qrs'=>$online->qrs,
                        'qt_interval'=>$online->qt_interval,
                        'qrs_complex'=>$online->qrs_complex,
                        'st_segment'=>$online->st_segment,
                        'others'=>$online->others,
                        'interpretation'=>$online->interpretation,
                        'image'=>$online->image,
                        'remarks'=>$online->remarks, 
                        'order_status'=>$online->order_status, 
                        'medtech'=>$online->medtech, 
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,  
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        } 

        return true;
    } 

    public static function syncLaboratoryFecal(){ 
        // syncronize laboratory_fecal_analysis table from offline to online  
        $offline_query = DB::table('laboratory_fecal_analysis')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_fecal_analysis')->where('lfa_id', $offline->lfa_id)->get();
                if(count($offline_count) > 0){  
                    if($offline->updated_at > $offline_count[0]->updated_at){ 
                        DB::connection('mysql2')->table('laboratory_fecal_analysis')->where('lfa_id', $offline->lfa_id)->update([      
                            'order_id'=>$offline->order_id, 
                            'doctor_id'=>$offline->doctor_id, 
                            'patient_id'=>$offline->patient_id, 
                            'laboratory_id'=>$offline->laboratory_id, 
                            'ward_nurse_id'=>$offline->ward_nurse_id, 
                            'case_file'=>$offline->case_file, 
                            'is_viewed'=>$offline->is_viewed, 
                            'is_processed'=>$offline->is_processed, 
                            'is_processed_by'=>$offline->is_processed_by, 
                            'is_processed_time_start'=>$offline->is_processed_time_start, 
                            'is_processed_time_end'=>$offline->is_processed_time_end, 
                            'is_pending'=>$offline->is_pending, 
                            'is_pending_reason'=>$offline->is_pending_reason, 
                            'is_pending_date'=>$offline->is_pending_date, 
                            'is_pending_by'=>$offline->is_pending_by,  
                            'fecal_analysis'=>$offline->fecal_analysis,  
                            'cellular_elements_color'=>$offline->cellular_elements_color,  
                            'cellular_elements_consistency'=>$offline->cellular_elements_consistency,  
                            'cellular_elements_pus'=>$offline->cellular_elements_pus,  
                            'cellular_elements_rbc'=>$offline->cellular_elements_rbc,  
                            'cellular_elements_fat_globules'=>$offline->cellular_elements_fat_globules,  
                            'cellular_elements_occultblood'=>$offline->cellular_elements_occultblood,  
                            'cellular_elements_bacteria'=>$offline->cellular_elements_bacteria,  
                            'cellular_elements_result'=>$offline->cellular_elements_result,  
                            'remarks'=>$offline->remarks,  
                            'order_status'=>$offline->order_status,  
                            'medtech'=>$offline->medtech,  
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,    
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);  
                    } 
                    
                    else{
                        DB::table('laboratory_fecal_analysis')->where('lfa_id', $offline_count[0]->lfa_id)->update([      
                            'order_id'=>$offline_count[0]->order_id, 
                            'doctor_id'=>$offline_count[0]->doctor_id, 
                            'patient_id'=>$offline_count[0]->patient_id, 
                            'laboratory_id'=>$offline_count[0]->laboratory_id, 
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id, 
                            'case_file'=>$offline_count[0]->case_file, 
                            'is_viewed'=>$offline_count[0]->is_viewed, 
                            'is_processed'=>$offline_count[0]->is_processed, 
                            'is_processed_by'=>$offline_count[0]->is_processed_by, 
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start, 
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end, 
                            'is_pending'=>$offline_count[0]->is_pending, 
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason, 
                            'is_pending_date'=>$offline_count[0]->is_pending_date, 
                            'is_pending_by'=>$offline_count[0]->is_pending_by,  
                            'fecal_analysis'=>$offline_count[0]->fecal_analysis,  
                            'cellular_elements_color'=>$offline_count[0]->cellular_elements_color,  
                            'cellular_elements_consistency'=>$offline_count[0]->cellular_elements_consistency,  
                            'cellular_elements_pus'=>$offline_count[0]->cellular_elements_pus,  
                            'cellular_elements_rbc'=>$offline_count[0]->cellular_elements_rbc,  
                            'cellular_elements_fat_globules'=>$offline_count[0]->cellular_elements_fat_globules,  
                            'cellular_elements_occultblood'=>$offline_count[0]->cellular_elements_occultblood,  
                            'cellular_elements_bacteria'=>$offline_count[0]->cellular_elements_bacteria,  
                            'cellular_elements_result'=>$offline_count[0]->cellular_elements_result,  
                            'remarks'=>$offline_count[0]->remarks,  
                            'order_status'=>$offline_count[0]->order_status,  
                            'medtech'=>$offline_count[0]->medtech,  
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,    
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    } 
                }
                
                else{ 
                    DB::connection('mysql2')->table('laboratory_fecal_analysis')->insert([    
                        'lfa_id'=>$offline->lfa_id,
                        'order_id'=>$offline->order_id, 
                        'doctor_id'=>$offline->doctor_id, 
                        'patient_id'=>$offline->patient_id, 
                        'laboratory_id'=>$offline->laboratory_id, 
                        'ward_nurse_id'=>$offline->ward_nurse_id, 
                        'case_file'=>$offline->case_file, 
                        'is_viewed'=>$offline->is_viewed, 
                        'is_processed'=>$offline->is_processed, 
                        'is_processed_by'=>$offline->is_processed_by, 
                        'is_processed_time_start'=>$offline->is_processed_time_start, 
                        'is_processed_time_end'=>$offline->is_processed_time_end, 
                        'is_pending'=>$offline->is_pending, 
                        'is_pending_reason'=>$offline->is_pending_reason, 
                        'is_pending_date'=>$offline->is_pending_date, 
                        'is_pending_by'=>$offline->is_pending_by,  
                        'fecal_analysis'=>$offline->fecal_analysis,  
                        'cellular_elements_color'=>$offline->cellular_elements_color,  
                        'cellular_elements_consistency'=>$offline->cellular_elements_consistency,  
                        'cellular_elements_pus'=>$offline->cellular_elements_pus,  
                        'cellular_elements_rbc'=>$offline->cellular_elements_rbc,  
                        'cellular_elements_fat_globules'=>$offline->cellular_elements_fat_globules,  
                        'cellular_elements_occultblood'=>$offline->cellular_elements_occultblood,  
                        'cellular_elements_bacteria'=>$offline->cellular_elements_bacteria,  
                        'cellular_elements_result'=>$offline->cellular_elements_result,  
                        'remarks'=>$offline->remarks,  
                        'order_status'=>$offline->order_status,  
                        'medtech'=>$offline->medtech,  
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,    
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);  
                } 
        } 

        // syncronize laboratory_fecal_analysis table from online to offline 
        $online_query = DB::connection('mysql2')->table('laboratory_fecal_analysis')->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('laboratory_fecal_analysis')->where('lfa_id', $online->lfa_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_fecal_analysis')->where('lfa_id', $online->lfa_id)->update([      
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,  
                        'fecal_analysis'=>$online->fecal_analysis,  
                        'cellular_elements_color'=>$online->cellular_elements_color,  
                        'cellular_elements_consistency'=>$online->cellular_elements_consistency,  
                        'cellular_elements_pus'=>$online->cellular_elements_pus,  
                        'cellular_elements_rbc'=>$online->cellular_elements_rbc,  
                        'cellular_elements_fat_globules'=>$online->cellular_elements_fat_globules,  
                        'cellular_elements_occultblood'=>$online->cellular_elements_occultblood,  
                        'cellular_elements_bacteria'=>$online->cellular_elements_bacteria,  
                        'cellular_elements_result'=>$online->cellular_elements_result,  
                        'remarks'=>$online->remarks,  
                        'order_status'=>$online->order_status,  
                        'medtech'=>$online->medtech,  
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,    
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('laboratory_fecal_analysis')->insert([    
                        'lfa_id'=>$online->lfa_id,
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,  
                        'fecal_analysis'=>$online->fecal_analysis,  
                        'cellular_elements_color'=>$online->cellular_elements_color,  
                        'cellular_elements_consistency'=>$online->cellular_elements_consistency,  
                        'cellular_elements_pus'=>$online->cellular_elements_pus,  
                        'cellular_elements_rbc'=>$online->cellular_elements_rbc,  
                        'cellular_elements_fat_globules'=>$online->cellular_elements_fat_globules,  
                        'cellular_elements_occultblood'=>$online->cellular_elements_occultblood,  
                        'cellular_elements_bacteria'=>$online->cellular_elements_bacteria,  
                        'cellular_elements_result'=>$online->cellular_elements_result,  
                        'remarks'=>$online->remarks,  
                        'order_status'=>$online->order_status,  
                        'medtech'=>$online->medtech,  
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,    
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        } 

        return true;

    }

    public static function syncLaboratoryFormheader($data){
        // syncronize laboratory_formheader table from offline to online 
        $offline_query = DB::table('laboratory_formheader')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_formheader')->where('lfh_id', $offline->lfh_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_formheader')->where('lfh_id', $offline->lfh_id)->update([ 
                            'management_id'=>$offline->management_id,
                            'name'=>$offline->name,
                            'address'=>$offline->address,
                            'contact_number'=>$offline->contact_number,
                            'pathologist'=>$offline->pathologist,
                            'pathologist_lcn'=>$offline->pathologist_lcn,
                            'pathologist_signature'=>$offline->pathologist_signature,
                            'chief_medtech'=>$offline->chief_medtech,
                            'chief_medtech_lci'=>$offline->chief_medtech_lci,
                            'chief_medtech_signature'=>$offline->chief_medtech_signature,
                            'medtech'=>$offline->medtech,
                            'medtect_lci'=>$offline->medtect_lci,
                            'medtect_signature'=>$offline->medtect_signature,
                            'logo'=>$offline->logo,
                            'status'=>$offline->status, 
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('laboratory_formheader')->where('lfh_id', $offline_count[0]->lfh_id)->update([ 
                            'management_id'=>$offline_count[0]->management_id,
                            'name'=>$offline_count[0]->name,
                            'address'=>$offline_count[0]->address,
                            'contact_number'=>$offline_count[0]->contact_number,
                            'pathologist'=>$offline_count[0]->pathologist,
                            'pathologist_lcn'=>$offline_count[0]->pathologist_lcn,
                            'pathologist_signature'=>$offline_count[0]->pathologist_signature,
                            'chief_medtech'=>$offline_count[0]->chief_medtech,
                            'chief_medtech_lci'=>$offline_count[0]->chief_medtech_lci,
                            'chief_medtech_signature'=>$offline_count[0]->chief_medtech_signature,
                            'medtech'=>$offline_count[0]->medtech,
                            'medtect_lci'=>$offline_count[0]->medtect_lci,
                            'medtect_signature'=>$offline_count[0]->medtect_signature,
                            'logo'=>$offline_count[0]->logo,
                            'status'=>$offline_count[0]->status, 
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }
     
                }else{
                    DB::connection('mysql2')->table('laboratory_formheader')->insert([ 
                        'lfh_id'=>$offline->lfh_id,
                        'management_id'=>$offline->management_id,
                        'name'=>$offline->name,
                        'address'=>$offline->address,
                        'contact_number'=>$offline->contact_number,
                        'pathologist'=>$offline->pathologist,
                        'pathologist_lcn'=>$offline->pathologist_lcn,
                        'pathologist_signature'=>$offline->pathologist_signature,
                        'chief_medtech'=>$offline->chief_medtech,
                        'chief_medtech_lci'=>$offline->chief_medtech_lci,
                        'chief_medtech_signature'=>$offline->chief_medtech_signature,
                        'medtech'=>$offline->medtech,
                        'medtect_lci'=>$offline->medtect_lci,
                        'medtect_signature'=>$offline->medtect_signature,
                        'logo'=>$offline->logo,
                        'status'=>$offline->status, 
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        } 

        // syncronize laboratory_formheader table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_formheader')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_formheader')->where('lfh_id', $online->lfh_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_formheader')->where('lfh_id', $online->lfh_id)->update([ 
                        'management_id'=>$online->management_id,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'contact_number'=>$online->contact_number,
                        'pathologist'=>$online->pathologist,
                        'pathologist_lcn'=>$online->pathologist_lcn,
                        'pathologist_signature'=>$online->pathologist_signature,
                        'chief_medtech'=>$online->chief_medtech,
                        'chief_medtech_lci'=>$online->chief_medtech_lci,
                        'chief_medtech_signature'=>$online->chief_medtech_signature,
                        'medtech'=>$online->medtech,
                        'medtect_lci'=>$online->medtect_lci,
                        'medtect_signature'=>$online->medtect_signature,
                        'logo'=>$online->logo,
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]);
     
                }else{
                    DB::table('laboratory_formheader')->insert([ 
                        'lfh_id'=>$online->lfh_id,
                        'management_id'=>$online->management_id,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'contact_number'=>$online->contact_number,
                        'pathologist'=>$online->pathologist,
                        'pathologist_lcn'=>$online->pathologist_lcn,
                        'pathologist_signature'=>$online->pathologist_signature,
                        'chief_medtech'=>$online->chief_medtech,
                        'chief_medtech_lci'=>$online->chief_medtech_lci,
                        'chief_medtech_signature'=>$online->chief_medtech_signature,
                        'medtech'=>$online->medtech,
                        'medtect_lci'=>$online->medtect_lci,
                        'medtect_signature'=>$online->medtect_signature,
                        'logo'=>$online->logo,
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }
 
        return true;
    }

    public static function syncLaboratoryHemathology(){
        // syncronize laboratory_hematology table from offline to online 
        $offline_query = DB::table('laboratory_hematology')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_hematology')->where('lh_id', $offline->lh_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_hematology')->where('lh_id', $offline->lh_id)->update([  
                            'order_id'=>$offline->order_id, 
                            'doctor_id'=>$offline->doctor_id, 
                            'patient_id'=>$offline->patient_id, 
                            'laboratory_id'=>$offline->laboratory_id, 
                            'ward_nurse_id'=>$offline->ward_nurse_id, 
                            'case_file'=>$offline->case_file, 
                            'is_viewed'=>$offline->is_viewed, 
                            'is_processed'=>$offline->is_processed, 
                            'is_processed_by'=>$offline->is_processed_by, 
                            'is_processed_time_start'=>$offline->is_processed_time_start, 
                            'is_processed_time_end'=>$offline->is_processed_time_end, 
                            'is_pending'=>$offline->is_pending, 
                            'is_pending_reason'=>$offline->is_pending_reason, 
                            'is_pending_date'=>$offline->is_pending_date, 
                            'is_pending_by'=>$offline->is_pending_by, 
                            'hemoglobin'=>$offline->hemoglobin, 
                            'hemoglobin_remarks'=>$offline->hemoglobin_remarks, 
                            'hematocrit'=>$offline->hematocrit, 
                            'hematocrit_remarks'=>$offline->hematocrit_remarks, 
                            'rbc'=>$offline->rbc, 
                            'rbc_remarks'=>$offline->rbc_remarks, 
                            'wbc'=>$offline->wbc, 
                            'wbc_remarks'=>$offline->wbc_remarks, 
                            'platelet_count'=>$offline->platelet_count, 
                            'platelet_count_remarks'=>$offline->platelet_count_remarks, 
                            'differential_count'=>$offline->differential_count, 
                            'differential_count_remarks'=>$offline->differential_count_remarks, 
                            'neutrophil'=>$offline->neutrophil, 
                            'neutrophil_remarks'=>$offline->neutrophil_remarks, 
                            'lymphocyte'=>$offline->lymphocyte, 
                            'lymphocyte_remarks'=>$offline->lymphocyte_remarks, 
                            'monocyte'=>$offline->monocyte, 
                            'monocyte_remarks'=>$offline->monocyte_remarks, 
                            'eosinophil'=>$offline->eosinophil, 
                            'eosinophil_remarks'=>$offline->eosinophil_remarks, 
                            'basophil'=>$offline->basophil, 
                            'basophil_remarks'=>$offline->basophil_remarks, 
                            'bands'=>$offline->bands, 
                            'bands_remarks'=>$offline->bands_remarks, 
                            'abo_blood_type_and_rh_type'=>$offline->abo_blood_type_and_rh_type, 
                            'abo_blood_type_and_rh_type_remarks'=>$offline->abo_blood_type_and_rh_type_remarks, 
                            'bleeding_time'=>$offline->bleeding_time, 
                            'bleeding_time_remarks'=>$offline->bleeding_time_remarks, 
                            'clotting_time'=>$offline->clotting_time, 
                            'clotting_time_remarks'=>$offline->clotting_time_remarks, 
                            'mcv'=>$offline->mcv, 
                            'mcv_remarks'=>$offline->mcv_remarks, 
                            'mch'=>$offline->mch, 
                            'mch_remarks'=>$offline->mch_remarks, 
                            'mchc'=>$offline->mchc, 
                            'mchc_remarks'=>$offline->mchc_remarks, 
                            'rdw'=>$offline->rdw, 
                            'rdw_remarks'=>$offline->rdw_remarks, 
                            'mpv'=>$offline->mpv, 
                            'mpv_remarks'=>$offline->mpv_remarks, 
                            'pdw'=>$offline->pdw, 
                            'pdw_remarks'=>$offline->pdw_remarks, 
                            'pct'=>$offline->pct, 
                            'pct_remarks'=>$offline->pct_remarks,  
                            'blood_typing_with_rh'=>$offline->blood_typing_with_rh, 
                            'blood_typing_with_rh_remarks'=>$offline->blood_typing_with_rh_remarks,  
                            'ct_bt'=>$offline->ct_bt, 
                            'ct_bt_remarks'=>$offline->ct_bt_remarks,  
                            'esr'=>$offline->esr, 
                            'esr_remarks'=>$offline->esr_remarks,  
                            'ferritin'=>$offline->ferritin, 
                            'ferritin_remarks'=>$offline->ferritin_remarks,  
                            'aptt'=>$offline->aptt, 
                            'aptt_remarks'=>$offline->aptt_remarks,  
                            'peripheral_smear'=>$offline->peripheral_smear, 
                            'peripheral_smear_remarks'=>$offline->peripheral_smear_remarks,  
                            'protime'=>$offline->protime, 
                            'protime_remarks'=>$offline->protime_remarks,  
                            'pathologist'=>$offline->pathologist, 
                            'medical_technologist'=>$offline->medical_technologist, 
                            'remarks'=>$offline->remarks, 
                            'order_status'=>$offline->order_status, 
                            'medtech'=>$offline->medtech, 
                            'trace_number'=>$offline->trace_number, 
                            'status'=>$offline->status, 
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at,
                        ]); 
                    } 
                    
                    else{
                        DB::table('laboratory_hematology')->where('lh_id', $offline_count[0]->lh_id)->update([   
                            'order_id'=>$offline_count[0]->order_id, 
                            'doctor_id'=>$offline_count[0]->doctor_id, 
                            'patient_id'=>$offline_count[0]->patient_id, 
                            'laboratory_id'=>$offline_count[0]->laboratory_id, 
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id, 
                            'case_file'=>$offline_count[0]->case_file, 
                            'is_viewed'=>$offline_count[0]->is_viewed, 
                            'is_processed'=>$offline_count[0]->is_processed, 
                            'is_processed_by'=>$offline_count[0]->is_processed_by, 
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start, 
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end, 
                            'is_pending'=>$offline_count[0]->is_pending, 
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason, 
                            'is_pending_date'=>$offline_count[0]->is_pending_date, 
                            'is_pending_by'=>$offline_count[0]->is_pending_by, 

                            'hemoglobin'=>$offline_count[0]->hemoglobin, 
                            'hemoglobin_remarks'=>$offline_count[0]->hemoglobin_remarks, 
                            'hematocrit'=>$offline_count[0]->hematocrit, 
                            'hematocrit_remarks'=>$offline_count[0]->hematocrit_remarks, 
                            'rbc'=>$offline_count[0]->rbc, 
                            'rbc_remarks'=>$offline_count[0]->rbc_remarks, 
                            'wbc'=>$offline_count[0]->wbc, 
                            'wbc_remarks'=>$offline_count[0]->wbc_remarks, 
                            'platelet_count'=>$offline_count[0]->platelet_count, 
                            'platelet_count_remarks'=>$offline_count[0]->platelet_count_remarks, 
                            'differential_count'=>$offline_count[0]->differential_count, 
                            'differential_count_remarks'=>$offline_count[0]->differential_count_remarks, 
                            'neutrophil'=>$offline_count[0]->neutrophil, 
                            'neutrophil_remarks'=>$offline_count[0]->neutrophil_remarks, 
                            'lymphocyte'=>$offline_count[0]->lymphocyte, 
                            'lymphocyte_remarks'=>$offline_count[0]->lymphocyte_remarks, 
                            'monocyte'=>$offline_count[0]->monocyte, 
                            'monocyte_remarks'=>$offline_count[0]->monocyte_remarks, 
                            'eosinophil'=>$offline_count[0]->eosinophil, 
                            'eosinophil_remarks'=>$offline_count[0]->eosinophil_remarks, 
                            'basophil'=>$offline_count[0]->basophil, 
                            'basophil_remarks'=>$offline_count[0]->basophil_remarks, 
                            'bands'=>$offline_count[0]->bands, 
                            'bands_remarks'=>$offline_count[0]->bands_remarks, 
                            'abo_blood_type_and_rh_type'=>$offline_count[0]->abo_blood_type_and_rh_type, 
                            'abo_blood_type_and_rh_type_remarks'=>$offline_count[0]->abo_blood_type_and_rh_type_remarks, 
                            'bleeding_time'=>$offline_count[0]->bleeding_time, 
                            'bleeding_time_remarks'=>$offline_count[0]->bleeding_time_remarks, 
                            'clotting_time'=>$offline_count[0]->clotting_time, 
                            'clotting_time_remarks'=>$offline_count[0]->clotting_time_remarks, 
                            'mcv'=>$offline_count[0]->mcv, 
                            'mcv_remarks'=>$offline_count[0]->mcv_remarks, 
                            'mch'=>$offline_count[0]->mch, 
                            'mch_remarks'=>$offline_count[0]->mch_remarks, 
                            'mchc'=>$offline_count[0]->mchc, 
                            'mchc_remarks'=>$offline_count[0]->mchc_remarks, 
                            'rdw'=>$offline_count[0]->rdw, 
                            'rdw_remarks'=>$offline_count[0]->rdw_remarks, 
                            'mpv'=>$offline_count[0]->mpv, 
                            'mpv_remarks'=>$offline_count[0]->mpv_remarks, 
                            'pdw'=>$offline_count[0]->pdw, 
                            'pdw_remarks'=>$offline_count[0]->pdw_remarks, 
                            'pct'=>$offline_count[0]->pct, 
                            'pct_remarks'=>$offline_count[0]->pct_remarks,  
                            'blood_typing_with_rh'=>$offline_count[0]->blood_typing_with_rh, 
                            'blood_typing_with_rh_remarks'=>$offline_count[0]->blood_typing_with_rh_remarks,  
                            'ct_bt'=>$offline_count[0]->ct_bt, 
                            'ct_bt_remarks'=>$offline_count[0]->ct_bt_remarks,  
                            'esr'=>$offline_count[0]->esr, 
                            'esr_remarks'=>$offline_count[0]->esr_remarks,  
                            'ferritin'=>$offline_count[0]->ferritin, 
                            'ferritin_remarks'=>$offline_count[0]->ferritin_remarks,  
                            'aptt'=>$offline_count[0]->aptt, 
                            'aptt_remarks'=>$offline_count[0]->aptt_remarks,  
                            'peripheral_smear'=>$offline_count[0]->peripheral_smear, 
                            'peripheral_smear_remarks'=>$offline_count[0]->peripheral_smear_remarks,  
                            'protime'=>$offline_count[0]->protime, 
                            'protime_remarks'=>$offline_count[0]->protime_remarks,  

                            'pathologist'=>$offline_count[0]->pathologist, 
                            'medical_technologist'=>$offline_count[0]->medical_technologist, 
                            'remarks'=>$offline_count[0]->remarks, 
                            'order_status'=>$offline_count[0]->order_status, 
                            'medtech'=>$offline_count[0]->medtech, 
                            'trace_number'=>$offline_count[0]->trace_number, 
                            'status'=>$offline_count[0]->status, 
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at,
                        ]);
    
                    }
     
                }else{
                    DB::connection('mysql2')->table('laboratory_hematology')->insert([    
                        'lh_id' => $offline->lh_id,
                        'order_id'=>$offline->order_id, 
                        'doctor_id'=>$offline->doctor_id, 
                        'patient_id'=>$offline->patient_id, 
                        'laboratory_id'=>$offline->laboratory_id, 
                        'ward_nurse_id'=>$offline->ward_nurse_id, 
                        'case_file'=>$offline->case_file, 
                        'is_viewed'=>$offline->is_viewed, 
                        'is_processed'=>$offline->is_processed, 
                        'is_processed_by'=>$offline->is_processed_by, 
                        'is_processed_time_start'=>$offline->is_processed_time_start, 
                        'is_processed_time_end'=>$offline->is_processed_time_end, 
                        'is_pending'=>$offline->is_pending, 
                        'is_pending_reason'=>$offline->is_pending_reason, 
                        'is_pending_date'=>$offline->is_pending_date, 
                        'is_pending_by'=>$offline->is_pending_by, 

                        'hemoglobin'=>$offline->hemoglobin, 
                        'hemoglobin_remarks'=>$offline->hemoglobin_remarks, 
                        'hematocrit'=>$offline->hematocrit, 
                        'hematocrit_remarks'=>$offline->hematocrit_remarks, 
                        'rbc'=>$offline->rbc, 
                        'rbc_remarks'=>$offline->rbc_remarks, 
                        'wbc'=>$offline->wbc, 
                        'wbc_remarks'=>$offline->wbc_remarks, 
                        'platelet_count'=>$offline->platelet_count, 
                        'platelet_count_remarks'=>$offline->platelet_count_remarks, 
                        'differential_count'=>$offline->differential_count, 
                        'differential_count_remarks'=>$offline->differential_count_remarks, 
                        'neutrophil'=>$offline->neutrophil, 
                        'neutrophil_remarks'=>$offline->neutrophil_remarks, 
                        'lymphocyte'=>$offline->lymphocyte, 
                        'lymphocyte_remarks'=>$offline->lymphocyte_remarks, 
                        'monocyte'=>$offline->monocyte, 
                        'monocyte_remarks'=>$offline->monocyte_remarks, 
                        'eosinophil'=>$offline->eosinophil, 
                        'eosinophil_remarks'=>$offline->eosinophil_remarks, 
                        'basophil'=>$offline->basophil, 
                        'basophil_remarks'=>$offline->basophil_remarks, 
                        'bands'=>$offline->bands, 
                        'bands_remarks'=>$offline->bands_remarks, 
                        'abo_blood_type_and_rh_type'=>$offline->abo_blood_type_and_rh_type, 
                        'abo_blood_type_and_rh_type_remarks'=>$offline->abo_blood_type_and_rh_type_remarks, 
                        'bleeding_time'=>$offline->bleeding_time, 
                        'bleeding_time_remarks'=>$offline->bleeding_time_remarks, 
                        'clotting_time'=>$offline->clotting_time, 
                        'clotting_time_remarks'=>$offline->clotting_time_remarks, 
                        'mcv'=>$offline->mcv, 
                        'mcv_remarks'=>$offline->mcv_remarks, 
                        'mch'=>$offline->mch, 
                        'mch_remarks'=>$offline->mch_remarks, 
                        'mchc'=>$offline->mchc, 
                        'mchc_remarks'=>$offline->mchc_remarks, 
                        'rdw'=>$offline->rdw, 
                        'rdw_remarks'=>$offline->rdw_remarks, 
                        'mpv'=>$offline->mpv, 
                        'mpv_remarks'=>$offline->mpv_remarks, 
                        'pdw'=>$offline->pdw, 
                        'pdw_remarks'=>$offline->pdw_remarks, 
                        'pct'=>$offline->pct, 
                        'pct_remarks'=>$offline->pct_remarks,  
                        'blood_typing_with_rh'=>$offline->blood_typing_with_rh, 
                        'blood_typing_with_rh_remarks'=>$offline->blood_typing_with_rh_remarks,  
                        'ct_bt'=>$offline->ct_bt, 
                        'ct_bt_remarks'=>$offline->ct_bt_remarks,  
                        'esr'=>$offline->esr, 
                        'esr_remarks'=>$offline->esr_remarks,  
                        'ferritin'=>$offline->ferritin, 
                        'ferritin_remarks'=>$offline->ferritin_remarks,  
                        'aptt'=>$offline->aptt, 
                        'aptt_remarks'=>$offline->aptt_remarks,  
                        'peripheral_smear'=>$offline->peripheral_smear, 
                        'peripheral_smear_remarks'=>$offline->peripheral_smear_remarks,  
                        'protime'=>$offline->protime, 
                        'protime_remarks'=>$offline->protime_remarks,  
                          
                        'pathologist'=>$offline->pathologist, 
                        'medical_technologist'=>$offline->medical_technologist, 
                        'remarks'=>$offline->remarks, 
                        'order_status'=>$offline->order_status, 
                        'medtech'=>$offline->medtech, 
                        'trace_number'=>$offline->trace_number, 
                        'status'=>$offline->status, 
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at,
                    ]); 
                } 
        } 

        // syncronize laboratory_hematology table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_hematology')->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_hematology')->where('lh_id', $online->lh_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_hematology')->where('lh_id', $online->lh_id)->update([   
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by, 

                        'hemoglobin'=>$online->hemoglobin, 
                        'hemoglobin_remarks'=>$online->hemoglobin_remarks, 
                        'hematocrit'=>$online->hematocrit, 
                        'hematocrit_remarks'=>$online->hematocrit_remarks, 
                        'rbc'=>$online->rbc, 
                        'rbc_remarks'=>$online->rbc_remarks, 
                        'wbc'=>$online->wbc, 
                        'wbc_remarks'=>$online->wbc_remarks, 
                        'platelet_count'=>$online->platelet_count, 
                        'platelet_count_remarks'=>$online->platelet_count_remarks, 
                        'differential_count'=>$online->differential_count, 
                        'differential_count_remarks'=>$online->differential_count_remarks, 
                        'neutrophil'=>$online->neutrophil, 
                        'neutrophil_remarks'=>$online->neutrophil_remarks, 
                        'lymphocyte'=>$online->lymphocyte, 
                        'lymphocyte_remarks'=>$online->lymphocyte_remarks, 
                        'monocyte'=>$online->monocyte, 
                        'monocyte_remarks'=>$online->monocyte_remarks, 
                        'eosinophil'=>$online->eosinophil, 
                        'eosinophil_remarks'=>$online->eosinophil_remarks, 
                        'basophil'=>$online->basophil, 
                        'basophil_remarks'=>$online->basophil_remarks, 
                        'bands'=>$online->bands, 
                        'bands_remarks'=>$online->bands_remarks, 
                        'abo_blood_type_and_rh_type'=>$online->abo_blood_type_and_rh_type, 
                        'abo_blood_type_and_rh_type_remarks'=>$online->abo_blood_type_and_rh_type_remarks, 
                        'bleeding_time'=>$online->bleeding_time, 
                        'bleeding_time_remarks'=>$online->bleeding_time_remarks, 
                        'clotting_time'=>$online->clotting_time, 
                        'clotting_time_remarks'=>$online->clotting_time_remarks, 
                        'mcv'=>$online->mcv, 
                        'mcv_remarks'=>$online->mcv_remarks, 
                        'mch'=>$online->mch, 
                        'mch_remarks'=>$online->mch_remarks, 
                        'mchc'=>$online->mchc, 
                        'mchc_remarks'=>$online->mchc_remarks, 
                        'rdw'=>$online->rdw, 
                        'rdw_remarks'=>$online->rdw_remarks, 
                        'mpv'=>$online->mpv, 
                        'mpv_remarks'=>$online->mpv_remarks, 
                        'pdw'=>$online->pdw, 
                        'pdw_remarks'=>$online->pdw_remarks, 
                        'pct'=>$online->pct, 
                        'pct_remarks'=>$online->pct_remarks,  
                        'blood_typing_with_rh'=>$online->blood_typing_with_rh, 
                        'blood_typing_with_rh_remarks'=>$online->blood_typing_with_rh_remarks,  
                        'ct_bt'=>$online->ct_bt, 
                        'ct_bt_remarks'=>$online->ct_bt_remarks,  
                        'esr'=>$online->esr, 
                        'esr_remarks'=>$online->esr_remarks,  
                        'ferritin'=>$online->ferritin, 
                        'ferritin_remarks'=>$online->ferritin_remarks,  
                        'aptt'=>$online->aptt, 
                        'aptt_remarks'=>$online->aptt_remarks,  
                        'peripheral_smear'=>$online->peripheral_smear, 
                        'peripheral_smear_remarks'=>$online->peripheral_smear_remarks,  
                        'protime'=>$online->protime, 
                        'protime_remarks'=>$online->protime_remarks,  




                         
                        'pathologist'=>$online->pathologist, 
                        'medical_technologist'=>$online->medical_technologist, 
                        'remarks'=>$online->remarks, 
                        'order_status'=>$online->order_status, 
                        'medtech'=>$online->medtech, 
                        'trace_number'=>$online->trace_number, 
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at,
                    ]);
     
                }else{
                    DB::table('laboratory_hematology')->insert([  
                        'lh_id' => $online->lh_id,
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by, 
                        'hemoglobin'=>$online->hemoglobin, 
                        'hematocrit'=>$online->hematocrit, 
                        'hemoglobin'=>$online->hemoglobin, 
                        'hemoglobin_remarks'=>$online->hemoglobin_remarks, 
                        'hematocrit'=>$online->hematocrit, 
                        'hematocrit_remarks'=>$online->hematocrit_remarks, 
                        'rbc'=>$online->rbc, 
                        'rbc_remarks'=>$online->rbc_remarks, 
                        'wbc'=>$online->wbc, 
                        'wbc_remarks'=>$online->wbc_remarks, 
                        'platelet_count'=>$online->platelet_count, 
                        'platelet_count_remarks'=>$online->platelet_count_remarks, 
                        'differential_count'=>$online->differential_count, 
                        'differential_count_remarks'=>$online->differential_count_remarks, 
                        'neutrophil'=>$online->neutrophil, 
                        'neutrophil_remarks'=>$online->neutrophil_remarks, 
                        'lymphocyte'=>$online->lymphocyte, 
                        'lymphocyte_remarks'=>$online->lymphocyte_remarks, 
                        'monocyte'=>$online->monocyte, 
                        'monocyte_remarks'=>$online->monocyte_remarks, 
                        'eosinophil'=>$online->eosinophil, 
                        'eosinophil_remarks'=>$online->eosinophil_remarks, 
                        'basophil'=>$online->basophil, 
                        'basophil_remarks'=>$online->basophil_remarks, 
                        'bands'=>$online->bands, 
                        'bands_remarks'=>$online->bands_remarks, 
                        'abo_blood_type_and_rh_type'=>$online->abo_blood_type_and_rh_type, 
                        'abo_blood_type_and_rh_type_remarks'=>$online->abo_blood_type_and_rh_type_remarks, 
                        'bleeding_time'=>$online->bleeding_time, 
                        'bleeding_time_remarks'=>$online->bleeding_time_remarks, 
                        'clotting_time'=>$online->clotting_time, 
                        'clotting_time_remarks'=>$online->clotting_time_remarks, 
                        'mcv'=>$online->mcv, 
                        'mcv_remarks'=>$online->mcv_remarks, 
                        'mch'=>$online->mch, 
                        'mch_remarks'=>$online->mch_remarks, 
                        'mchc'=>$online->mchc, 
                        'mchc_remarks'=>$online->mchc_remarks, 
                        'rdw'=>$online->rdw, 
                        'rdw_remarks'=>$online->rdw_remarks, 
                        'mpv'=>$online->mpv, 
                        'mpv_remarks'=>$online->mpv_remarks, 
                        'pdw'=>$online->pdw, 
                        'pdw_remarks'=>$online->pdw_remarks, 
                        'pct'=>$online->pct, 
                        'pct_remarks'=>$online->pct_remarks,  
                        'blood_typing_with_rh'=>$online->blood_typing_with_rh, 
                        'blood_typing_with_rh_remarks'=>$online->blood_typing_with_rh_remarks,  
                        'ct_bt'=>$online->ct_bt, 
                        'ct_bt_remarks'=>$online->ct_bt_remarks,  
                        'esr'=>$online->esr, 
                        'esr_remarks'=>$online->esr_remarks,  
                        'ferritin'=>$online->ferritin, 
                        'ferritin_remarks'=>$online->ferritin_remarks,  
                        'aptt'=>$online->aptt, 
                        'aptt_remarks'=>$online->aptt_remarks,  
                        'peripheral_smear'=>$online->peripheral_smear, 
                        'peripheral_smear_remarks'=>$online->peripheral_smear_remarks,  
                        'protime'=>$online->protime, 
                        'protime_remarks'=>$online->protime_remarks,  
                        

                        'pathologist'=>$online->pathologist, 
                        'medical_technologist'=>$online->medical_technologist, 
                        'remarks'=>$online->remarks, 
                        'order_status'=>$online->order_status, 
                        'medtech'=>$online->medtech, 
                        'trace_number'=>$online->trace_number, 
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at,
                    ]); 
                } 
        }
 
        return true;
    } 

    public static function syncLaboratoryHepatitisProfile(){
        // syncronize laboratory_hepatitis_profile table from offline to online 
        $offline_query = DB::table('laboratory_hepatitis_profile')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_hepatitis_profile')->where('lhp_id', $offline->lhp_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_hepatitis_profile')->where('lhp_id', $offline->lhp_id)->update([  
                            'order_id'=>$offline->order_id, 
                            'doctor_id'=>$offline->doctor_id, 
                            'patient_id'=>$offline->patient_id, 
                            'laboratory_id'=>$offline->laboratory_id, 
                            'ward_nurse_id'=>$offline->ward_nurse_id, 
                            'case_file'=>$offline->case_file, 
                            'is_viewed'=>$offline->is_viewed, 
                            'is_processed'=>$offline->is_processed, 
                            'is_processed_by'=>$offline->is_processed_by, 
                            'is_processed_time_start'=>$offline->is_processed_time_start, 
                            'is_processed_time_end'=>$offline->is_processed_time_end, 
                            'is_pending'=>$offline->is_pending, 
                            'is_pending_reason'=>$offline->is_pending_reason, 
                            'is_pending_date'=>$offline->is_pending_date, 
                            'is_pending_by'=>$offline->is_pending_by, 
                            'hbsag_quali'=>$offline->hbsag_quali,
                            'hbsag_quali_remarks'=>$offline->hbsag_quali_remarks,
                            'antihbs_quali'=>$offline->antihbs_quali,
                            'antihbs_quali_remarks'=>$offline->antihbs_quali_remarks,
                            'antihcv_quali'=>$offline->antihcv_quali,
                            'antihcv_quali_remarks'=>$offline->antihcv_quali_remarks,
                            'hbsag_quanti'=>$offline->hbsag_quanti,
                            'hbsag_quanti_remarks'=>$offline->hbsag_quanti_remarks,
                            'antihbs_quanti'=>$offline->antihbs_quanti,
                            'antihbs_quanti_remarks'=>$offline->antihbs_quanti_remarks,
                            'hbeaag'=>$offline->hbeaag,
                            'hbeaag_remarks'=>$offline->hbeaag_remarks,
                            'antihbe'=>$offline->antihbe,
                            'antihbe_remarks'=>$offline->antihbe_remarks,
                            'antihbc_igm'=>$offline->antihbc_igm,
                            'antihbc_igm_remarks'=>$offline->antihbc_igm_remarks,
                            'antihav_igm'=>$offline->antihav_igm,
                            'antihav_igm_remarks'=>$offline->antihav_igm_remarks,
                            'anti_havigm_igg'=>$offline->anti_havigm_igg,
                            'anti_havigm_igg_remarks'=>$offline->anti_havigm_igg_remarks,
                            'antihbc_iggtotal'=>$offline->antihbc_iggtotal,
                            'antihbc_iggtotal_remarks'=>$offline->antihbc_iggtotal_remarks,
                            'remarks'=>$offline->remarks, 
                            'order_status'=>$offline->order_status, 
                            'medtech'=>$offline->medtech, 
                            'trace_number'=>$offline->trace_number, 
                            'status'=>$offline->status, 
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('laboratory_hepatitis_profile')->where('lhp_id', $offline_count[0]->lhp_id)->update([   
                            'order_id'=>$offline_count[0]->order_id, 
                            'doctor_id'=>$offline_count[0]->doctor_id, 
                            'patient_id'=>$offline_count[0]->patient_id, 
                            'laboratory_id'=>$offline_count[0]->laboratory_id, 
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id, 
                            'case_file'=>$offline_count[0]->case_file, 
                            'is_viewed'=>$offline_count[0]->is_viewed, 
                            'is_processed'=>$offline_count[0]->is_processed, 
                            'is_processed_by'=>$offline_count[0]->is_processed_by, 
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start, 
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end, 
                            'is_pending'=>$offline_count[0]->is_pending, 
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason, 
                            'is_pending_date'=>$offline_count[0]->is_pending_date, 
                            'is_pending_by'=>$offline_count[0]->is_pending_by, 
                            'hbsag_quali'=>$offline_count[0]->hbsag_quali,
                            'hbsag_quali_remarks'=>$offline_count[0]->hbsag_quali_remarks,
                            'antihbs_quali'=>$offline_count[0]->antihbs_quali,
                            'antihbs_quali_remarks'=>$offline_count[0]->antihbs_quali_remarks,
                            'antihcv_quali'=>$offline_count[0]->antihcv_quali,
                            'antihcv_quali_remarks'=>$offline_count[0]->antihcv_quali_remarks,
                            'hbsag_quanti'=>$offline_count[0]->hbsag_quanti,
                            'hbsag_quanti_remarks'=>$offline_count[0]->hbsag_quanti_remarks,
                            'antihbs_quanti'=>$offline_count[0]->antihbs_quanti,
                            'antihbs_quanti_remarks'=>$offline_count[0]->antihbs_quanti_remarks,
                            'hbeaag'=>$offline_count[0]->hbeaag,
                            'hbeaag_remarks'=>$offline_count[0]->hbeaag_remarks,
                            'antihbe'=>$offline_count[0]->antihbe,
                            'antihbe_remarks'=>$offline_count[0]->antihbe_remarks,
                            'antihbc_igm'=>$offline_count[0]->antihbc_igm,
                            'antihbc_igm_remarks'=>$offline_count[0]->antihbc_igm_remarks,
                            'antihav_igm'=>$offline_count[0]->antihav_igm,
                            'antihav_igm_remarks'=>$offline_count[0]->antihav_igm_remarks,
                            'anti_havigm_igg'=>$offline_count[0]->anti_havigm_igg,
                            'anti_havigm_igg_remarks'=>$offline_count[0]->anti_havigm_igg_remarks,
                            'antihbc_iggtotal'=>$offline_count[0]->antihbc_iggtotal,
                            'antihbc_iggtotal_remarks'=>$offline_count[0]->antihbc_iggtotal_remarks,
                            'remarks'=>$offline_count[0]->remarks, 
                            'order_status'=>$offline_count[0]->order_status, 
                            'medtech'=>$offline_count[0]->medtech, 
                            'trace_number'=>$offline_count[0]->trace_number, 
                            'status'=>$offline_count[0]->status, 
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
    
                    }
     
                }else{
                    DB::connection('mysql2')->table('laboratory_hepatitis_profile')->insert([    
                        'lhp_id'=>$offline->lhp_id,
                        'order_id'=>$offline->order_id, 
                        'doctor_id'=>$offline->doctor_id, 
                        'patient_id'=>$offline->patient_id, 
                        'laboratory_id'=>$offline->laboratory_id, 
                        'ward_nurse_id'=>$offline->ward_nurse_id, 
                        'case_file'=>$offline->case_file, 
                        'is_viewed'=>$offline->is_viewed, 
                        'is_processed'=>$offline->is_processed, 
                        'is_processed_by'=>$offline->is_processed_by, 
                        'is_processed_time_start'=>$offline->is_processed_time_start, 
                        'is_processed_time_end'=>$offline->is_processed_time_end, 
                        'is_pending'=>$offline->is_pending, 
                        'is_pending_reason'=>$offline->is_pending_reason, 
                        'is_pending_date'=>$offline->is_pending_date, 
                        'is_pending_by'=>$offline->is_pending_by, 
                        'hbsag_quali'=>$offline->hbsag_quali,
                        'hbsag_quali_remarks'=>$offline->hbsag_quali_remarks,
                        'antihbs_quali'=>$offline->antihbs_quali,
                        'antihbs_quali_remarks'=>$offline->antihbs_quali_remarks,
                        'antihcv_quali'=>$offline->antihcv_quali,
                        'antihcv_quali_remarks'=>$offline->antihcv_quali_remarks,
                        'hbsag_quanti'=>$offline->hbsag_quanti,
                        'hbsag_quanti_remarks'=>$offline->hbsag_quanti_remarks,
                        'antihbs_quanti'=>$offline->antihbs_quanti,
                        'antihbs_quanti_remarks'=>$offline->antihbs_quanti_remarks,
                        'hbeaag'=>$offline->hbeaag,
                        'hbeaag_remarks'=>$offline->hbeaag_remarks,
                        'antihbe'=>$offline->antihbe,
                        'antihbe_remarks'=>$offline->antihbe_remarks,
                        'antihbc_igm'=>$offline->antihbc_igm,
                        'antihbc_igm_remarks'=>$offline->antihbc_igm_remarks,
                        'antihav_igm'=>$offline->antihav_igm,
                        'antihav_igm_remarks'=>$offline->antihav_igm_remarks,
                        'anti_havigm_igg'=>$offline->anti_havigm_igg,
                        'anti_havigm_igg_remarks'=>$offline->anti_havigm_igg_remarks,
                        'antihbc_iggtotal'=>$offline->antihbc_iggtotal,
                        'antihbc_iggtotal_remarks'=>$offline->antihbc_iggtotal_remarks,
                        'remarks'=>$offline->remarks, 
                        'order_status'=>$offline->order_status, 
                        'medtech'=>$offline->medtech, 
                        'trace_number'=>$offline->trace_number, 
                        'status'=>$offline->status, 
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        } 

        // syncronize laboratory_hepatitis_profile table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_hepatitis_profile')->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_hepatitis_profile')->where('lhp_id', $online->lhp_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_hepatitis_profile')->where('lhp_id', $online->lhp_id)->update([   
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by, 
                        'hbsag_quali'=>$online->hbsag_quali,
                        'hbsag_quali_remarks'=>$online->hbsag_quali_remarks,
                        'antihbs_quali'=>$online->antihbs_quali,
                        'antihbs_quali_remarks'=>$online->antihbs_quali_remarks,
                        'antihcv_quali'=>$online->antihcv_quali,
                        'antihcv_quali_remarks'=>$online->antihcv_quali_remarks,
                        'hbsag_quanti'=>$online->hbsag_quanti,
                        'hbsag_quanti_remarks'=>$online->hbsag_quanti_remarks,
                        'antihbs_quanti'=>$online->antihbs_quanti,
                        'antihbs_quanti_remarks'=>$online->antihbs_quanti_remarks,
                        'hbeaag'=>$online->hbeaag,
                        'hbeaag_remarks'=>$online->hbeaag_remarks,
                        'antihbe'=>$online->antihbe,
                        'antihbe_remarks'=>$online->antihbe_remarks,
                        'antihbc_igm'=>$online->antihbc_igm,
                        'antihbc_igm_remarks'=>$online->antihbc_igm_remarks,
                        'antihav_igm'=>$online->antihav_igm,
                        'antihav_igm_remarks'=>$online->antihav_igm_remarks,
                        'anti_havigm_igg'=>$online->anti_havigm_igg,
                        'anti_havigm_igg_remarks'=>$online->anti_havigm_igg_remarks,
                        'antihbc_iggtotal'=>$online->antihbc_iggtotal,
                        'antihbc_iggtotal_remarks'=>$online->antihbc_iggtotal_remarks,
                        'remarks'=>$online->remarks, 
                        'order_status'=>$online->order_status, 
                        'medtech'=>$online->medtech, 
                        'trace_number'=>$online->trace_number, 
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]);
     
                }else{
                    DB::table('laboratory_hepatitis_profile')->insert([  
                        'lhp_id' => $online->lhp_id,
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by, 
                        'hbsag_quali'=>$online->hbsag_quali,
                        'hbsag_quali_remarks'=>$online->hbsag_quali_remarks,
                        'antihbs_quali'=>$online->antihbs_quali,
                        'antihbs_quali_remarks'=>$online->antihbs_quali_remarks,
                        'antihcv_quali'=>$online->antihcv_quali,
                        'antihcv_quali_remarks'=>$online->antihcv_quali_remarks,
                        'hbsag_quanti'=>$online->hbsag_quanti,
                        'hbsag_quanti_remarks'=>$online->hbsag_quanti_remarks,
                        'antihbs_quanti'=>$online->antihbs_quanti,
                        'antihbs_quanti_remarks'=>$online->antihbs_quanti_remarks,
                        'hbeaag'=>$online->hbeaag,
                        'hbeaag_remarks'=>$online->hbeaag_remarks,
                        'antihbe'=>$online->antihbe,
                        'antihbe_remarks'=>$online->antihbe_remarks,
                        'antihbc_igm'=>$online->antihbc_igm,
                        'antihbc_igm_remarks'=>$online->antihbc_igm_remarks,
                        'antihav_igm'=>$online->antihav_igm,
                        'antihav_igm_remarks'=>$online->antihav_igm_remarks,
                        'anti_havigm_igg'=>$online->anti_havigm_igg,
                        'anti_havigm_igg_remarks'=>$online->anti_havigm_igg_remarks,
                        'antihbc_iggtotal'=>$online->antihbc_iggtotal,
                        'antihbc_iggtotal_remarks'=>$online->antihbc_iggtotal_remarks,
                        'remarks'=>$online->remarks, 
                        'order_status'=>$online->order_status, 
                        'medtech'=>$online->medtech, 
                        'trace_number'=>$online->trace_number, 
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }
 
        return true;
    } 

    public static function syncLaboratoryImmunology(){
        // syncronize laboratory_immunology table from offline to online 
        $offline_query = DB::table('laboratory_immunology')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_immunology')->where('li_id', $offline->li_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_immunology')->where('li_id', $offline->li_id)->update([  
                            'order_id'=>$offline->order_id, 
                            'doctor_id'=>$offline->doctor_id, 
                            'patient_id'=>$offline->patient_id, 
                            'laboratory_id'=>$offline->laboratory_id, 
                            'ward_nurse_id'=>$offline->ward_nurse_id, 
                            'case_file'=>$offline->case_file, 
                            'is_viewed'=>$offline->is_viewed, 
                            'is_processed'=>$offline->is_processed, 
                            'is_processed_by'=>$offline->is_processed_by, 
                            'is_processed_time_start'=>$offline->is_processed_time_start, 
                            'is_processed_time_end'=>$offline->is_processed_time_end, 
                            'is_pending'=>$offline->is_pending, 
                            'is_pending_reason'=>$offline->is_pending_reason, 
                            'is_pending_date'=>$offline->is_pending_date, 
                            'is_pending_by'=>$offline->is_pending_by, 
                            'immunology_test'=>$offline->immunology_test,
                            'alpha_fetoprotein'=>$offline->alpha_fetoprotein,
                            'remarks'=>$offline->remarks, 
                            'order_status'=>$offline->order_status, 
                            'medtech'=>$offline->medtech, 
                            'trace_number'=>$offline->trace_number, 
                            'status'=>$offline->status, 
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('laboratory_immunology')->where('li_id', $offline_count[0]->li_id)->update([   
                            'order_id'=>$offline_count[0]->order_id, 
                            'doctor_id'=>$offline_count[0]->doctor_id, 
                            'patient_id'=>$offline_count[0]->patient_id, 
                            'laboratory_id'=>$offline_count[0]->laboratory_id, 
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id, 
                            'case_file'=>$offline_count[0]->case_file, 
                            'is_viewed'=>$offline_count[0]->is_viewed, 
                            'is_processed'=>$offline_count[0]->is_processed, 
                            'is_processed_by'=>$offline_count[0]->is_processed_by, 
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start, 
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end, 
                            'is_pending'=>$offline_count[0]->is_pending, 
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason, 
                            'is_pending_date'=>$offline_count[0]->is_pending_date, 
                            'is_pending_by'=>$offline_count[0]->is_pending_by, 
                            'immunology_test'=>$offline_count[0]->immunology_test,
                            'alpha_fetoprotein'=>$offline_count[0]->alpha_fetoprotein,
                            'remarks'=>$offline_count[0]->remarks, 
                            'order_status'=>$offline_count[0]->order_status, 
                            'medtech'=>$offline_count[0]->medtech, 
                            'trace_number'=>$offline_count[0]->trace_number, 
                            'status'=>$offline_count[0]->status, 
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }
     
                }else{
                    DB::connection('mysql2')->table('laboratory_immunology')->insert([   
                        'li_id'=>$offline->li_id, 
                        'order_id'=>$offline->order_id, 
                        'doctor_id'=>$offline->doctor_id, 
                        'patient_id'=>$offline->patient_id, 
                        'laboratory_id'=>$offline->laboratory_id, 
                        'ward_nurse_id'=>$offline->ward_nurse_id, 
                        'case_file'=>$offline->case_file, 
                        'is_viewed'=>$offline->is_viewed, 
                        'is_processed'=>$offline->is_processed, 
                        'is_processed_by'=>$offline->is_processed_by, 
                        'is_processed_time_start'=>$offline->is_processed_time_start, 
                        'is_processed_time_end'=>$offline->is_processed_time_end, 
                        'is_pending'=>$offline->is_pending, 
                        'is_pending_reason'=>$offline->is_pending_reason, 
                        'is_pending_date'=>$offline->is_pending_date, 
                        'is_pending_by'=>$offline->is_pending_by, 
                        'immunology_test'=>$offline->immunology_test,
                        'alpha_fetoprotein'=>$offline->alpha_fetoprotein,
                        'remarks'=>$offline->remarks, 
                        'order_status'=>$offline->order_status, 
                        'medtech'=>$offline->medtech, 
                        'trace_number'=>$offline->trace_number, 
                        'status'=>$offline->status, 
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        } 

        // syncronize laboratory_immunology table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_immunology')->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_immunology')->where('li_id', $online->li_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_immunology')->where('li_id', $online->li_id)->update([   
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by, 
                        'immunology_test'=>$online->immunology_test,
                        'alpha_fetoprotein'=>$online->alpha_fetoprotein,
                        'remarks'=>$online->remarks, 
                        'order_status'=>$online->order_status, 
                        'medtech'=>$online->medtech, 
                        'trace_number'=>$online->trace_number, 
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]);
     
                }else{
                    DB::table('laboratory_immunology')->insert([  
                        'li_id' => $online->li_id,
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by, 
                        'immunology_test'=>$online->immunology_test,
                        'alpha_fetoprotein'=>$online->alpha_fetoprotein,
                        'remarks'=>$online->remarks, 
                        'order_status'=>$online->order_status, 
                        'medtech'=>$online->medtech, 
                        'trace_number'=>$online->trace_number, 
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }
 
        return true;
    } 

    public static function syncLaboratoryItems($data){
        // syncronize laboratory_items table from offline to online 
        $offline_query = DB::table('laboratory_items')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_items')->where('item_id', $offline->item_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('laboratory_items')->where('item_id', $offline->item_id)->update([  
                        'management_id'=>$offline->management_id, 
                        'laboratory_id'=>$offline->laboratory_id, 
                        'item'=>$offline->item, 
                        'item_haptech_id'=>$offline->item_haptech_id,
                        'description'=>$offline->description, 
                        'unit'=>$offline->unit,
                        'supplier'=>$offline->supplier, 
                        'msrp'=>$offline->msrp, 
                        'status'=>$offline->status, 
                        'created_at'=>$offline->created_at, 
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
                
                else{
                    DB::table('laboratory_items')->where('item_id', $offline_count[0]->item_id)->update([   
                        'management_id'=>$offline_count[0]->management_id, 
                        'laboratory_id'=>$offline_count[0]->laboratory_id, 
                        'item'=>$offline_count[0]->item, 
                        'item_haptech_id'=>$offline_count[0]->item_haptech_id,
                        'description'=>$offline_count[0]->description, 
                        'unit'=>$offline_count[0]->unit,
                        'supplier'=>$offline_count[0]->supplier, 
                        'msrp'=>$offline_count[0]->msrp, 
                        'status'=>$offline_count[0]->status, 
                        'created_at'=>$offline_count[0]->created_at, 
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);
                }
    
            }else{
                DB::connection('mysql2')->table('laboratory_items')->insert([  
                    'item_id' => $offline->item_id,
                    'management_id'=>$offline->management_id, 
                    'laboratory_id'=>$offline->laboratory_id, 
                    'item'=>$offline->item, 
                    'item_haptech_id'=>$offline->item_haptech_id,
                    'description'=>$offline->description, 
                    'unit'=>$offline->unit,
                    'supplier'=>$offline->supplier, 
                    'msrp'=>$offline->msrp, 
                    'status'=>$offline->status, 
                    'created_at'=>$offline->created_at, 
                    'updated_at'=>$offline->updated_at
                ]); 
            } 
        } 

        // syncronize laboratory_items table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_items')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_items')->where('item_id', $online->item_id)->get();
            if(count($online_count) > 0){
                DB::table('laboratory_items')->where('item_id', $online->item_id)->update([   
                    'management_id'=>$online->management_id, 
                    'laboratory_id'=>$online->laboratory_id, 
                    'item'=>$online->item, 
                    'item_haptech_id'=>$online->item_haptech_id,
                    'description'=>$online->description, 
                    'unit'=>$online->unit,
                    'supplier'=>$online->supplier, 
                    'msrp'=>$online->msrp, 
                    'status'=>$online->status, 
                    'created_at'=>$online->created_at, 
                    'updated_at'=>$online->updated_at
                ]); 
            } 
            else{
                DB::table('laboratory_items')->insert([   
                    'item_id' => $online->item_id,
                    'management_id'=>$online->management_id, 
                    'laboratory_id'=>$online->laboratory_id, 
                    'item'=>$online->item, 
                    'item_haptech_id'=>$online->item_haptech_id,
                    'description'=>$online->description, 
                    'unit'=>$online->unit,
                    'supplier'=>$online->supplier, 
                    'msrp'=>$online->msrp, 
                    'status'=>$online->status, 
                    'created_at'=>$online->created_at, 
                    'updated_at'=>$online->updated_at
                ]); 
            }
        }
 
        return true;
    }

    public static function syncLaboratoryItemsOrder($data){
        // syncronize laboratory_items_laborder table from offline to online 
        $offline_query = DB::table('laboratory_items_laborder')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_items_laborder')->where('lil_id', $offline->lil_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_items_laborder')->where('lil_id', $offline->lil_id)->update([  
                            'laboratory_id'=>$offline->laboratory_id, 
                            'management_id'=>$offline->management_id, 
                            'order_id'=>$offline->order_id, 
                            'category'=>$offline->category, 
                            'laborder'=>$offline->laborder, 
                            'can_be_discounted' => $offline->can_be_discounted,
                            'rate'=>$offline->rate, 
                            'mobile_rate'=>$offline->mobile_rate, 
                            'item_id'=>$offline->item_id, 
                            'item'=>$offline->item, 
                            'description'=>$offline->description, 
                            'supplier'=>$offline->supplier,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('laboratory_items_laborder')->where('lil_id', $offline_count[0]->lil_id)->update([   
                            'laboratory_id'=>$offline_count[0]->laboratory_id, 
                            'management_id'=>$offline_count[0]->management_id, 
                            'order_id'=>$offline_count[0]->order_id, 
                            'category'=>$offline_count[0]->category, 
                            'laborder'=>$offline_count[0]->laborder, 
                            'can_be_discounted' => $offline_count[0]->can_be_discounted,
                            'rate'=>$offline_count[0]->rate, 
                            'mobile_rate'=>$offline_count[0]->mobile_rate, 
                            'item_id'=>$offline_count[0]->item_id, 
                            'item'=>$offline_count[0]->item, 
                            'description'=>$offline_count[0]->description, 
                            'supplier'=>$offline_count[0]->supplier,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
    
                    }
     
                }else{
                    DB::connection('mysql2')->table('laboratory_items_laborder')->insert([    
                        'lil_id' => $offline->lil_id,
                        'laboratory_id'=>$offline->laboratory_id, 
                        'management_id'=>$offline->management_id, 
                        'order_id'=>$offline->order_id, 
                        'category'=>$offline->category, 
                        'laborder'=>$offline->laborder, 
                        'can_be_discounted' => $offline->can_be_discounted,
                        'rate'=>$offline->rate, 
                        'mobile_rate'=>$offline->mobile_rate, 
                        'item_id'=>$offline->item_id, 
                        'item'=>$offline->item, 
                        'description'=>$offline->description, 
                        'supplier'=>$offline->supplier,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        } 

        // syncronize laboratory_items_laborder table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_items_laborder')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_items_laborder')->where('lil_id', $online->lil_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_items_laborder')->where('lil_id', $online->lil_id)->update([   
                        'laboratory_id'=>$online->laboratory_id, 
                        'management_id'=>$online->management_id, 
                        'order_id'=>$online->order_id, 
                        'category'=>$online->category, 
                        'laborder'=>$online->laborder, 
                        'can_be_discounted' => $online->can_be_discounted,
                        'rate'=>$online->rate, 
                        'mobile_rate'=>$online->mobile_rate, 
                        'item_id'=>$online->item_id, 
                        'item'=>$online->item, 
                        'description'=>$online->description, 
                        'supplier'=>$online->supplier,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
                else{
                    DB::table('laboratory_items_laborder')->insert([   
                        'lil_id' => $online->lil_id,
                        'laboratory_id'=>$online->laboratory_id, 
                        'management_id'=>$online->management_id, 
                        'order_id'=>$online->order_id, 
                        'category'=>$online->category, 
                        'laborder'=>$online->laborder, 
                        'can_be_discounted' => $online->can_be_discounted,
                        'rate'=>$online->rate, 
                        'mobile_rate'=>$online->mobile_rate, 
                        'item_id'=>$online->item_id, 
                        'item'=>$online->item, 
                        'description'=>$online->description, 
                        'supplier'=>$online->supplier,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }
        }
 
        return true;
    }

    public static function syncLaboratoryItemsMonitoring($data){
        // syncronize laboratory_items_monitoring table from offline to online 
        $offline_query = DB::table('laboratory_items_monitoring')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_items_monitoring')->where('lrm_id', $offline->lrm_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('laboratory_items_monitoring')->where('lrm_id', $offline->lrm_id)->update([  
                        'item_id'=>$offline->item_id, 
                        'management_id'=>$offline->management_id, 
                        'laboratory_id'=>$offline->laboratory_id, 
                        'qty'=>$offline->qty, 
                        'dr_number'=>$offline->dr_number, 
                        'batch_number'=>$offline->batch_number, 
                        'mfg_date'=>$offline->mfg_date, 
                        'expiration_date'=>$offline->expiration_date, 
                        'type'=>$offline->type, 
                        'remarks'=>$offline->remarks,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
                
                else{
                    DB::table('laboratory_items_monitoring')->where('lrm_id', $offline_count[0]->lrm_id)->update([   
                        'item_id'=>$offline_count[0]->item_id, 
                        'management_id'=>$offline_count[0]->management_id, 
                        'laboratory_id'=>$offline_count[0]->laboratory_id, 
                        'qty'=>$offline_count[0]->qty, 
                        'dr_number'=>$offline_count[0]->dr_number, 
                        'batch_number'=>$offline_count[0]->batch_number, 
                        'mfg_date'=>$offline_count[0]->mfg_date, 
                        'expiration_date'=>$offline_count[0]->expiration_date, 
                        'type'=>$offline_count[0]->type, 
                        'remarks'=>$offline_count[0]->remarks,
                        'added_by'=>$offline_count[0]->added_by,
                        'status'=>$offline_count[0]->status,
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);

                }
    
            }else{
                DB::connection('mysql2')->table('laboratory_items_monitoring')->insert([    
                    'lrm_id' => $offline->lrm_id,
                    'item_id'=>$offline->item_id, 
                    'management_id'=>$offline->management_id, 
                    'laboratory_id'=>$offline->laboratory_id, 
                    'qty'=>$offline->qty, 
                    'dr_number'=>$offline->dr_number, 
                    'batch_number'=>$offline->batch_number, 
                    'mfg_date'=>$offline->mfg_date, 
                    'expiration_date'=>$offline->expiration_date, 
                    'type'=>$offline->type, 
                    'remarks'=>$offline->remarks,
                    'added_by'=>$offline->added_by,
                    'status'=>$offline->status,
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at
                ]); 
            } 
        } 

        // syncronize laboratory_items_monitoring table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_items_monitoring')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_items_monitoring')->where('lrm_id', $online->lrm_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_items_monitoring')->where('lrm_id', $online->lrm_id)->update([   
                        'item_id'=>$online->item_id, 
                        'management_id'=>$online->management_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'qty'=>$online->qty, 
                        'dr_number'=>$online->dr_number, 
                        'batch_number'=>$online->batch_number, 
                        'mfg_date'=>$online->mfg_date, 
                        'expiration_date'=>$online->expiration_date, 
                        'type'=>$online->type, 
                        'remarks'=>$online->remarks,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
                else{
                    DB::table('laboratory_items_monitoring')->insert([   
                        'lrm_id' => $online->lrm_id,
                        'item_id'=>$online->item_id, 
                        'management_id'=>$online->management_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'qty'=>$online->qty, 
                        'dr_number'=>$online->dr_number, 
                        'batch_number'=>$online->batch_number, 
                        'mfg_date'=>$online->mfg_date, 
                        'expiration_date'=>$online->expiration_date, 
                        'type'=>$online->type, 
                        'remarks'=>$online->remarks,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }
        }
 
        return true;
    }

    public static function syncLaboratoryList($data){
        // syncronize laboratory_list table from offline to online  
        $offline_query = DB::table('laboratory_list')->where('management_id', $data['management_id'])->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_list')->where('l_id', $offline->l_id)->get();
            if(count($offline_count) > 0){  
                if($offline->updated_at > $offline_count[0]->updated_at){ 
                    DB::connection('mysql2')->table('laboratory_list')->where('l_id', $offline->l_id)->update([     
                        'laboratory_id'=>$offline->laboratory_id,
                        'management_id'=>$offline->management_id,
                        'user_id'=>$offline->user_id,
                        'name'=>$offline->name,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'address'=>$offline->address,
                        'gender'=>$offline->gender,
                        'birthday'=>$offline->birthday,
                        'email'=>$offline->email,
                        'lic_no'=>$offline->lic_no,
                        'role'=>$offline->role,
                        'image'=>$offline->image,
                        'added_by'=>$offline->added_by,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at,
                    ]);  
                } 
                
                else{
                    DB::table('laboratory_list')->where('l_id', $offline_count[0]->l_id)->update([  
                        'laboratory_id'=>$offline_count[0]->laboratory_id,
                        'management_id'=>$offline_count[0]->management_id,
                        'user_id'=>$offline_count[0]->user_id,
                        'name'=>$offline_count[0]->name,
                        'user_fullname'=>$offline_count[0]->user_fullname,
                        'user_address'=>$offline_count[0]->user_address,
                        'address'=>$offline_count[0]->address,
                        'gender'=>$offline_count[0]->gender,
                        'birthday'=>$offline_count[0]->birthday,
                        'email'=>$offline_count[0]->email,
                        'lic_no'=>$offline_count[0]->lic_no,
                        'role'=>$offline_count[0]->role,
                        'image'=>$offline_count[0]->image,
                        'added_by'=>$offline_count[0]->added_by,
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at,
                    ]);
                } 
            }
            
            else{ 
                DB::connection('mysql2')->table('laboratory_list')->insert([  
                    'l_id'=>$offline->l_id,
                    'laboratory_id'=>$offline->laboratory_id,
                    'management_id'=>$offline->management_id,
                    'user_id'=>$offline->user_id,
                    'name'=>$offline->name,
                    'user_fullname'=>$offline->user_fullname,
                    'user_address'=>$offline->user_address,
                    'address'=>$offline->address,
                    'gender'=>$offline->gender,
                    'birthday'=>$offline->birthday,
                    'email'=>$offline->email,
                    'lic_no'=>$offline->lic_no,
                    'role'=>$offline->role,
                    'image'=>$offline->image,
                    'added_by'=>$offline->added_by,
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at, 
                ]);  
            } 
        } 
     
        // syncronize laboratory_list table from online to offline 
        $online_query = DB::connection('mysql2')->table('laboratory_list')->where('management_id', $data['management_id'])->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('laboratory_list')->where('l_id', $online->l_id)->get();
            if(count($online_count) > 0){
                DB::table('laboratory_list')->where('l_id', $online->l_id)->update([   
                    'laboratory_id'=>$online->laboratory_id,
                    'management_id'=>$online->management_id,
                    'user_id'=>$online->user_id,
                    'name'=>$online->name,
                    'user_fullname'=>$online->user_fullname,
                    'user_address'=>$online->user_address,
                    'address'=>$online->address,
                    'gender'=>$online->gender,
                    'birthday'=>$online->birthday,
                    'email'=>$online->email,
                    'lic_no'=>$online->lic_no,
                    'role'=>$online->role,
                    'image'=>$online->image,
                    'added_by'=>$online->added_by,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            }else{
                DB::table('laboratory_list')->insert([    
                    'l_id'=>$online->l_id,
                    'laboratory_id'=>$online->laboratory_id,
                    'management_id'=>$online->management_id,
                    'user_id'=>$online->user_id,
                    'name'=>$online->name,
                    'user_fullname'=>$online->user_fullname,
                    'user_address'=>$online->user_address,
                    'address'=>$online->address,
                    'gender'=>$online->gender,
                    'birthday'=>$online->birthday,
                    'email'=>$online->email,
                    'lic_no'=>$online->lic_no,
                    'role'=>$online->role,
                    'image'=>$online->image,
                    'added_by'=>$online->added_by,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            } 
        } 
        
        return true;
    } 

    public static function syncLaboratoryMedicalExam($data){
        // syncronize laboratory_medical_exam table from offline to online  
        $offline_query = DB::table('laboratory_medical_exam')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_medical_exam')->where('lme_id', $offline->lme_id)->get();
                if(count($offline_count) > 0){  
                    if($offline->updated_at > $offline_count[0]->updated_at){ 
                        DB::connection('mysql2')->table('laboratory_medical_exam')->where('lme_id', $offline->lme_id)->update([     
                            'order_id'=>$offline->order_id,
                            'doctor_id'=>$offline->doctor_id,
                            'patient_id'=>$offline->patient_id,
                            'laboratory_id'=>$offline->laboratory_id,
                            'ward_nurse_id'=>$offline->ward_nurse_id,
                            'case_file'=>$offline->case_file,
                            'is_viewed'=>$offline->is_viewed,
                            'is_processed'=>$offline->is_processed,
                            'is_processed_by'=>$offline->is_processed_by,
                            'is_processed_time_start'=>$offline->is_processed_time_start,
                            'is_processed_time_end'=>$offline->is_processed_time_end,
                            'is_pending'=>$offline->is_pending,
                            'is_pending_reason'=>$offline->is_pending_reason,
                            'is_pending_date'=>$offline->is_pending_date,
                            'is_pending_by'=>$offline->is_pending_by,
                            'medical_exam'=>$offline->medical_exam,
                            'nature_of_exam'=>$offline->nature_of_exam,
                            'pmh'=>$offline->pmh,
                            'pmh_other_specify'=>$offline->pmh_other_specify,
                            'fam_history'=>$offline->fam_history,
                            'fam_history_other_specify'=>$offline->fam_history_other_specify,
                            'prev_operation'=>$offline->prev_operation,
                            'personal_history_smoke'=>$offline->personal_history_smoke,
                            'personal_history_smoke_qty'=>$offline->personal_history_smoke_qty,
                            'personal_history_smoke_no_year'=>$offline->personal_history_smoke_no_year,
                            'personal_history_alchohol'=>$offline->personal_history_alchohol,
                            'personal_history_drug'=>$offline->personal_history_drug,
                            'allergy_foods'=>$offline->allergy_foods,
                            'allergy_drugs'=>$offline->allergy_drugs,
                            'menstrual_hist_lmp'=>$offline->menstrual_hist_lmp,
                            'menstrual_hist_pmp'=>$offline->menstrual_hist_pmp,
                            'menstrual_hist_g'=>$offline->menstrual_hist_g,
                            'menstrual_hist_p'=>$offline->menstrual_hist_p,
                            'menstrual_hist_other'=>$offline->menstrual_hist_other,
                            'medication'=>$offline->medication,
                            'pe_bp'=>$offline->pe_bp,
                            'pe_pr'=>$offline->pe_pr,
                            'pe_ht'=>$offline->pe_ht,
                            'pe_wt'=>$offline->pe_wt,
                            'pe_bmi'=>$offline->pe_bmi,
                            'pe_range'=>$offline->pe_range,
                            'visual_acuity_od_near'=>$offline->visual_acuity_od_near,
                            'visual_acuity_od_far'=>$offline->visual_acuity_od_far,
                            'visual_acuity_os_near'=>$offline->visual_acuity_os_near,
                            'visual_acuity_os_far'=>$offline->visual_acuity_os_far,
                            'pe_hearing_ad'=>$offline->pe_hearing_ad,
                            'pe_hearing_as'=>$offline->pe_hearing_as,
                            'pe_skin'=>$offline->pe_skin,
                            'pe_heent'=>$offline->pe_heent,
                            'pe_neck'=>$offline->pe_neck,
                            'pe_chest'=>$offline->pe_chest,
                            'pe_cardio'=>$offline->pe_cardio,
                            'pe_abdomen'=>$offline->pe_abdomen,
                            'pe_genitourinary'=>$offline->pe_genitourinary,
                            'pe_genitalia'=>$offline->pe_genitalia,
                            'pe_linguinal'=>$offline->pe_linguinal,
                            'pe_extremities'=>$offline->pe_extremities,
                            'pe_reflexes'=>$offline->pe_reflexes,
                            'pe_neurology'=>$offline->pe_neurology,
                            'pe_other'=>$offline->pe_other,
                            'classification_a'=>$offline->classification_a,
                            'classification_b'=>$offline->classification_b,
                            'classification_c'=>$offline->classification_c,
                            'classification_d'=>$offline->classification_d,
                            'classification_other'=>$offline->classification_other,
                            'impression'=>$offline->impression,
                            'recommendations'=>$offline->recommendations,
                            'annual_pe_reg_time'=>$offline->annual_pe_reg_time,
                            'annual_pe_vital_time'=>$offline->annual_pe_vital_time,
                            'annual_pe_cbc_time'=>$offline->annual_pe_cbc_time,
                            'annual_pe_urinalysis_time'=>$offline->annual_pe_urinalysis_time,
                            'annual_pe_fecal_time'=>$offline->annual_pe_fecal_time,
                            'annual_pe_xray_time'=>$offline->annual_pe_xray_time,
                            'annual_pe_ecg_time'=>$offline->annual_pe_ecg_time,
                            'annual_pe_papsmear_time'=>$offline->annual_pe_papsmear_time,
                            'annual_pe_eye_check_time'=>$offline->annual_pe_eye_check_time,
                            'annual_pe_dental_check_time'=>$offline->annual_pe_dental_check_time,
                            'annual_pe_exam_time'=>$offline->annual_pe_exam_time,
                            'annual_pe_exit_time'=>$offline->annual_pe_exit_time,
                            'remarks'=>$offline->remarks,
                            'order_status'=>$offline->order_status,
                            'medtech'=>$offline->medtech,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);  
                    } 
                    
                    else{
                        DB::table('laboratory_medical_exam')->where('lme_id', $offline_count[0]->lme_id)->update([  
                            'order_id'=>$offline_count[0]->order_id,
                            'doctor_id'=>$offline_count[0]->doctor_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'laboratory_id'=>$offline_count[0]->laboratory_id,
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id,
                            'case_file'=>$offline_count[0]->case_file,
                            'is_viewed'=>$offline_count[0]->is_viewed,
                            'is_processed'=>$offline_count[0]->is_processed,
                            'is_processed_by'=>$offline_count[0]->is_processed_by,
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start,
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end,
                            'is_pending'=>$offline_count[0]->is_pending,
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason,
                            'is_pending_date'=>$offline_count[0]->is_pending_date,
                            'is_pending_by'=>$offline_count[0]->is_pending_by,
                            'medical_exam'=>$offline_count[0]->medical_exam,
                            'nature_of_exam'=>$offline_count[0]->nature_of_exam,
                            'pmh'=>$offline_count[0]->pmh,
                            'pmh_other_specify'=>$offline_count[0]->pmh_other_specify,
                            'fam_history'=>$offline_count[0]->fam_history,
                            'fam_history_other_specify'=>$offline_count[0]->fam_history_other_specify,
                            'prev_operation'=>$offline_count[0]->prev_operation,
                            'personal_history_smoke'=>$offline_count[0]->personal_history_smoke,
                            'personal_history_smoke_qty'=>$offline_count[0]->personal_history_smoke_qty,
                            'personal_history_smoke_no_year'=>$offline_count[0]->personal_history_smoke_no_year,
                            'personal_history_alchohol'=>$offline_count[0]->personal_history_alchohol,
                            'personal_history_drug'=>$offline_count[0]->personal_history_drug,
                            'allergy_foods'=>$offline_count[0]->allergy_foods,
                            'allergy_drugs'=>$offline_count[0]->allergy_drugs,
                            'menstrual_hist_lmp'=>$offline_count[0]->menstrual_hist_lmp,
                            'menstrual_hist_pmp'=>$offline_count[0]->menstrual_hist_pmp,
                            'menstrual_hist_g'=>$offline_count[0]->menstrual_hist_g,
                            'menstrual_hist_p'=>$offline_count[0]->menstrual_hist_p,
                            'menstrual_hist_other'=>$offline_count[0]->menstrual_hist_other,
                            'medication'=>$offline_count[0]->medication,
                            'pe_bp'=>$offline_count[0]->pe_bp,
                            'pe_pr'=>$offline_count[0]->pe_pr,
                            'pe_ht'=>$offline_count[0]->pe_ht,
                            'pe_wt'=>$offline_count[0]->pe_wt,
                            'pe_bmi'=>$offline_count[0]->pe_bmi,
                            'pe_range'=>$offline_count[0]->pe_range,
                            'visual_acuity_od_near'=>$offline_count[0]->visual_acuity_od_near,
                            'visual_acuity_od_far'=>$offline_count[0]->visual_acuity_od_far,
                            'visual_acuity_os_near'=>$offline_count[0]->visual_acuity_os_near,
                            'visual_acuity_os_far'=>$offline_count[0]->visual_acuity_os_far,
                            'pe_hearing_ad'=>$offline_count[0]->pe_hearing_ad,
                            'pe_hearing_as'=>$offline_count[0]->pe_hearing_as,
                            'pe_skin'=>$offline_count[0]->pe_skin,
                            'pe_heent'=>$offline_count[0]->pe_heent,
                            'pe_neck'=>$offline_count[0]->pe_neck,
                            'pe_chest'=>$offline_count[0]->pe_chest,
                            'pe_cardio'=>$offline_count[0]->pe_cardio,
                            'pe_abdomen'=>$offline_count[0]->pe_abdomen,
                            'pe_genitourinary'=>$offline_count[0]->pe_genitourinary,
                            'pe_genitalia'=>$offline_count[0]->pe_genitalia,
                            'pe_linguinal'=>$offline_count[0]->pe_linguinal,
                            'pe_extremities'=>$offline_count[0]->pe_extremities,
                            'pe_reflexes'=>$offline_count[0]->pe_reflexes,
                            'pe_neurology'=>$offline_count[0]->pe_neurology,
                            'pe_other'=>$offline_count[0]->pe_other,
                            'classification_a'=>$offline_count[0]->classification_a,
                            'classification_b'=>$offline_count[0]->classification_b,
                            'classification_c'=>$offline_count[0]->classification_c,
                            'classification_d'=>$offline_count[0]->classification_d,
                            'classification_other'=>$offline_count[0]->classification_other,
                            'impression'=>$offline_count[0]->impression,
                            'recommendations'=>$offline_count[0]->recommendations,
                            'annual_pe_reg_time'=>$offline_count[0]->annual_pe_reg_time,
                            'annual_pe_vital_time'=>$offline_count[0]->annual_pe_vital_time,
                            'annual_pe_cbc_time'=>$offline_count[0]->annual_pe_cbc_time,
                            'annual_pe_urinalysis_time'=>$offline_count[0]->annual_pe_urinalysis_time,
                            'annual_pe_fecal_time'=>$offline_count[0]->annual_pe_fecal_time,
                            'annual_pe_xray_time'=>$offline_count[0]->annual_pe_xray_time,
                            'annual_pe_ecg_time'=>$offline_count[0]->annual_pe_ecg_time,
                            'annual_pe_papsmear_time'=>$offline_count[0]->annual_pe_papsmear_time,
                            'annual_pe_eye_check_time'=>$offline_count[0]->annual_pe_eye_check_time,
                            'annual_pe_dental_check_time'=>$offline_count[0]->annual_pe_dental_check_time,
                            'annual_pe_exam_time'=>$offline_count[0]->annual_pe_exam_time,
                            'annual_pe_exit_time'=>$offline_count[0]->annual_pe_exit_time,
                            'remarks'=>$offline_count[0]->remarks,
                            'order_status'=>$offline_count[0]->order_status,
                            'medtech'=>$offline_count[0]->medtech,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    } 
                }
                
                else{ 
                    DB::connection('mysql2')->table('laboratory_medical_exam')->insert([  
                        'lme_id'=>$offline->lme_id,
                        'order_id'=>$offline->order_id,
                        'doctor_id'=>$offline->doctor_id,
                        'patient_id'=>$offline->patient_id,
                        'laboratory_id'=>$offline->laboratory_id,
                        'ward_nurse_id'=>$offline->ward_nurse_id,
                        'case_file'=>$offline->case_file,
                        'is_viewed'=>$offline->is_viewed,
                        'is_processed'=>$offline->is_processed,
                        'is_processed_by'=>$offline->is_processed_by,
                        'is_processed_time_start'=>$offline->is_processed_time_start,
                        'is_processed_time_end'=>$offline->is_processed_time_end,
                        'is_pending'=>$offline->is_pending,
                        'is_pending_reason'=>$offline->is_pending_reason,
                        'is_pending_date'=>$offline->is_pending_date,
                        'is_pending_by'=>$offline->is_pending_by,
                        'medical_exam'=>$offline->medical_exam,
                        'nature_of_exam'=>$offline->nature_of_exam,
                        'pmh'=>$offline->pmh,
                        'pmh_other_specify'=>$offline->pmh_other_specify,
                        'fam_history'=>$offline->fam_history,
                        'fam_history_other_specify'=>$offline->fam_history_other_specify,
                        'prev_operation'=>$offline->prev_operation,
                        'personal_history_smoke'=>$offline->personal_history_smoke,
                        'personal_history_smoke_qty'=>$offline->personal_history_smoke_qty,
                        'personal_history_smoke_no_year'=>$offline->personal_history_smoke_no_year,
                        'personal_history_alchohol'=>$offline->personal_history_alchohol,
                        'personal_history_drug'=>$offline->personal_history_drug,
                        'allergy_foods'=>$offline->allergy_foods,
                        'allergy_drugs'=>$offline->allergy_drugs,
                        'menstrual_hist_lmp'=>$offline->menstrual_hist_lmp,
                        'menstrual_hist_pmp'=>$offline->menstrual_hist_pmp,
                        'menstrual_hist_g'=>$offline->menstrual_hist_g,
                        'menstrual_hist_p'=>$offline->menstrual_hist_p,
                        'menstrual_hist_other'=>$offline->menstrual_hist_other,
                        'medication'=>$offline->medication,
                        'pe_bp'=>$offline->pe_bp,
                        'pe_pr'=>$offline->pe_pr,
                        'pe_ht'=>$offline->pe_ht,
                        'pe_wt'=>$offline->pe_wt,
                        'pe_bmi'=>$offline->pe_bmi,
                        'pe_range'=>$offline->pe_range,
                        'visual_acuity_od_near'=>$offline->visual_acuity_od_near,
                        'visual_acuity_od_far'=>$offline->visual_acuity_od_far,
                        'visual_acuity_os_near'=>$offline->visual_acuity_os_near,
                        'visual_acuity_os_far'=>$offline->visual_acuity_os_far,
                        'pe_hearing_ad'=>$offline->pe_hearing_ad,
                        'pe_hearing_as'=>$offline->pe_hearing_as,
                        'pe_skin'=>$offline->pe_skin,
                        'pe_heent'=>$offline->pe_heent,
                        'pe_neck'=>$offline->pe_neck,
                        'pe_chest'=>$offline->pe_chest,
                        'pe_cardio'=>$offline->pe_cardio,
                        'pe_abdomen'=>$offline->pe_abdomen,
                        'pe_genitourinary'=>$offline->pe_genitourinary,
                        'pe_genitalia'=>$offline->pe_genitalia,
                        'pe_linguinal'=>$offline->pe_linguinal,
                        'pe_extremities'=>$offline->pe_extremities,
                        'pe_reflexes'=>$offline->pe_reflexes,
                        'pe_neurology'=>$offline->pe_neurology,
                        'pe_other'=>$offline->pe_other,
                        'classification_a'=>$offline->classification_a,
                        'classification_b'=>$offline->classification_b,
                        'classification_c'=>$offline->classification_c,
                        'classification_d'=>$offline->classification_d,
                        'classification_other'=>$offline->classification_other,
                        'impression'=>$offline->impression,
                        'recommendations'=>$offline->recommendations,
                        'annual_pe_reg_time'=>$offline->annual_pe_reg_time,
                        'annual_pe_vital_time'=>$offline->annual_pe_vital_time,
                        'annual_pe_cbc_time'=>$offline->annual_pe_cbc_time,
                        'annual_pe_urinalysis_time'=>$offline->annual_pe_urinalysis_time,
                        'annual_pe_fecal_time'=>$offline->annual_pe_fecal_time,
                        'annual_pe_xray_time'=>$offline->annual_pe_xray_time,
                        'annual_pe_ecg_time'=>$offline->annual_pe_ecg_time,
                        'annual_pe_papsmear_time'=>$offline->annual_pe_papsmear_time,
                        'annual_pe_eye_check_time'=>$offline->annual_pe_eye_check_time,
                        'annual_pe_dental_check_time'=>$offline->annual_pe_dental_check_time,
                        'annual_pe_exam_time'=>$offline->annual_pe_exam_time,
                        'annual_pe_exit_time'=>$offline->annual_pe_exit_time,
                        'remarks'=>$offline->remarks,
                        'order_status'=>$offline->order_status,
                        'medtech'=>$offline->medtech,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);  
                } 
        } 
     
        // syncronize laboratory_medical_exam table from online to offline 
        $online_query = DB::connection('mysql2')->table('laboratory_medical_exam')->get();  
        foreach($online_query as $online){  
            $online_count = DB::table('laboratory_medical_exam')->where('lme_id', $online->lme_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_medical_exam')->where('lme_id', $online->lme_id)->update([   
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'laboratory_id'=>$online->laboratory_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'medical_exam'=>$online->medical_exam,
                        'nature_of_exam'=>$online->nature_of_exam,
                        'pmh'=>$online->pmh,
                        'pmh_other_specify'=>$online->pmh_other_specify,
                        'fam_history'=>$online->fam_history,
                        'fam_history_other_specify'=>$online->fam_history_other_specify,
                        'prev_operation'=>$online->prev_operation,
                        'personal_history_smoke'=>$online->personal_history_smoke,
                        'personal_history_smoke_qty'=>$online->personal_history_smoke_qty,
                        'personal_history_smoke_no_year'=>$online->personal_history_smoke_no_year,
                        'personal_history_alchohol'=>$online->personal_history_alchohol,
                        'personal_history_drug'=>$online->personal_history_drug,
                        'allergy_foods'=>$online->allergy_foods,
                        'allergy_drugs'=>$online->allergy_drugs,
                        'menstrual_hist_lmp'=>$online->menstrual_hist_lmp,
                        'menstrual_hist_pmp'=>$online->menstrual_hist_pmp,
                        'menstrual_hist_g'=>$online->menstrual_hist_g,
                        'menstrual_hist_p'=>$online->menstrual_hist_p,
                        'menstrual_hist_other'=>$online->menstrual_hist_other,
                        'medication'=>$online->medication,
                        'pe_bp'=>$online->pe_bp,
                        'pe_pr'=>$online->pe_pr,
                        'pe_ht'=>$online->pe_ht,
                        'pe_wt'=>$online->pe_wt,
                        'pe_bmi'=>$online->pe_bmi,
                        'pe_range'=>$online->pe_range,
                        'visual_acuity_od_near'=>$online->visual_acuity_od_near,
                        'visual_acuity_od_far'=>$online->visual_acuity_od_far,
                        'visual_acuity_os_near'=>$online->visual_acuity_os_near,
                        'visual_acuity_os_far'=>$online->visual_acuity_os_far,
                        'pe_hearing_ad'=>$online->pe_hearing_ad,
                        'pe_hearing_as'=>$online->pe_hearing_as,
                        'pe_skin'=>$online->pe_skin,
                        'pe_heent'=>$online->pe_heent,
                        'pe_neck'=>$online->pe_neck,
                        'pe_chest'=>$online->pe_chest,
                        'pe_cardio'=>$online->pe_cardio,
                        'pe_abdomen'=>$online->pe_abdomen,
                        'pe_genitourinary'=>$online->pe_genitourinary,
                        'pe_genitalia'=>$online->pe_genitalia,
                        'pe_linguinal'=>$online->pe_linguinal,
                        'pe_extremities'=>$online->pe_extremities,
                        'pe_reflexes'=>$online->pe_reflexes,
                        'pe_neurology'=>$online->pe_neurology,
                        'pe_other'=>$online->pe_other,
                        'classification_a'=>$online->classification_a,
                        'classification_b'=>$online->classification_b,
                        'classification_c'=>$online->classification_c,
                        'classification_d'=>$online->classification_d,
                        'classification_other'=>$online->classification_other,
                        'impression'=>$online->impression,
                        'recommendations'=>$online->recommendations,
                        'annual_pe_reg_time'=>$online->annual_pe_reg_time,
                        'annual_pe_vital_time'=>$online->annual_pe_vital_time,
                        'annual_pe_cbc_time'=>$online->annual_pe_cbc_time,
                        'annual_pe_urinalysis_time'=>$online->annual_pe_urinalysis_time,
                        'annual_pe_fecal_time'=>$online->annual_pe_fecal_time,
                        'annual_pe_xray_time'=>$online->annual_pe_xray_time,
                        'annual_pe_ecg_time'=>$online->annual_pe_ecg_time,
                        'annual_pe_papsmear_time'=>$online->annual_pe_papsmear_time,
                        'annual_pe_eye_check_time'=>$online->annual_pe_eye_check_time,
                        'annual_pe_dental_check_time'=>$online->annual_pe_dental_check_time,
                        'annual_pe_exam_time'=>$online->annual_pe_exam_time,
                        'annual_pe_exit_time'=>$online->annual_pe_exit_time,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('laboratory_medical_exam')->insert([    
                        'lme_id'=>$online->lme_id,
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'laboratory_id'=>$online->laboratory_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'medical_exam'=>$online->medical_exam,
                        'nature_of_exam'=>$online->nature_of_exam,
                        'pmh'=>$online->pmh,
                        'pmh_other_specify'=>$online->pmh_other_specify,
                        'fam_history'=>$online->fam_history,
                        'fam_history_other_specify'=>$online->fam_history_other_specify,
                        'prev_operation'=>$online->prev_operation,
                        'personal_history_smoke'=>$online->personal_history_smoke,
                        'personal_history_smoke_qty'=>$online->personal_history_smoke_qty,
                        'personal_history_smoke_no_year'=>$online->personal_history_smoke_no_year,
                        'personal_history_alchohol'=>$online->personal_history_alchohol,
                        'personal_history_drug'=>$online->personal_history_drug,
                        'allergy_foods'=>$online->allergy_foods,
                        'allergy_drugs'=>$online->allergy_drugs,
                        'menstrual_hist_lmp'=>$online->menstrual_hist_lmp,
                        'menstrual_hist_pmp'=>$online->menstrual_hist_pmp,
                        'menstrual_hist_g'=>$online->menstrual_hist_g,
                        'menstrual_hist_p'=>$online->menstrual_hist_p,
                        'menstrual_hist_other'=>$online->menstrual_hist_other,
                        'medication'=>$online->medication,
                        'pe_bp'=>$online->pe_bp,
                        'pe_pr'=>$online->pe_pr,
                        'pe_ht'=>$online->pe_ht,
                        'pe_wt'=>$online->pe_wt,
                        'pe_bmi'=>$online->pe_bmi,
                        'pe_range'=>$online->pe_range,
                        'visual_acuity_od_near'=>$online->visual_acuity_od_near,
                        'visual_acuity_od_far'=>$online->visual_acuity_od_far,
                        'visual_acuity_os_near'=>$online->visual_acuity_os_near,
                        'visual_acuity_os_far'=>$online->visual_acuity_os_far,
                        'pe_hearing_ad'=>$online->pe_hearing_ad,
                        'pe_hearing_as'=>$online->pe_hearing_as,
                        'pe_skin'=>$online->pe_skin,
                        'pe_heent'=>$online->pe_heent,
                        'pe_neck'=>$online->pe_neck,
                        'pe_chest'=>$online->pe_chest,
                        'pe_cardio'=>$online->pe_cardio,
                        'pe_abdomen'=>$online->pe_abdomen,
                        'pe_genitourinary'=>$online->pe_genitourinary,
                        'pe_genitalia'=>$online->pe_genitalia,
                        'pe_linguinal'=>$online->pe_linguinal,
                        'pe_extremities'=>$online->pe_extremities,
                        'pe_reflexes'=>$online->pe_reflexes,
                        'pe_neurology'=>$online->pe_neurology,
                        'pe_other'=>$online->pe_other,
                        'classification_a'=>$online->classification_a,
                        'classification_b'=>$online->classification_b,
                        'classification_c'=>$online->classification_c,
                        'classification_d'=>$online->classification_d,
                        'classification_other'=>$online->classification_other,
                        'impression'=>$online->impression,
                        'recommendations'=>$online->recommendations,
                        'annual_pe_reg_time'=>$online->annual_pe_reg_time,
                        'annual_pe_vital_time'=>$online->annual_pe_vital_time,
                        'annual_pe_cbc_time'=>$online->annual_pe_cbc_time,
                        'annual_pe_urinalysis_time'=>$online->annual_pe_urinalysis_time,
                        'annual_pe_fecal_time'=>$online->annual_pe_fecal_time,
                        'annual_pe_xray_time'=>$online->annual_pe_xray_time,
                        'annual_pe_ecg_time'=>$online->annual_pe_ecg_time,
                        'annual_pe_papsmear_time'=>$online->annual_pe_papsmear_time,
                        'annual_pe_eye_check_time'=>$online->annual_pe_eye_check_time,
                        'annual_pe_dental_check_time'=>$online->annual_pe_dental_check_time,
                        'annual_pe_exam_time'=>$online->annual_pe_exam_time,
                        'annual_pe_exit_time'=>$online->annual_pe_exit_time,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        } 
        
        return true;
    } 

    public static function syncLaboratoryMicroscopy(){
        // syncronize laboratory_microscopy table from offline to online 
        $offline_query = DB::table('laboratory_microscopy')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_microscopy')->where('lm_id', $offline->lm_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('laboratory_microscopy')->where('lm_id', $offline->lm_id)->update([  
                        'order_id'=>$offline->order_id, 
                        'doctor_id'=>$offline->doctor_id, 
                        'patient_id'=>$offline->patient_id, 
                        'laboratory_id'=>$offline->laboratory_id,   
                        'is_viewed'=>$offline->is_viewed, 
                        'is_processed'=>$offline->is_processed, 
                        'is_processed_by'=>$offline->is_processed_by, 
                        'is_processed_time_start'=>$offline->is_processed_time_start, 
                        'is_processed_time_end'=>$offline->is_processed_time_end, 
                        'is_pending'=>$offline->is_pending, 
                        'is_pending_reason'=>$offline->is_pending_reason, 
                        'is_pending_date'=>$offline->is_pending_date, 
                        'is_pending_by'=>$offline->is_pending_by,  
                        'spicemen'=>$offline->spicemen, 
                        'chemical_test'=>$offline->chemical_test, 
                        'chemical_test_color'=>$offline->chemical_test_color, 
                        'chemical_test_transparency'=>$offline->chemical_test_transparency, 
                        'chemical_test_ph'=>$offline->chemical_test_ph, 
                        'chemical_test_spicific_gravity'=>$offline->chemical_test_spicific_gravity, 
                        'chemical_test_glucose'=>$offline->chemical_test_glucose, 
                        'chemical_test_albumin'=>$offline->chemical_test_albumin, 
                        'microscopic_test'=>$offline->microscopic_test, 
                        'microscopic_test_squamous'=>$offline->microscopic_test_squamous, 
                        'microscopic_test_pus'=>$offline->microscopic_test_pus, 
                        'microscopic_test_redblood'=>$offline->microscopic_test_redblood, 
                        'microscopic_test_hyaline'=>$offline->microscopic_test_hyaline, 
                        'microscopic_test_wbc'=>$offline->microscopic_test_wbc, 
                        'microscopic_test_rbc'=>$offline->microscopic_test_rbc, 
                        'microscopic_test_fine_granular'=>$offline->microscopic_test_fine_granular, 
                        'microscopic_test_coarse_granular'=>$offline->microscopic_test_coarse_granular, 
                        'microscopic_test_calcium_oxalate'=>$offline->microscopic_test_calcium_oxalate, 
                        'microscopic_test_triple_phospahte'=>$offline->microscopic_test_triple_phospahte, 
                        'microscopic_test_leucine_tyrosine'=>$offline->microscopic_test_leucine_tyrosine, 
                        'microscopic_test_ammonium_biurate'=>$offline->microscopic_test_ammonium_biurate, 
                        'microscopic_test_amorphous_urates'=>$offline->microscopic_test_amorphous_urates, 
                        'microscopic_test_amorphous_phosphates'=>$offline->microscopic_test_amorphous_phosphates, 
                        'microscopic_test_uricacid'=>$offline->microscopic_test_uricacid, 
                        'microscopic_test_mucus_thread'=>$offline->microscopic_test_mucus_thread, 
                        'microscopic_test_bacteria'=>$offline->microscopic_test_bacteria, 
                        'microscopic_test_yeast'=>$offline->microscopic_test_yeast, 
                        'pregnancy_test_hcg'=>$offline->pregnancy_test_hcg, 
                        'pregnancy_test_hcg_result'=>$offline->pregnancy_test_hcg_result, 
                        'micral_test'=>$offline->micral_test, 
                        'micral_test_result'=>$offline->micral_test_result, 
                        'occult_blood_test'=>$offline->occult_blood_test, 
                        'occult_blood_test_result'=>$offline->occult_blood_test_result, 
                        'seminalysis_test'=>$offline->seminalysis_test, 
                        'seminalysis_result'=>$offline->seminalysis_result, 
                        'grams_stain'=>$offline->grams_stain, 
                        'grams_stain_result'=>$offline->grams_stain_result, 
                        'afb_stain'=>$offline->afb_stain, 
                        'afb_stain_result'=>$offline->afb_stain_result,
                        'order_status'=>$offline->order_status, 
                        'trace_number'=>$offline->trace_number,
                        'order_remarks'=>$offline->order_remarks, 
                        'medtech'=>$offline->medtech, 
                        'result_remarks'=>$offline->result_remarks, 
                        'status'=>$offline->status, 
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
                
                else{
                    DB::table('laboratory_microscopy')->where('lm_id', $offline_count[0]->lm_id)->update([    
                        'order_id'=>$offline_count[0]->order_id, 
                        'doctor_id'=>$offline_count[0]->doctor_id, 
                        'patient_id'=>$offline_count[0]->patient_id, 
                        'laboratory_id'=>$offline_count[0]->laboratory_id,   
                        'is_viewed'=>$offline_count[0]->is_viewed, 
                        'is_processed'=>$offline_count[0]->is_processed, 
                        'is_processed_by'=>$offline_count[0]->is_processed_by, 
                        'is_processed_time_start'=>$offline_count[0]->is_processed_time_start, 
                        'is_processed_time_end'=>$offline_count[0]->is_processed_time_end, 
                        'is_pending'=>$offline_count[0]->is_pending, 
                        'is_pending_reason'=>$offline_count[0]->is_pending_reason, 
                        'is_pending_date'=>$offline_count[0]->is_pending_date, 
                        'is_pending_by'=>$offline_count[0]->is_pending_by,  
                        'spicemen'=>$offline_count[0]->spicemen, 
                        'chemical_test'=>$offline_count[0]->chemical_test, 
                        'chemical_test_color'=>$offline_count[0]->chemical_test_color, 
                        'chemical_test_transparency'=>$offline_count[0]->chemical_test_transparency, 
                        'chemical_test_ph'=>$offline_count[0]->chemical_test_ph, 
                        'chemical_test_spicific_gravity'=>$offline_count[0]->chemical_test_spicific_gravity, 
                        'chemical_test_glucose'=>$offline_count[0]->chemical_test_glucose, 
                        'chemical_test_albumin'=>$offline_count[0]->chemical_test_albumin, 
                        'microscopic_test'=>$offline_count[0]->microscopic_test, 
                        'microscopic_test_squamous'=>$offline_count[0]->microscopic_test_squamous, 
                        'microscopic_test_pus'=>$offline_count[0]->microscopic_test_pus, 
                        'microscopic_test_redblood'=>$offline_count[0]->microscopic_test_redblood, 
                        'microscopic_test_hyaline'=>$offline_count[0]->microscopic_test_hyaline, 
                        'microscopic_test_wbc'=>$offline_count[0]->microscopic_test_wbc, 
                        'microscopic_test_rbc'=>$offline_count[0]->microscopic_test_rbc, 
                        'microscopic_test_fine_granular'=>$offline_count[0]->microscopic_test_fine_granular, 
                        'microscopic_test_coarse_granular'=>$offline_count[0]->microscopic_test_coarse_granular, 
                        'microscopic_test_calcium_oxalate'=>$offline_count[0]->microscopic_test_calcium_oxalate, 
                        'microscopic_test_triple_phospahte'=>$offline_count[0]->microscopic_test_triple_phospahte, 
                        'microscopic_test_leucine_tyrosine'=>$offline_count[0]->microscopic_test_leucine_tyrosine, 
                        'microscopic_test_ammonium_biurate'=>$offline_count[0]->microscopic_test_ammonium_biurate, 
                        'microscopic_test_amorphous_urates'=>$offline_count[0]->microscopic_test_amorphous_urates, 
                        'microscopic_test_amorphous_phosphates'=>$offline_count[0]->microscopic_test_amorphous_phosphates, 
                        'microscopic_test_uricacid'=>$offline_count[0]->microscopic_test_uricacid, 
                        'microscopic_test_mucus_thread'=>$offline_count[0]->microscopic_test_mucus_thread, 
                        'microscopic_test_bacteria'=>$offline_count[0]->microscopic_test_bacteria, 
                        'microscopic_test_yeast'=>$offline_count[0]->microscopic_test_yeast, 
                        'pregnancy_test_hcg'=>$offline_count[0]->pregnancy_test_hcg, 
                        'pregnancy_test_hcg_result'=>$offline_count[0]->pregnancy_test_hcg_result, 
                        'micral_test'=>$offline_count[0]->micral_test, 
                        'micral_test_result'=>$offline_count[0]->micral_test_result, 
                        'occult_blood_test'=>$offline_count[0]->occult_blood_test, 
                        'occult_blood_test_result'=>$offline_count[0]->occult_blood_test_result, 
                        'seminalysis_test'=>$offline_count[0]->seminalysis_test, 
                        'seminalysis_result'=>$offline_count[0]->seminalysis_result, 
                        'grams_stain'=>$offline_count[0]->grams_stain, 
                        'grams_stain_result'=>$offline_count[0]->grams_stain_result, 
                        'afb_stain'=>$offline_count[0]->afb_stain, 
                        'afb_stain_result'=>$offline_count[0]->afb_stain_result,
                        'order_status'=>$offline_count[0]->order_status, 
                        'trace_number'=>$offline_count[0]->trace_number,
                        'order_remarks'=>$offline_count[0]->order_remarks, 
                        'medtech'=>$offline_count[0]->medtech, 
                        'result_remarks'=>$offline_count[0]->result_remarks, 
                        'status'=>$offline_count[0]->status, 
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);

                }
    
            }else{
                DB::connection('mysql2')->table('laboratory_microscopy')->insert([    
                    'lm_id' => $offline->lm_id,
                    'order_id'=>$offline->order_id, 
                    'doctor_id'=>$offline->doctor_id, 
                    'patient_id'=>$offline->patient_id, 
                    'laboratory_id'=>$offline->laboratory_id,   
                    'is_viewed'=>$offline->is_viewed, 
                    'is_processed'=>$offline->is_processed, 
                    'is_processed_by'=>$offline->is_processed_by, 
                    'is_processed_time_start'=>$offline->is_processed_time_start, 
                    'is_processed_time_end'=>$offline->is_processed_time_end, 
                    'is_pending'=>$offline->is_pending, 
                    'is_pending_reason'=>$offline->is_pending_reason, 
                    'is_pending_date'=>$offline->is_pending_date, 
                    'is_pending_by'=>$offline->is_pending_by,  
                    'spicemen'=>$offline->spicemen, 
                    'chemical_test'=>$offline->chemical_test, 
                    'chemical_test_color'=>$offline->chemical_test_color, 
                    'chemical_test_transparency'=>$offline->chemical_test_transparency, 
                    'chemical_test_ph'=>$offline->chemical_test_ph, 
                    'chemical_test_spicific_gravity'=>$offline->chemical_test_spicific_gravity, 
                    'chemical_test_glucose'=>$offline->chemical_test_glucose, 
                    'chemical_test_albumin'=>$offline->chemical_test_albumin, 
                    'microscopic_test'=>$offline->microscopic_test, 
                    'microscopic_test_squamous'=>$offline->microscopic_test_squamous, 
                    'microscopic_test_pus'=>$offline->microscopic_test_pus, 
                    'microscopic_test_redblood'=>$offline->microscopic_test_redblood, 
                    'microscopic_test_hyaline'=>$offline->microscopic_test_hyaline, 
                    'microscopic_test_wbc'=>$offline->microscopic_test_wbc, 
                    'microscopic_test_rbc'=>$offline->microscopic_test_rbc, 
                    'microscopic_test_fine_granular'=>$offline->microscopic_test_fine_granular, 
                    'microscopic_test_coarse_granular'=>$offline->microscopic_test_coarse_granular, 
                    'microscopic_test_calcium_oxalate'=>$offline->microscopic_test_calcium_oxalate, 
                    'microscopic_test_triple_phospahte'=>$offline->microscopic_test_triple_phospahte, 
                    'microscopic_test_leucine_tyrosine'=>$offline->microscopic_test_leucine_tyrosine, 
                    'microscopic_test_ammonium_biurate'=>$offline->microscopic_test_ammonium_biurate, 
                    'microscopic_test_amorphous_urates'=>$offline->microscopic_test_amorphous_urates, 
                    'microscopic_test_amorphous_phosphates'=>$offline->microscopic_test_amorphous_phosphates, 
                    'microscopic_test_uricacid'=>$offline->microscopic_test_uricacid, 
                    'microscopic_test_mucus_thread'=>$offline->microscopic_test_mucus_thread, 
                    'microscopic_test_bacteria'=>$offline->microscopic_test_bacteria, 
                    'microscopic_test_yeast'=>$offline->microscopic_test_yeast, 
                    'pregnancy_test_hcg'=>$offline->pregnancy_test_hcg, 
                    'pregnancy_test_hcg_result'=>$offline->pregnancy_test_hcg_result, 
                    'micral_test'=>$offline->micral_test, 
                    'micral_test_result'=>$offline->micral_test_result, 
                    'occult_blood_test'=>$offline->occult_blood_test, 
                    'occult_blood_test_result'=>$offline->occult_blood_test_result, 
                    'seminalysis_test'=>$offline->seminalysis_test, 
                    'seminalysis_result'=>$offline->seminalysis_result, 
                    'grams_stain'=>$offline->grams_stain, 
                    'grams_stain_result'=>$offline->grams_stain_result, 
                    'afb_stain'=>$offline->afb_stain, 
                    'afb_stain_result'=>$offline->afb_stain_result,
                    'order_status'=>$offline->order_status, 
                    'trace_number'=>$offline->trace_number,
                    'order_remarks'=>$offline->order_remarks, 
                    'medtech'=>$offline->medtech, 
                    'result_remarks'=>$offline->result_remarks, 
                    'status'=>$offline->status, 
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at
                ]); 
            } 
        } 

        // syncronize laboratory_microscopy table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_microscopy')->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_microscopy')->where('lm_id', $online->lm_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_microscopy')->where('lm_id', $online->lm_id)->update([  
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id,   
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,  
                        'spicemen'=>$online->spicemen, 
                        'chemical_test'=>$online->chemical_test, 
                        'chemical_test_color'=>$online->chemical_test_color, 
                        'chemical_test_transparency'=>$online->chemical_test_transparency, 
                        'chemical_test_ph'=>$online->chemical_test_ph, 
                        'chemical_test_spicific_gravity'=>$online->chemical_test_spicific_gravity, 
                        'chemical_test_glucose'=>$online->chemical_test_glucose, 
                        'chemical_test_albumin'=>$online->chemical_test_albumin, 
                        'microscopic_test'=>$online->microscopic_test, 
                        'microscopic_test_squamous'=>$online->microscopic_test_squamous, 
                        'microscopic_test_pus'=>$online->microscopic_test_pus, 
                        'microscopic_test_redblood'=>$online->microscopic_test_redblood, 
                        'microscopic_test_hyaline'=>$online->microscopic_test_hyaline, 
                        'microscopic_test_wbc'=>$online->microscopic_test_wbc, 
                        'microscopic_test_rbc'=>$online->microscopic_test_rbc, 
                        'microscopic_test_fine_granular'=>$online->microscopic_test_fine_granular, 
                        'microscopic_test_coarse_granular'=>$online->microscopic_test_coarse_granular, 
                        'microscopic_test_calcium_oxalate'=>$online->microscopic_test_calcium_oxalate, 
                        'microscopic_test_triple_phospahte'=>$online->microscopic_test_triple_phospahte, 
                        'microscopic_test_leucine_tyrosine'=>$online->microscopic_test_leucine_tyrosine, 
                        'microscopic_test_ammonium_biurate'=>$online->microscopic_test_ammonium_biurate, 
                        'microscopic_test_amorphous_urates'=>$online->microscopic_test_amorphous_urates, 
                        'microscopic_test_amorphous_phosphates'=>$online->microscopic_test_amorphous_phosphates, 
                        'microscopic_test_uricacid'=>$online->microscopic_test_uricacid, 
                        'microscopic_test_mucus_thread'=>$online->microscopic_test_mucus_thread, 
                        'microscopic_test_bacteria'=>$online->microscopic_test_bacteria, 
                        'microscopic_test_yeast'=>$online->microscopic_test_yeast, 
                        'pregnancy_test_hcg'=>$online->pregnancy_test_hcg, 
                        'pregnancy_test_hcg_result'=>$online->pregnancy_test_hcg_result, 
                        'micral_test'=>$online->micral_test, 
                        'micral_test_result'=>$online->micral_test_result, 
                        'occult_blood_test'=>$online->occult_blood_test, 
                        'occult_blood_test_result'=>$online->occult_blood_test_result, 
                        'seminalysis_test'=>$online->seminalysis_test, 
                        'seminalysis_result'=>$online->seminalysis_result, 
                        'grams_stain'=>$online->grams_stain, 
                        'grams_stain_result'=>$online->grams_stain_result, 
                        'afb_stain'=>$online->afb_stain, 
                        'afb_stain_result'=>$online->afb_stain_result,
                        'order_status'=>$online->order_status, 
                        'trace_number'=>$online->trace_number,
                        'order_remarks'=>$online->order_remarks, 
                        'medtech'=>$online->medtech, 
                        'result_remarks'=>$online->result_remarks, 
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]);
        
                }else{
                    DB::table('laboratory_microscopy')->insert([  
                        'lm_id' => $online->lm_id,
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id,   
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,  
                        'spicemen'=>$online->spicemen, 
                        'chemical_test'=>$online->chemical_test, 
                        'chemical_test_color'=>$online->chemical_test_color, 
                        'chemical_test_transparency'=>$online->chemical_test_transparency, 
                        'chemical_test_ph'=>$online->chemical_test_ph, 
                        'chemical_test_spicific_gravity'=>$online->chemical_test_spicific_gravity, 
                        'chemical_test_glucose'=>$online->chemical_test_glucose, 
                        'chemical_test_albumin'=>$online->chemical_test_albumin, 
                        'microscopic_test'=>$online->microscopic_test, 
                        'microscopic_test_squamous'=>$online->microscopic_test_squamous, 
                        'microscopic_test_pus'=>$online->microscopic_test_pus, 
                        'microscopic_test_redblood'=>$online->microscopic_test_redblood, 
                        'microscopic_test_hyaline'=>$online->microscopic_test_hyaline, 
                        'microscopic_test_wbc'=>$online->microscopic_test_wbc, 
                        'microscopic_test_rbc'=>$online->microscopic_test_rbc, 
                        'microscopic_test_fine_granular'=>$online->microscopic_test_fine_granular, 
                        'microscopic_test_coarse_granular'=>$online->microscopic_test_coarse_granular, 
                        'microscopic_test_calcium_oxalate'=>$online->microscopic_test_calcium_oxalate, 
                        'microscopic_test_triple_phospahte'=>$online->microscopic_test_triple_phospahte, 
                        'microscopic_test_leucine_tyrosine'=>$online->microscopic_test_leucine_tyrosine, 
                        'microscopic_test_ammonium_biurate'=>$online->microscopic_test_ammonium_biurate, 
                        'microscopic_test_amorphous_urates'=>$online->microscopic_test_amorphous_urates, 
                        'microscopic_test_amorphous_phosphates'=>$online->microscopic_test_amorphous_phosphates, 
                        'microscopic_test_uricacid'=>$online->microscopic_test_uricacid, 
                        'microscopic_test_mucus_thread'=>$online->microscopic_test_mucus_thread, 
                        'microscopic_test_bacteria'=>$online->microscopic_test_bacteria, 
                        'microscopic_test_yeast'=>$online->microscopic_test_yeast, 
                        'pregnancy_test_hcg'=>$online->pregnancy_test_hcg, 
                        'pregnancy_test_hcg_result'=>$online->pregnancy_test_hcg_result, 
                        'micral_test'=>$online->micral_test, 
                        'micral_test_result'=>$online->micral_test_result, 
                        'occult_blood_test'=>$online->occult_blood_test, 
                        'occult_blood_test_result'=>$online->occult_blood_test_result, 
                        'seminalysis_test'=>$online->seminalysis_test, 
                        'seminalysis_result'=>$online->seminalysis_result, 
                        'grams_stain'=>$online->grams_stain, 
                        'grams_stain_result'=>$online->grams_stain_result, 
                        'afb_stain'=>$online->afb_stain, 
                        'afb_stain_result'=>$online->afb_stain_result,
                        'order_status'=>$online->order_status, 
                        'trace_number'=>$online->trace_number,
                        'order_remarks'=>$online->order_remarks, 
                        'medtech'=>$online->medtech, 
                        'result_remarks'=>$online->result_remarks, 
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }
    
        return true;
    }

    public static function syncLaboratoryMiscellaneous(){
        // syncronize laboratory_miscellaneous table from offline to online 
        $offline_query = DB::table('laboratory_miscellaneous')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_miscellaneous')->where('lm_id', $offline->lm_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('laboratory_miscellaneous')->where('lm_id', $offline->lm_id)->update([  
                        'order_id'=>$offline->order_id, 
                        'doctor_id'=>$offline->doctor_id, 
                        'patient_id'=>$offline->patient_id, 
                        'laboratory_id'=>$offline->laboratory_id,   
                        'ward_nurse_id'=>$offline->ward_nurse_id,
                        'case_file'=>$offline->case_file,
                        'is_viewed'=>$offline->is_viewed, 
                        'is_processed'=>$offline->is_processed, 
                        'is_processed_by'=>$offline->is_processed_by, 
                        'is_processed_time_start'=>$offline->is_processed_time_start, 
                        'is_processed_time_end'=>$offline->is_processed_time_end, 
                        'is_pending'=>$offline->is_pending, 
                        'is_pending_reason'=>$offline->is_pending_reason, 
                        'is_pending_date'=>$offline->is_pending_date, 
                        'is_pending_by'=>$offline->is_pending_by,  
                        'miscellaneous_test'=>$offline->miscellaneous_test,
                        'speciment'=>$offline->speciment,
                        'test'=>$offline->test,
                        'result'=>$offline->result,
                        'pregnancy_test_urine'=>$offline->pregnancy_test_urine,
                        'pregnancy_test_urine_result'=>$offline->pregnancy_test_urine_result,
                        'pregnancy_test_serum'=>$offline->pregnancy_test_serum,
                        'pregnancy_test_serum_result'=>$offline->pregnancy_test_serum_result,
                        'papsmear_test'=>$offline->papsmear_test,
                        'papsmear_test_result'=>$offline->papsmear_test_result,
                        'papsmear_test_with_gramstain'=>$offline->papsmear_test_with_gramstain,
                        'papsmear_test_with_gramstain_result'=>$offline->papsmear_test_with_gramstain_result,
                        'remarks'=>$offline->remarks,
                        'order_status'=>$offline->order_status,
                        'medtech'=>$offline->medtech,
                        'status'=>$offline->status,
                        'trace_number'=>$offline->trace_number,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
                
                else{
                    DB::table('laboratory_miscellaneous')->where('lm_id', $offline_count[0]->lm_id)->update([    
                        'order_id'=>$offline_count[0]->order_id, 
                        'doctor_id'=>$offline_count[0]->doctor_id, 
                        'patient_id'=>$offline_count[0]->patient_id, 
                        'laboratory_id'=>$offline_count[0]->laboratory_id,   
                        'ward_nurse_id'=>$offline_count[0]->ward_nurse_id,
                        'case_file'=>$offline_count[0]->case_file,
                        'is_viewed'=>$offline_count[0]->is_viewed, 
                        'is_processed'=>$offline_count[0]->is_processed, 
                        'is_processed_by'=>$offline_count[0]->is_processed_by, 
                        'is_processed_time_start'=>$offline_count[0]->is_processed_time_start, 
                        'is_processed_time_end'=>$offline_count[0]->is_processed_time_end, 
                        'is_pending'=>$offline_count[0]->is_pending, 
                        'is_pending_reason'=>$offline_count[0]->is_pending_reason, 
                        'is_pending_date'=>$offline_count[0]->is_pending_date, 
                        'is_pending_by'=>$offline_count[0]->is_pending_by,  
                        'miscellaneous_test'=>$offline_count[0]->miscellaneous_test,
                        'speciment'=>$offline_count[0]->speciment,
                        'test'=>$offline_count[0]->test,
                        'result'=>$offline_count[0]->result,
                        'pregnancy_test_urine'=>$offline_count[0]->pregnancy_test_urine,
                        'pregnancy_test_urine_result'=>$offline_count[0]->pregnancy_test_urine_result,
                        'pregnancy_test_serum'=>$offline_count[0]->pregnancy_test_serum,
                        'pregnancy_test_serum_result'=>$offline_count[0]->pregnancy_test_serum_result,
                        'papsmear_test'=>$offline_count[0]->papsmear_test,
                        'papsmear_test_result'=>$offline_count[0]->papsmear_test_result,
                        'papsmear_test_with_gramstain'=>$offline_count[0]->papsmear_test_with_gramstain,
                        'papsmear_test_with_gramstain_result'=>$offline_count[0]->papsmear_test_with_gramstain_result,
                        'remarks'=>$offline_count[0]->remarks,
                        'order_status'=>$offline_count[0]->order_status,
                        'medtech'=>$offline_count[0]->medtech,
                        'status'=>$offline_count[0]->status,
                        'trace_number'=>$offline_count[0]->trace_number,
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);
                }
    
            }else{
                DB::connection('mysql2')->table('laboratory_miscellaneous')->insert([   
                    'lm_id' => $offline->lm_id,
                    'order_id'=>$offline->order_id, 
                    'doctor_id'=>$offline->doctor_id, 
                    'patient_id'=>$offline->patient_id, 
                    'laboratory_id'=>$offline->laboratory_id,   
                    'ward_nurse_id'=>$offline->ward_nurse_id,
                    'case_file'=>$offline->case_file,
                    'is_viewed'=>$offline->is_viewed, 
                    'is_processed'=>$offline->is_processed, 
                    'is_processed_by'=>$offline->is_processed_by, 
                    'is_processed_time_start'=>$offline->is_processed_time_start, 
                    'is_processed_time_end'=>$offline->is_processed_time_end, 
                    'is_pending'=>$offline->is_pending, 
                    'is_pending_reason'=>$offline->is_pending_reason, 
                    'is_pending_date'=>$offline->is_pending_date, 
                    'is_pending_by'=>$offline->is_pending_by,  
                    'miscellaneous_test'=>$offline->miscellaneous_test,
                    'speciment'=>$offline->speciment,
                    'test'=>$offline->test,
                    'result'=>$offline->result,
                    'pregnancy_test_urine'=>$offline->pregnancy_test_urine,
                    'pregnancy_test_urine_result'=>$offline->pregnancy_test_urine_result,
                    'pregnancy_test_serum'=>$offline->pregnancy_test_serum,
                    'pregnancy_test_serum_result'=>$offline->pregnancy_test_serum_result,
                    'papsmear_test'=>$offline->papsmear_test,
                    'papsmear_test_result'=>$offline->papsmear_test_result,
                    'papsmear_test_with_gramstain'=>$offline->papsmear_test_with_gramstain,
                    'papsmear_test_with_gramstain_result'=>$offline->papsmear_test_with_gramstain_result,
                    'remarks'=>$offline->remarks,
                    'order_status'=>$offline->order_status,
                    'medtech'=>$offline->medtech,
                    'status'=>$offline->status,
                    'trace_number'=>$offline->trace_number,
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at
                ]); 
            } 
        } 

        // syncronize laboratory_miscellaneous table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_miscellaneous')->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_miscellaneous')->where('lm_id', $online->lm_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_miscellaneous')->where('lm_id', $online->lm_id)->update([   
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id,   
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,  
                        'miscellaneous_test'=>$online->miscellaneous_test,
                        'speciment'=>$online->speciment,
                        'test'=>$online->test,
                        'result'=>$online->result,
                        'pregnancy_test_urine'=>$online->pregnancy_test_urine,
                        'pregnancy_test_urine_result'=>$online->pregnancy_test_urine_result,
                        'pregnancy_test_serum'=>$online->pregnancy_test_serum,
                        'pregnancy_test_serum_result'=>$online->pregnancy_test_serum_result,
                        'papsmear_test'=>$online->papsmear_test,
                        'papsmear_test_result'=>$online->papsmear_test_result,
                        'papsmear_test_with_gramstain'=>$online->papsmear_test_with_gramstain,
                        'papsmear_test_with_gramstain_result'=>$online->papsmear_test_with_gramstain_result,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'status'=>$online->status,
                        'trace_number'=>$online->trace_number,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]);
        
                }else{
                    DB::table('laboratory_miscellaneous')->insert([  
                        'lm_id' => $online->lm_id,
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id,   
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,  
                        'miscellaneous_test'=>$online->miscellaneous_test,
                        'speciment'=>$online->speciment,
                        'test'=>$online->test,
                        'result'=>$online->result,
                        'pregnancy_test_urine'=>$online->pregnancy_test_urine,
                        'pregnancy_test_urine_result'=>$online->pregnancy_test_urine_result,
                        'pregnancy_test_serum'=>$online->pregnancy_test_serum,
                        'pregnancy_test_serum_result'=>$online->pregnancy_test_serum_result,
                        'papsmear_test'=>$online->papsmear_test,
                        'papsmear_test_result'=>$online->papsmear_test_result,
                        'papsmear_test_with_gramstain'=>$online->papsmear_test_with_gramstain,
                        'papsmear_test_with_gramstain_result'=>$online->papsmear_test_with_gramstain_result,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'status'=>$online->status,
                        'trace_number'=>$online->trace_number,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }
    
        return true;
    }
    
    public static function syncLaboratoryOralGlucose(){
        // syncronize laboratory_oral_glucose table from offline to online 
        $offline_query = DB::table('laboratory_oral_glucose')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_oral_glucose')->where('log_id', $offline->log_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_oral_glucose')->where('log_id', $offline->log_id)->update([  
                            'order_id'=>$offline->order_id, 
                            'doctor_id'=>$offline->doctor_id, 
                            'patient_id'=>$offline->patient_id, 
                            'laboratory_id'=>$offline->laboratory_id,   
                            'ward_nurse_id'=>$offline->ward_nurse_id,
                            'case_file'=>$offline->case_file,
                            'is_viewed'=>$offline->is_viewed, 
                            'is_processed'=>$offline->is_processed, 
                            'is_processed_by'=>$offline->is_processed_by, 
                            'is_processed_time_start'=>$offline->is_processed_time_start, 
                            'is_processed_time_end'=>$offline->is_processed_time_end, 
                            'is_pending'=>$offline->is_pending, 
                            'is_pending_reason'=>$offline->is_pending_reason, 
                            'is_pending_date'=>$offline->is_pending_date, 
                            'is_pending_by'=>$offline->is_pending_by,  
                            'oral_test'=>$offline->oral_test,
                            'baseline'=>$offline->baseline,
                            'baseline_remarks'=>$offline->baseline_remarks,
                            'first_hour'=>$offline->first_hour,
                            'first_hour_remarks'=>$offline->first_hour_remarks,
                            'second_hour'=>$offline->second_hour,
                            'second_hour_remarks'=>$offline->second_hour_remarks,
                            'remarks'=>$offline->remarks,
                            'order_status'=>$offline->order_status,
                            'medtech'=>$offline->medtech,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('laboratory_oral_glucose')->where('log_id', $offline_count[0]->log_id)->update([  
                            'order_id'=>$offline_count[0]->order_id, 
                            'doctor_id'=>$offline_count[0]->doctor_id, 
                            'patient_id'=>$offline_count[0]->patient_id, 
                            'laboratory_id'=>$offline_count[0]->laboratory_id,   
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id,
                            'case_file'=>$offline_count[0]->case_file,
                            'is_viewed'=>$offline_count[0]->is_viewed, 
                            'is_processed'=>$offline_count[0]->is_processed, 
                            'is_processed_by'=>$offline_count[0]->is_processed_by, 
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start, 
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end, 
                            'is_pending'=>$offline_count[0]->is_pending, 
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason, 
                            'is_pending_date'=>$offline_count[0]->is_pending_date, 
                            'is_pending_by'=>$offline_count[0]->is_pending_by,  
                            'oral_test'=>$offline_count[0]->oral_test,
                            'baseline'=>$offline_count[0]->baseline,
                            'baseline_remarks'=>$offline_count[0]->baseline_remarks,
                            'first_hour'=>$offline_count[0]->first_hour,
                            'first_hour_remarks'=>$offline_count[0]->first_hour_remarks,
                            'second_hour'=>$offline_count[0]->second_hour,
                            'second_hour_remarks'=>$offline_count[0]->second_hour_remarks,
                            'remarks'=>$offline_count[0]->remarks,
                            'order_status'=>$offline_count[0]->order_status,
                            'medtech'=>$offline_count[0]->medtech,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }
        
                }else{
                    DB::connection('mysql2')->table('laboratory_oral_glucose')->insert([  
                        'log_id' => $offline->log_id, 
                        'order_id'=>$offline->order_id, 
                        'doctor_id'=>$offline->doctor_id, 
                        'patient_id'=>$offline->patient_id, 
                        'laboratory_id'=>$offline->laboratory_id,   
                        'ward_nurse_id'=>$offline->ward_nurse_id,
                        'case_file'=>$offline->case_file,
                        'is_viewed'=>$offline->is_viewed, 
                        'is_processed'=>$offline->is_processed, 
                        'is_processed_by'=>$offline->is_processed_by, 
                        'is_processed_time_start'=>$offline->is_processed_time_start, 
                        'is_processed_time_end'=>$offline->is_processed_time_end, 
                        'is_pending'=>$offline->is_pending, 
                        'is_pending_reason'=>$offline->is_pending_reason, 
                        'is_pending_date'=>$offline->is_pending_date, 
                        'is_pending_by'=>$offline->is_pending_by,  
                        'oral_test'=>$offline->oral_test,
                        'baseline'=>$offline->baseline,
                        'baseline_remarks'=>$offline->baseline_remarks,
                        'first_hour'=>$offline->first_hour,
                        'first_hour_remarks'=>$offline->first_hour_remarks,
                        'second_hour'=>$offline->second_hour,
                        'second_hour_remarks'=>$offline->second_hour_remarks,
                        'remarks'=>$offline->remarks,
                        'order_status'=>$offline->order_status,
                        'medtech'=>$offline->medtech,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        } 

        // syncronize laboratory_oral_glucose table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_oral_glucose')->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_oral_glucose')->where('log_id', $online->log_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_oral_glucose')->where('log_id', $online->log_id)->update([   
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id,   
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,  
                        'oral_test'=>$online->oral_test,
                        'baseline'=>$online->baseline,
                        'baseline_remarks'=>$online->baseline_remarks,
                        'first_hour'=>$online->first_hour,
                        'first_hour_remarks'=>$online->first_hour_remarks,
                        'second_hour'=>$online->second_hour,
                        'second_hour_remarks'=>$online->second_hour_remarks,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]);
        
                }else{
                    DB::table('laboratory_oral_glucose')->insert([  
                        'log_id' => $online->log_id,
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id,   
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,  
                        'oral_test'=>$online->oral_test,
                        'baseline'=>$online->baseline,
                        'baseline_remarks'=>$online->baseline_remarks,
                        'first_hour'=>$online->first_hour,
                        'first_hour_remarks'=>$online->first_hour_remarks,
                        'second_hour'=>$online->second_hour,
                        'second_hour_remarks'=>$online->second_hour_remarks,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }
    
        return true;
    }
    
    public static function syncLaboratoryPapsmear(){
        // syncronize laboratory_papsmear table from offline to online 
        $offline_query = DB::table('laboratory_papsmear')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_papsmear')->where('ps_id', $offline->ps_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_papsmear')->where('ps_id', $offline->ps_id)->update([  
                            'order_id'=>$offline->order_id, 
                            'doctor_id'=>$offline->doctor_id, 
                            'patient_id'=>$offline->patient_id, 
                            'laboratory_id'=>$offline->laboratory_id,   
                            'ward_nurse_id'=>$offline->ward_nurse_id,
                            'case_file'=>$offline->case_file,
                            'is_viewed'=>$offline->is_viewed, 
                            'is_processed'=>$offline->is_processed, 
                            'is_processed_by'=>$offline->is_processed_by, 
                            'is_processed_time_start'=>$offline->is_processed_time_start, 
                            'is_processed_time_end'=>$offline->is_processed_time_end, 
                            'is_pending'=>$offline->is_pending, 
                            'is_pending_reason'=>$offline->is_pending_reason, 
                            'is_pending_date'=>$offline->is_pending_date, 
                            'is_pending_by'=>$offline->is_pending_by,  
                            'papsmear_test'=>$offline->papsmear_test,
                            'cervix'=>$offline->cervix,
                            'vagina'=>$offline->vagina,
                            'age'=>$offline->age,
                            'hormones'=>$offline->hormones,
                            'iud'=>$offline->iud,
                            'lmp'=>$offline->lmp,
                            'satisfactory_evaluation'=>$offline->satisfactory_evaluation,
                            'satisfactory_no_lmp'=>$offline->satisfactory_no_lmp,
                            'unsatisfactory'=>$offline->unsatisfactory,
                            'with_normal_limits'=>$offline->with_normal_limits,
                            'benign_cell_changes'=>$offline->benign_cell_changes,
                            'epithelial_cell_abno'=>$offline->epithelial_cell_abno,
                            'infection_trichomonas'=>$offline->infection_trichomonas,
                            'infection_fungi'=>$offline->infection_fungi,
                            'infection_predominance'=>$offline->infection_predominance,
                            'infection_cellular'=>$offline->infection_cellular,
                            'infection_others'=>$offline->infection_others,
                            'reactive_inflammation'=>$offline->reactive_inflammation,
                            'reactive_atrophy'=>$offline->reactive_atrophy,
                            'reactive_follicular'=>$offline->reactive_follicular,
                            'reactive_radiation'=>$offline->reactive_radiation,
                            'reactive_iud'=>$offline->reactive_iud,
                            'reactive_des'=>$offline->reactive_des,
                            'reactive_others'=>$offline->reactive_others,
                            'maturation_suggest'=>$offline->maturation_suggest,
                            'squamous_typical'=>$offline->squamous_typical,
                            'squamous_low'=>$offline->squamous_low,
                            'squamous_low_hpv'=>$offline->squamous_low_hpv,
                            'squamous_low_mild'=>$offline->squamous_low_mild,
                            'squamous_high'=>$offline->squamous_high,
                            'squamous_high_moderate'=>$offline->squamous_high_moderate,
                            'squamous_high_severe'=>$offline->squamous_high_severe,
                            'squamous_high_carcinoma'=>$offline->squamous_high_carcinoma,
                            'squamous_cell'=>$offline->squamous_cell,
                            'giandulare_endomentrial'=>$offline->giandulare_endomentrial,
                            'giandulare_typical'=>$offline->giandulare_typical,
                            'giandulare_endocervical'=>$offline->giandulare_endocervical,
                            'giandulare_endometrial'=>$offline->giandulare_endometrial,
                            'giandulare_extraiterine'=>$offline->giandulare_extraiterine,
                            'giandulare_adenocarcinoma'=>$offline->giandulare_adenocarcinoma,
                            'giandulare_adeno_specify'=>$offline->giandulare_adeno_specify,
                            'other_malignant'=>$offline->other_malignant,
                            'hormonal_compatible'=>$offline->hormonal_compatible,
                            'hormonal_incompatible'=>$offline->hormonal_incompatible,
                            'hormonal_incompatible_spec'=>$offline->hormonal_incompatible_spec,
                            'hormonal_non_possible'=>$offline->hormonal_non_possible,
                            'non_possible_specify'=>$offline->non_possible_specify,
                            'remarks'=>$offline->remarks,
                            'order_status'=>$offline->order_status,
                            'medtech'=>$offline->medtech,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('laboratory_papsmear')->where('ps_id', $offline_count[0]->ps_id)->update([  
                            'order_id'=>$offline_count[0]->order_id, 
                            'doctor_id'=>$offline_count[0]->doctor_id, 
                            'patient_id'=>$offline_count[0]->patient_id, 
                            'laboratory_id'=>$offline_count[0]->laboratory_id,   
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id,
                            'case_file'=>$offline_count[0]->case_file,
                            'is_viewed'=>$offline_count[0]->is_viewed, 
                            'is_processed'=>$offline_count[0]->is_processed, 
                            'is_processed_by'=>$offline_count[0]->is_processed_by, 
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start, 
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end, 
                            'is_pending'=>$offline_count[0]->is_pending, 
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason, 
                            'is_pending_date'=>$offline_count[0]->is_pending_date, 
                            'is_pending_by'=>$offline_count[0]->is_pending_by,  
                            'papsmear_test'=>$offline_count[0]->papsmear_test,
                            'cervix'=>$offline_count[0]->cervix,
                            'vagina'=>$offline_count[0]->vagina,
                            'age'=>$offline_count[0]->age,
                            'hormones'=>$offline_count[0]->hormones,
                            'iud'=>$offline_count[0]->iud,
                            'lmp'=>$offline_count[0]->lmp,
                            'satisfactory_evaluation'=>$offline_count[0]->satisfactory_evaluation,
                            'satisfactory_no_lmp'=>$offline_count[0]->satisfactory_no_lmp,
                            'unsatisfactory'=>$offline_count[0]->unsatisfactory,
                            'with_normal_limits'=>$offline_count[0]->with_normal_limits,
                            'benign_cell_changes'=>$offline_count[0]->benign_cell_changes,
                            'epithelial_cell_abno'=>$offline_count[0]->epithelial_cell_abno,
                            'infection_trichomonas'=>$offline_count[0]->infection_trichomonas,
                            'infection_fungi'=>$offline_count[0]->infection_fungi,
                            'infection_predominance'=>$offline_count[0]->infection_predominance,
                            'infection_cellular'=>$offline_count[0]->infection_cellular,
                            'infection_others'=>$offline_count[0]->infection_others,
                            'reactive_inflammation'=>$offline_count[0]->reactive_inflammation,
                            'reactive_atrophy'=>$offline_count[0]->reactive_atrophy,
                            'reactive_follicular'=>$offline_count[0]->reactive_follicular,
                            'reactive_radiation'=>$offline_count[0]->reactive_radiation,
                            'reactive_iud'=>$offline_count[0]->reactive_iud,
                            'reactive_des'=>$offline_count[0]->reactive_des,
                            'reactive_others'=>$offline_count[0]->reactive_others,
                            'maturation_suggest'=>$offline_count[0]->maturation_suggest,
                            'squamous_typical'=>$offline_count[0]->squamous_typical,
                            'squamous_low'=>$offline_count[0]->squamous_low,
                            'squamous_low_hpv'=>$offline_count[0]->squamous_low_hpv,
                            'squamous_low_mild'=>$offline_count[0]->squamous_low_mild,
                            'squamous_high'=>$offline_count[0]->squamous_high,
                            'squamous_high_moderate'=>$offline_count[0]->squamous_high_moderate,
                            'squamous_high_severe'=>$offline_count[0]->squamous_high_severe,
                            'squamous_high_carcinoma'=>$offline_count[0]->squamous_high_carcinoma,
                            'squamous_cell'=>$offline_count[0]->squamous_cell,
                            'giandulare_endomentrial'=>$offline_count[0]->giandulare_endomentrial,
                            'giandulare_typical'=>$offline_count[0]->giandulare_typical,
                            'giandulare_endocervical'=>$offline_count[0]->giandulare_endocervical,
                            'giandulare_endometrial'=>$offline_count[0]->giandulare_endometrial,
                            'giandulare_extraiterine'=>$offline_count[0]->giandulare_extraiterine,
                            'giandulare_adenocarcinoma'=>$offline_count[0]->giandulare_adenocarcinoma,
                            'giandulare_adeno_specify'=>$offline_count[0]->giandulare_adeno_specify,
                            'other_malignant'=>$offline_count[0]->other_malignant,
                            'hormonal_compatible'=>$offline_count[0]->hormonal_compatible,
                            'hormonal_incompatible'=>$offline_count[0]->hormonal_incompatible,
                            'hormonal_incompatible_spec'=>$offline_count[0]->hormonal_incompatible_spec,
                            'hormonal_non_possible'=>$offline_count[0]->hormonal_non_possible,
                            'non_possible_specify'=>$offline_count[0]->non_possible_specify,
                            'remarks'=>$offline_count[0]->remarks,
                            'order_status'=>$offline_count[0]->order_status,
                            'medtech'=>$offline_count[0]->medtech,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }
        
                }else{
                    DB::connection('mysql2')->table('laboratory_papsmear')->insert([  
                        'ps_id' => $offline->ps_id, 
                        'order_id'=>$offline->order_id, 
                        'doctor_id'=>$offline->doctor_id, 
                        'patient_id'=>$offline->patient_id, 
                        'laboratory_id'=>$offline->laboratory_id,   
                        'ward_nurse_id'=>$offline->ward_nurse_id,
                        'case_file'=>$offline->case_file,
                        'is_viewed'=>$offline->is_viewed, 
                        'is_processed'=>$offline->is_processed, 
                        'is_processed_by'=>$offline->is_processed_by, 
                        'is_processed_time_start'=>$offline->is_processed_time_start, 
                        'is_processed_time_end'=>$offline->is_processed_time_end, 
                        'is_pending'=>$offline->is_pending, 
                        'is_pending_reason'=>$offline->is_pending_reason, 
                        'is_pending_date'=>$offline->is_pending_date, 
                        'is_pending_by'=>$offline->is_pending_by,  
                        'papsmear_test'=>$offline->papsmear_test,
                        'cervix'=>$offline->cervix,
                        'vagina'=>$offline->vagina,
                        'age'=>$offline->age,
                        'hormones'=>$offline->hormones,
                        'iud'=>$offline->iud,
                        'lmp'=>$offline->lmp,
                        'satisfactory_evaluation'=>$offline->satisfactory_evaluation,
                        'satisfactory_no_lmp'=>$offline->satisfactory_no_lmp,
                        'unsatisfactory'=>$offline->unsatisfactory,
                        'with_normal_limits'=>$offline->with_normal_limits,
                        'benign_cell_changes'=>$offline->benign_cell_changes,
                        'epithelial_cell_abno'=>$offline->epithelial_cell_abno,
                        'infection_trichomonas'=>$offline->infection_trichomonas,
                        'infection_fungi'=>$offline->infection_fungi,
                        'infection_predominance'=>$offline->infection_predominance,
                        'infection_cellular'=>$offline->infection_cellular,
                        'infection_others'=>$offline->infection_others,
                        'reactive_inflammation'=>$offline->reactive_inflammation,
                        'reactive_atrophy'=>$offline->reactive_atrophy,
                        'reactive_follicular'=>$offline->reactive_follicular,
                        'reactive_radiation'=>$offline->reactive_radiation,
                        'reactive_iud'=>$offline->reactive_iud,
                        'reactive_des'=>$offline->reactive_des,
                        'reactive_others'=>$offline->reactive_others,
                        'maturation_suggest'=>$offline->maturation_suggest,
                        'squamous_typical'=>$offline->squamous_typical,
                        'squamous_low'=>$offline->squamous_low,
                        'squamous_low_hpv'=>$offline->squamous_low_hpv,
                        'squamous_low_mild'=>$offline->squamous_low_mild,
                        'squamous_high'=>$offline->squamous_high,
                        'squamous_high_moderate'=>$offline->squamous_high_moderate,
                        'squamous_high_severe'=>$offline->squamous_high_severe,
                        'squamous_high_carcinoma'=>$offline->squamous_high_carcinoma,
                        'squamous_cell'=>$offline->squamous_cell,
                        'giandulare_endomentrial'=>$offline->giandulare_endomentrial,
                        'giandulare_typical'=>$offline->giandulare_typical,
                        'giandulare_endocervical'=>$offline->giandulare_endocervical,
                        'giandulare_endometrial'=>$offline->giandulare_endometrial,
                        'giandulare_extraiterine'=>$offline->giandulare_extraiterine,
                        'giandulare_adenocarcinoma'=>$offline->giandulare_adenocarcinoma,
                        'giandulare_adeno_specify'=>$offline->giandulare_adeno_specify,
                        'other_malignant'=>$offline->other_malignant,
                        'hormonal_compatible'=>$offline->hormonal_compatible,
                        'hormonal_incompatible'=>$offline->hormonal_incompatible,
                        'hormonal_incompatible_spec'=>$offline->hormonal_incompatible_spec,
                        'hormonal_non_possible'=>$offline->hormonal_non_possible,
                        'non_possible_specify'=>$offline->non_possible_specify,
                        'remarks'=>$offline->remarks,
                        'order_status'=>$offline->order_status,
                        'medtech'=>$offline->medtech,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        } 

        // syncronize laboratory_papsmear table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_papsmear')->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_papsmear')->where('ps_id', $online->ps_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_papsmear')->where('ps_id', $online->ps_id)->update([   
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id,   
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,  
                        'papsmear_test'=>$online->papsmear_test,
                        'cervix'=>$online->cervix,
                        'vagina'=>$online->vagina,
                        'age'=>$online->age,
                        'hormones'=>$online->hormones,
                        'iud'=>$online->iud,
                        'lmp'=>$online->lmp,
                        'satisfactory_evaluation'=>$online->satisfactory_evaluation,
                        'satisfactory_no_lmp'=>$online->satisfactory_no_lmp,
                        'unsatisfactory'=>$online->unsatisfactory,
                        'with_normal_limits'=>$online->with_normal_limits,
                        'benign_cell_changes'=>$online->benign_cell_changes,
                        'epithelial_cell_abno'=>$online->epithelial_cell_abno,
                        'infection_trichomonas'=>$online->infection_trichomonas,
                        'infection_fungi'=>$online->infection_fungi,
                        'infection_predominance'=>$online->infection_predominance,
                        'infection_cellular'=>$online->infection_cellular,
                        'infection_others'=>$online->infection_others,
                        'reactive_inflammation'=>$online->reactive_inflammation,
                        'reactive_atrophy'=>$online->reactive_atrophy,
                        'reactive_follicular'=>$online->reactive_follicular,
                        'reactive_radiation'=>$online->reactive_radiation,
                        'reactive_iud'=>$online->reactive_iud,
                        'reactive_des'=>$online->reactive_des,
                        'reactive_others'=>$online->reactive_others,
                        'maturation_suggest'=>$online->maturation_suggest,
                        'squamous_typical'=>$online->squamous_typical,
                        'squamous_low'=>$online->squamous_low,
                        'squamous_low_hpv'=>$online->squamous_low_hpv,
                        'squamous_low_mild'=>$online->squamous_low_mild,
                        'squamous_high'=>$online->squamous_high,
                        'squamous_high_moderate'=>$online->squamous_high_moderate,
                        'squamous_high_severe'=>$online->squamous_high_severe,
                        'squamous_high_carcinoma'=>$online->squamous_high_carcinoma,
                        'squamous_cell'=>$online->squamous_cell,
                        'giandulare_endomentrial'=>$online->giandulare_endomentrial,
                        'giandulare_typical'=>$online->giandulare_typical,
                        'giandulare_endocervical'=>$online->giandulare_endocervical,
                        'giandulare_endometrial'=>$online->giandulare_endometrial,
                        'giandulare_extraiterine'=>$online->giandulare_extraiterine,
                        'giandulare_adenocarcinoma'=>$online->giandulare_adenocarcinoma,
                        'giandulare_adeno_specify'=>$online->giandulare_adeno_specify,
                        'other_malignant'=>$online->other_malignant,
                        'hormonal_compatible'=>$online->hormonal_compatible,
                        'hormonal_incompatible'=>$online->hormonal_incompatible,
                        'hormonal_incompatible_spec'=>$online->hormonal_incompatible_spec,
                        'hormonal_non_possible'=>$online->hormonal_non_possible,
                        'non_possible_specify'=>$online->non_possible_specify,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]);
        
                }else{
                    DB::table('laboratory_papsmear')->insert([  
                        'ps_id' => $online->ps_id,
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id,   
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,  
                        'papsmear_test'=>$online->papsmear_test,
                        'cervix'=>$online->cervix,
                        'vagina'=>$online->vagina,
                        'age'=>$online->age,
                        'hormones'=>$online->hormones,
                        'iud'=>$online->iud,
                        'lmp'=>$online->lmp,
                        'satisfactory_evaluation'=>$online->satisfactory_evaluation,
                        'satisfactory_no_lmp'=>$online->satisfactory_no_lmp,
                        'unsatisfactory'=>$online->unsatisfactory,
                        'with_normal_limits'=>$online->with_normal_limits,
                        'benign_cell_changes'=>$online->benign_cell_changes,
                        'epithelial_cell_abno'=>$online->epithelial_cell_abno,
                        'infection_trichomonas'=>$online->infection_trichomonas,
                        'infection_fungi'=>$online->infection_fungi,
                        'infection_predominance'=>$online->infection_predominance,
                        'infection_cellular'=>$online->infection_cellular,
                        'infection_others'=>$online->infection_others,
                        'reactive_inflammation'=>$online->reactive_inflammation,
                        'reactive_atrophy'=>$online->reactive_atrophy,
                        'reactive_follicular'=>$online->reactive_follicular,
                        'reactive_radiation'=>$online->reactive_radiation,
                        'reactive_iud'=>$online->reactive_iud,
                        'reactive_des'=>$online->reactive_des,
                        'reactive_others'=>$online->reactive_others,
                        'maturation_suggest'=>$online->maturation_suggest,
                        'squamous_typical'=>$online->squamous_typical,
                        'squamous_low'=>$online->squamous_low,
                        'squamous_low_hpv'=>$online->squamous_low_hpv,
                        'squamous_low_mild'=>$online->squamous_low_mild,
                        'squamous_high'=>$online->squamous_high,
                        'squamous_high_moderate'=>$online->squamous_high_moderate,
                        'squamous_high_severe'=>$online->squamous_high_severe,
                        'squamous_high_carcinoma'=>$online->squamous_high_carcinoma,
                        'squamous_cell'=>$online->squamous_cell,
                        'giandulare_endomentrial'=>$online->giandulare_endomentrial,
                        'giandulare_typical'=>$online->giandulare_typical,
                        'giandulare_endocervical'=>$online->giandulare_endocervical,
                        'giandulare_endometrial'=>$online->giandulare_endometrial,
                        'giandulare_extraiterine'=>$online->giandulare_extraiterine,
                        'giandulare_adenocarcinoma'=>$online->giandulare_adenocarcinoma,
                        'giandulare_adeno_specify'=>$online->giandulare_adeno_specify,
                        'other_malignant'=>$online->other_malignant,
                        'hormonal_compatible'=>$online->hormonal_compatible,
                        'hormonal_incompatible'=>$online->hormonal_incompatible,
                        'hormonal_incompatible_spec'=>$online->hormonal_incompatible_spec,
                        'hormonal_non_possible'=>$online->hormonal_non_possible,
                        'non_possible_specify'=>$online->non_possible_specify,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }
    
        return true;
    }

    public static function syncLaboratoryRequestItem(){
        // syncronize laboratory_request_item table from offline to online 
        $offline_query = DB::table('laboratory_request_item')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_request_item')->where('lri_id', $offline->lri_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_request_item')->where('lri_id', $offline->lri_id)->update([  
                            'request_id'=>$offline->request_id, 
                            'management_id'=>$offline->management_id, 
                            'laboratory_id'=>$offline->laboratory_id,   
                            'item'=>$offline->item,
                            'item_haptech_id'=>$offline->item_haptech_id,
                            'description'=>$offline->description, 
                            'unit'=>$offline->unit, 
                            'supplier'=>$offline->supplier, 
                            'msrp'=>$offline->msrp, 
                            'mark_as_okay'=>$offline->mark_as_okay, 
                            'status'=>$offline->status, 
                            'created_at'=>$offline->created_at, 
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('laboratory_request_item')->where('lri_id', $offline_count[0]->lri_id)->update([  
                            'request_id'=>$offline_count[0]->request_id, 
                            'management_id'=>$offline_count[0]->management_id, 
                            'laboratory_id'=>$offline_count[0]->laboratory_id,   
                            'item'=>$offline_count[0]->item,
                            'item_haptech_id'=>$offline_count[0]->item_haptech_id,
                            'description'=>$offline_count[0]->description, 
                            'unit'=>$offline_count[0]->unit, 
                            'supplier'=>$offline_count[0]->supplier, 
                            'msrp'=>$offline_count[0]->msrp, 
                            'mark_as_okay'=>$offline_count[0]->mark_as_okay, 
                            'status'=>$offline_count[0]->status, 
                            'created_at'=>$offline_count[0]->created_at, 
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }
        
                }else{
                    DB::connection('mysql2')->table('laboratory_request_item')->insert([  
                        'lri_id' => $offline->lri_id, 
                        'request_id'=>$offline->request_id, 
                        'management_id'=>$offline->management_id, 
                        'laboratory_id'=>$offline->laboratory_id,   
                        'item'=>$offline->item,
                        'item_haptech_id'=>$offline->item_haptech_id,
                        'description'=>$offline->description, 
                        'unit'=>$offline->unit, 
                        'supplier'=>$offline->supplier, 
                        'msrp'=>$offline->msrp, 
                        'mark_as_okay'=>$offline->mark_as_okay, 
                        'status'=>$offline->status, 
                        'created_at'=>$offline->created_at, 
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        } 

        // syncronize laboratory_request_item table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_request_item')->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_request_item')->where('lri_id', $online->lri_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_request_item')->where('lri_id', $online->lri_id)->update([   
                        'request_id'=>$online->request_id, 
                        'management_id'=>$online->management_id, 
                        'laboratory_id'=>$online->laboratory_id,   
                        'item'=>$online->item,
                        'item_haptech_id'=>$online->item_haptech_id,
                        'description'=>$online->description, 
                        'unit'=>$online->unit, 
                        'supplier'=>$online->supplier, 
                        'msrp'=>$online->msrp, 
                        'mark_as_okay'=>$online->mark_as_okay, 
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at, 
                        'updated_at'=>$online->updated_at
                    ]);
        
                }else{
                    DB::table('laboratory_request_item')->insert([  
                        'lri_id' => $online->lri_id,
                        'request_id'=>$online->request_id, 
                        'management_id'=>$online->management_id, 
                        'laboratory_id'=>$online->laboratory_id,   
                        'item'=>$online->item,
                        'item_haptech_id'=>$online->item_haptech_id,
                        'description'=>$online->description, 
                        'unit'=>$online->unit, 
                        'supplier'=>$online->supplier, 
                        'msrp'=>$online->msrp, 
                        'mark_as_okay'=>$online->mark_as_okay, 
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at, 
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }
    
        return true;
    }
    
    public static function syncLaboratorySorology(){
        // syncronize laboratory_sorology table from offline to online
        $offline_query = DB::table('laboratory_sorology')->get();
        foreach ($offline_query as $offline) {
            $offline_count = DB::connection('mysql2')->table('laboratory_sorology')->where('ls_id', $offline->ls_id)->get();
            if (count($offline_count) > 0) {
                if ($offline->updated_at > $offline_count[0]->updated_at) {
                    DB::connection('mysql2')->table('laboratory_sorology')->where('ls_id', $offline->ls_id)->update([
                        'order_id' => $offline->order_id,
                        'doctor_id' => $offline->doctor_id,
                        'patient_id' => $offline->patient_id,
                        'laboratory_id' => $offline->laboratory_id,
                        'ward_nurse_id' => $offline->ward_nurse_id,
                        'case_file' => $offline->case_file,
                        'is_viewed' => $offline->is_viewed,
                        'is_processed' => $offline->is_processed,
                        'is_processed_by' => $offline->is_processed_by,
                        'is_processed_time_start' => $offline->is_processed_time_start,
                        'is_processed_time_end' => $offline->is_processed_time_end,
                        'is_pending' => $offline->is_pending,
                        'is_pending_reason' => $offline->is_pending_reason,
                        'is_pending_date' => $offline->is_pending_date,
                        'is_pending_by' => $offline->is_pending_by,
                        'hbsag' => $offline->hbsag,
                        'hav' => $offline->hav,
                        'hcv' => $offline->hcv,
                        'vdrl_rpr' => $offline->vdrl_rpr,
                        'anti_hbc_igm' => $offline->anti_hbc_igm,
                        'beta_hcg_quali' => $offline->beta_hcg_quali,
                        'h_pylori' => $offline->h_pylori,
                        'typhidot' => $offline->typhidot,
                        'hact' => $offline->hact,
                        'ana' => $offline->ana,
                        'dengue_test' => $offline->dengue_test,
                        'dengue_test_result' => $offline->dengue_test_result,
                        'syphilis_test'=>$offline->syphilis_test,
                        'syphilis_test_result'=>$offline->syphilis_test_result,
                        'hiv_test'=>$offline->hiv_test,
                        'hiv_test_result'=>$offline->hiv_test_result,
                        'cd4_test'=>$offline->cd4_test,
                        'cd4_test_result'=>$offline->cd4_test_result,
                        'rpr_test'=>$offline->rpr_test,
                        'rpr_test_result'=>$offline->rpr_test_result,
                        'remarks' => $offline->remarks,
                        'order_status' => $offline->order_status,
                        'medtech' => $offline->medtech,
                        'trace_number' => $offline->trace_number,
                        'status' => $offline->status,
                        'created_at' => $offline->created_at,
                        'updated_at' => $offline->updated_at
                    ]);
                } else {
                    DB::table('laboratory_sorology')->where('ls_id', $offline_count[0]->ls_id)->update([
                        'order_id' => $offline_count[0]->order_id,
                        'doctor_id' => $offline_count[0]->doctor_id,
                        'patient_id' => $offline_count[0]->patient_id,
                        'laboratory_id' => $offline_count[0]->laboratory_id,
                        'ward_nurse_id' => $offline_count[0]->ward_nurse_id,
                        'case_file' => $offline_count[0]->case_file,
                        'is_viewed' => $offline_count[0]->is_viewed,
                        'is_processed' => $offline_count[0]->is_processed,
                        'is_processed_by' => $offline_count[0]->is_processed_by,
                        'is_processed_time_start' => $offline_count[0]->is_processed_time_start,
                        'is_processed_time_end' => $offline_count[0]->is_processed_time_end,
                        'is_pending' => $offline_count[0]->is_pending,
                        'is_pending_reason' => $offline_count[0]->is_pending_reason,
                        'is_pending_date' => $offline_count[0]->is_pending_date,
                        'is_pending_by' => $offline_count[0]->is_pending_by,
                        'hbsag' => $offline_count[0]->hbsag,
                        'hav' => $offline_count[0]->hav,
                        'hcv' => $offline_count[0]->hcv,
                        'vdrl_rpr' => $offline_count[0]->vdrl_rpr,
                        'anti_hbc_igm' => $offline_count[0]->anti_hbc_igm,
                        'beta_hcg_quali' => $offline_count[0]->beta_hcg_quali,
                        'h_pylori' => $offline_count[0]->h_pylori,
                        'typhidot' => $offline_count[0]->typhidot,
                        'hact' => $offline_count[0]->hact,
                        'ana' => $offline_count[0]->ana,
                        'dengue_test' => $offline_count[0]->dengue_test,
                        'dengue_test_result' => $offline_count[0]->dengue_test_result,
                        'syphilis_test'=>$offline_count[0]->syphilis_test,
                        'syphilis_test_result'=>$offline_count[0]->syphilis_test_result,
                        'hiv_test'=>$offline_count[0]->hiv_test,
                        'hiv_test_result'=>$offline_count[0]->hiv_test_result,
                        'cd4_test'=>$offline_count[0]->cd4_test,
                        'cd4_test_result'=>$offline_count[0]->cd4_test_result,
                        'rpr_test'=>$offline_count[0]->rpr_test,
                        'rpr_test_result'=>$offline_count[0]->rpr_test_result,
                        'remarks' => $offline_count[0]->remarks,
                        'order_status' => $offline_count[0]->order_status,
                        'medtech' => $offline_count[0]->medtech,
                        'trace_number' => $offline_count[0]->trace_number,
                        'status' => $offline_count[0]->status,
                        'created_at' => $offline_count[0]->created_at,
                        'updated_at' => $offline_count[0]->updated_at
                    ]);
                }

            } else {
                DB::connection('mysql2')->table('laboratory_sorology')->insert([
                    'ls_id' => $offline->ls_id,
                    'order_id' => $offline->order_id,
                    'doctor_id' => $offline->doctor_id,
                    'patient_id' => $offline->patient_id,
                    'laboratory_id' => $offline->laboratory_id,
                    'ward_nurse_id' => $offline->ward_nurse_id,
                    'case_file' => $offline->case_file,
                    'is_viewed' => $offline->is_viewed,
                    'is_processed' => $offline->is_processed,
                    'is_processed_by' => $offline->is_processed_by,
                    'is_processed_time_start' => $offline->is_processed_time_start,
                    'is_processed_time_end' => $offline->is_processed_time_end,
                    'is_pending' => $offline->is_pending,
                    'is_pending_reason' => $offline->is_pending_reason,
                    'is_pending_date' => $offline->is_pending_date,
                    'is_pending_by' => $offline->is_pending_by,
                    'hbsag' => $offline->hbsag,
                    'hav' => $offline->hav,
                    'hcv' => $offline->hcv,
                    'vdrl_rpr' => $offline->vdrl_rpr,
                    'anti_hbc_igm' => $offline->anti_hbc_igm,
                    'beta_hcg_quali' => $offline->beta_hcg_quali,
                    'h_pylori' => $offline->h_pylori,
                    'typhidot' => $offline->typhidot,
                    'hact' => $offline->hact,
                    'ana' => $offline->ana,
                    'dengue_test' => $offline->dengue_test,
                    'dengue_test_result' => $offline->dengue_test_result,
                    'syphilis_test'=>$offline->syphilis_test,
                    'syphilis_test_result'=>$offline->syphilis_test_result,
                    'hiv_test'=>$offline->hiv_test,
                    'hiv_test_result'=>$offline->hiv_test_result,
                    'cd4_test'=>$offline->cd4_test,
                    'cd4_test_result'=>$offline->cd4_test_result,
                    'rpr_test'=>$offline->rpr_test,
                    'rpr_test_result'=>$offline->rpr_test_result,
                    'remarks' => $offline->remarks,
                    'order_status' => $offline->order_status,
                    'medtech' => $offline->medtech,
                    'trace_number' => $offline->trace_number,
                    'status' => $offline->status,
                    'created_at' => $offline->created_at,
                    'updated_at' => $offline->updated_at
                ]);
            }
        }

        // syncronize laboratory_sorology table from online to offline
        $offline_query = DB::connection('mysql2')->table('laboratory_sorology')->get();
        foreach ($offline_query as $online) {
            $online_count = DB::table('laboratory_sorology')->where('ls_id', $online->ls_id)->get();
            if (count($online_count) > 0) {
                DB::table('laboratory_sorology')->where('ls_id', $online->ls_id)->update([
                    'order_id' => $online->order_id,
                    'doctor_id' => $online->doctor_id,
                    'patient_id' => $online->patient_id,
                    'laboratory_id' => $online->laboratory_id,
                    'ward_nurse_id' => $online->ward_nurse_id,
                    'case_file' => $online->case_file,
                    'is_viewed' => $online->is_viewed,
                    'is_processed' => $online->is_processed,
                    'is_processed_by' => $online->is_processed_by,
                    'is_processed_time_start' => $online->is_processed_time_start,
                    'is_processed_time_end' => $online->is_processed_time_end,
                    'is_pending' => $online->is_pending,
                    'is_pending_reason' => $online->is_pending_reason,
                    'is_pending_date' => $online->is_pending_date,
                    'is_pending_by' => $online->is_pending_by,
                    'hbsag' => $online->hbsag,
                    'hav' => $online->hav,
                    'hcv' => $online->hcv,
                    'vdrl_rpr' => $online->vdrl_rpr,
                    'anti_hbc_igm' => $online->anti_hbc_igm,
                    'beta_hcg_quali' => $online->beta_hcg_quali,
                    'h_pylori' => $online->h_pylori,
                    'typhidot' => $online->typhidot,
                    'hact' => $online->hact,
                    'ana' => $online->ana,
                    'dengue_test' => $online->dengue_test,
                    'dengue_test_result' => $online->dengue_test_result,
                    'syphilis_test'=>$online->syphilis_test,
                    'syphilis_test_result'=>$online->syphilis_test_result,
                    'hiv_test'=>$online->hiv_test,
                    'hiv_test_result'=>$online->hiv_test_result,
                    'cd4_test'=>$online->cd4_test,
                    'cd4_test_result'=>$online->cd4_test_result,
                    'rpr_test'=>$online->rpr_test,
                    'rpr_test_result'=>$online->rpr_test_result,
                    'remarks' => $online->remarks,
                    'order_status' => $online->order_status,
                    'medtech' => $online->medtech,
                    'trace_number' => $online->trace_number,
                    'status' => $online->status,
                    'created_at' => $online->created_at,
                    'updated_at' => $online->updated_at
                ]);

            } else {
                DB::table('laboratory_sorology')->insert([
                    'ls_id' => $online->ls_id,
                    'order_id' => $online->order_id,
                    'doctor_id' => $online->doctor_id,
                    'patient_id' => $online->patient_id,
                    'laboratory_id' => $online->laboratory_id,
                    'ward_nurse_id' => $online->ward_nurse_id,
                    'case_file' => $online->case_file,
                    'is_viewed' => $online->is_viewed,
                    'is_processed' => $online->is_processed,
                    'is_processed_by' => $online->is_processed_by,
                    'is_processed_time_start' => $online->is_processed_time_start,
                    'is_processed_time_end' => $online->is_processed_time_end,
                    'is_pending' => $online->is_pending,
                    'is_pending_reason' => $online->is_pending_reason,
                    'is_pending_date' => $online->is_pending_date,
                    'is_pending_by' => $online->is_pending_by,
                    'hbsag' => $online->hbsag,
                    'hav' => $online->hav,
                    'hcv' => $online->hcv,
                    'vdrl_rpr' => $online->vdrl_rpr,
                    'anti_hbc_igm' => $online->anti_hbc_igm,
                    'beta_hcg_quali' => $online->beta_hcg_quali,
                    'h_pylori' => $online->h_pylori,
                    'typhidot' => $online->typhidot,
                    'hact' => $online->hact,
                    'ana' => $online->ana,
                    'dengue_test' => $online->dengue_test,
                    'dengue_test_result' => $online->dengue_test_result,
                    'syphilis_test'=>$online->syphilis_test,
                    'syphilis_test_result'=>$online->syphilis_test_result,
                    'hiv_test'=>$online->hiv_test,
                    'hiv_test_result'=>$online->hiv_test_result,
                    'cd4_test'=>$online->cd4_test,
                    'cd4_test_result'=>$online->cd4_test_result,
                    'rpr_test'=>$online->rpr_test,
                    'rpr_test_result'=>$online->rpr_test_result,
                    'remarks' => $online->remarks,
                    'order_status' => $online->order_status,
                    'medtech' => $online->medtech,
                    'trace_number' => $online->trace_number,
                    'status' => $online->status,
                    'created_at' => $online->created_at,
                    'updated_at' => $online->updated_at
                ]);
            }
        }

        return true;
    }

    public static function syncLaboratoryStoolTest(){
        // syncronize laboratory_stooltest table from offline to online 
        $offline_query = DB::table('laboratory_stooltest')->get();  
        foreach($offline_query as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_stooltest')->where('lf_id', $offline->lf_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_stooltest')->where('lf_id', $offline->lf_id)->update([  
                            'order_id'=>$offline->order_id, 
                            'doctor_id'=>$offline->doctor_id, 
                            'patient_id'=>$offline->patient_id, 
                            'laboratory_id'=>$offline->laboratory_id, 
                            'ward_nurse_id'=>$offline->ward_nurse_id, 
                            'case_file'=>$offline->case_file, 
                            'is_viewed'=>$offline->is_viewed, 
                            'is_processed'=>$offline->is_processed, 
                            'is_processed_by'=>$offline->is_processed_by, 
                            'is_processed_time_start'=>$offline->is_processed_time_start, 
                            'is_processed_time_end'=>$offline->is_processed_time_end, 
                            'is_pending'=>$offline->is_pending, 
                            'is_pending_reason'=>$offline->is_pending_reason, 
                            'is_pending_date'=>$offline->is_pending_date, 
                            'is_pending_by'=>$offline->is_pending_by,
                            'fecalysis'=>$offline->fecalysis,
                            'occult_blood'=>$offline->occult_blood,
                            'color'=>$offline->color,
                            'consistency'=>$offline->consistency,
                            'occult_blood_result'=>$offline->occult_blood_result,
                            'dfs'=>$offline->dfs,
                            'kt'=>$offline->kt,
                            'kk'=>$offline->kk,
                            'dfs_ascaris'=>$offline->dfs_ascaris,
                            'dfs_hookworm'=>$offline->dfs_hookworm,
                            'dfs_blastocystis'=>$offline->dfs_blastocystis,
                            'dfs_giardia_lamblia_cyst'=>$offline->dfs_giardia_lamblia_cyst,
                            'dfs_giardia_lamblia_trophozoite'=>$offline->dfs_giardia_lamblia_trophozoite,
                            'dfs_trichusris_trichuira'=>$offline->dfs_trichusris_trichuira,
                            'dfs_entamoeba_lamblia_cyst'=>$offline->dfs_entamoeba_lamblia_cyst,
                            'dfs_entamoeba_lamblia_trophozoite'=>$offline->dfs_entamoeba_lamblia_trophozoite,
                            'kt_ascaris'=>$offline->kt_ascaris,
                            'kt_hookworm'=>$offline->kt_hookworm,
                            'kt_blastocystis'=>$offline->kt_blastocystis,
                            'kt_giardia_lamblia_cyst'=>$offline->kt_giardia_lamblia_cyst,
                            'kt_giardia_lamblia_trophozoite'=>$offline->kt_giardia_lamblia_trophozoite,
                            'kt_trichusris_trichuira'=>$offline->kt_trichusris_trichuira,
                            'kt_entamoeba_lamblia_cyst'=>$offline->kt_entamoeba_lamblia_cyst,
                            'kt_entamoeba_lamblia_trophozoite'=>$offline->kt_entamoeba_lamblia_trophozoite,
                            'kk_ascaris'=>$offline->kk_ascaris,
                            'kk_hookworm'=>$offline->kk_hookworm,
                            'kk_blastocystis'=>$offline->kk_blastocystis,
                            'kk_giardia_lamblia_cyst'=>$offline->kk_giardia_lamblia_cyst,
                            'kk_giardia_lamblia_trophozoite'=>$offline->kk_giardia_lamblia_trophozoite,
                            'kk_trichusris_trichuira'=>$offline->kk_trichusris_trichuira,
                            'kk_entamoeba_lamblia_cyst'=>$offline->kk_entamoeba_lamblia_cyst,
                            'kk_entamoeba_lamblia_trophozoite'=>$offline->kk_entamoeba_lamblia_trophozoite,
                            'others'=>$offline->others,
                            'pus_cells'=>$offline->pus_cells,
                            'reb_blood_cells'=>$offline->reb_blood_cells,
                            'fat_globules'=>$offline->fat_globules,
                            'yeast_cells'=>$offline->yeast_cells,
                            'bacteria'=>$offline->bacteria,
                            'oil_droplets'=>$offline->oil_droplets,
                            'undigested_foods_paticles'=>$offline->undigested_foods_paticles,

                            'enterobius_vermicularis'=>$offline->enterobius_vermicularis,
                            'entamoeba_coli'=>$offline->entamoeba_coli,
                            'entamoeba_histolytica'=>$offline->entamoeba_histolytica,
                            'hpylori_stool'=>$offline->hpylori_stool,


                            'remarks'=>$offline->remarks,
                            'order_status'=>$offline->order_status,  
                            'medtech'=>$offline->medtech,  
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status, 
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]); 
                    } 
                    
                    else{
                        DB::table('laboratory_stooltest')->where('lf_id', $offline_count[0]->lf_id)->update([    
                            'order_id'=>$offline_count[0]->order_id, 
                            'doctor_id'=>$offline_count[0]->doctor_id, 
                            'patient_id'=>$offline_count[0]->patient_id, 
                            'laboratory_id'=>$offline_count[0]->laboratory_id, 
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id, 
                            'case_file'=>$offline_count[0]->case_file, 
                            'is_viewed'=>$offline_count[0]->is_viewed, 
                            'is_processed'=>$offline_count[0]->is_processed, 
                            'is_processed_by'=>$offline_count[0]->is_processed_by, 
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start, 
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end, 
                            'is_pending'=>$offline_count[0]->is_pending, 
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason, 
                            'is_pending_date'=>$offline_count[0]->is_pending_date, 
                            'is_pending_by'=>$offline_count[0]->is_pending_by,
                            'fecalysis'=>$offline_count[0]->fecalysis,
                            'occult_blood'=>$offline_count[0]->occult_blood,
                            'color'=>$offline_count[0]->color,
                            'consistency'=>$offline_count[0]->consistency,
                            'occult_blood_result'=>$offline_count[0]->occult_blood_result,
                            'dfs'=>$offline_count[0]->dfs,
                            'kt'=>$offline_count[0]->kt,
                            'kk'=>$offline_count[0]->kk,
                            'dfs_ascaris'=>$offline_count[0]->dfs_ascaris,
                            'dfs_hookworm'=>$offline_count[0]->dfs_hookworm,
                            'dfs_blastocystis'=>$offline_count[0]->dfs_blastocystis,
                            'dfs_giardia_lamblia_cyst'=>$offline_count[0]->dfs_giardia_lamblia_cyst,
                            'dfs_giardia_lamblia_trophozoite'=>$offline_count[0]->dfs_giardia_lamblia_trophozoite,
                            'dfs_trichusris_trichuira'=>$offline_count[0]->dfs_trichusris_trichuira,
                            'dfs_entamoeba_lamblia_cyst'=>$offline_count[0]->dfs_entamoeba_lamblia_cyst,
                            'dfs_entamoeba_lamblia_trophozoite'=>$offline_count[0]->dfs_entamoeba_lamblia_trophozoite,
                            'kt_ascaris'=>$offline_count[0]->kt_ascaris,
                            'kt_hookworm'=>$offline_count[0]->kt_hookworm,
                            'kt_blastocystis'=>$offline_count[0]->kt_blastocystis,
                            'kt_giardia_lamblia_cyst'=>$offline_count[0]->kt_giardia_lamblia_cyst,
                            'kt_giardia_lamblia_trophozoite'=>$offline_count[0]->kt_giardia_lamblia_trophozoite,
                            'kt_trichusris_trichuira'=>$offline_count[0]->kt_trichusris_trichuira,
                            'kt_entamoeba_lamblia_cyst'=>$offline_count[0]->kt_entamoeba_lamblia_cyst,
                            'kt_entamoeba_lamblia_trophozoite'=>$offline_count[0]->kt_entamoeba_lamblia_trophozoite,
                            'kk_ascaris'=>$offline_count[0]->kk_ascaris,
                            'kk_hookworm'=>$offline_count[0]->kk_hookworm,
                            'kk_blastocystis'=>$offline_count[0]->kk_blastocystis,
                            'kk_giardia_lamblia_cyst'=>$offline_count[0]->kk_giardia_lamblia_cyst,
                            'kk_giardia_lamblia_trophozoite'=>$offline_count[0]->kk_giardia_lamblia_trophozoite,
                            'kk_trichusris_trichuira'=>$offline_count[0]->kk_trichusris_trichuira,
                            'kk_entamoeba_lamblia_cyst'=>$offline_count[0]->kk_entamoeba_lamblia_cyst,
                            'kk_entamoeba_lamblia_trophozoite'=>$offline_count[0]->kk_entamoeba_lamblia_trophozoite,
                            'others'=>$offline_count[0]->others,
                            'pus_cells'=>$offline_count[0]->pus_cells,
                            'reb_blood_cells'=>$offline_count[0]->reb_blood_cells,
                            'fat_globules'=>$offline_count[0]->fat_globules,
                            'yeast_cells'=>$offline_count[0]->yeast_cells,
                            'bacteria'=>$offline_count[0]->bacteria,
                            'oil_droplets'=>$offline_count[0]->oil_droplets,
                            'undigested_foods_paticles'=>$offline_count[0]->undigested_foods_paticles,

                            'enterobius_vermicularis'=>$offline_count[0]->enterobius_vermicularis,
                            'entamoeba_coli'=>$offline_count[0]->entamoeba_coli,
                            'entamoeba_histolytica'=>$offline_count[0]->entamoeba_histolytica,
                            'hpylori_stool'=>$offline_count[0]->hpylori_stool,

                            'remarks'=>$offline_count[0]->remarks,
                            'order_status'=>$offline_count[0]->order_status,  
                            'medtech'=>$offline_count[0]->medtech,  
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status, 
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
    
                    }
        
                }else{
                    DB::connection('mysql2')->table('laboratory_stooltest')->insert([    
                        'lf_id' => $offline->lf_id,
                        'order_id'=>$offline->order_id, 
                        'doctor_id'=>$offline->doctor_id, 
                        'patient_id'=>$offline->patient_id, 
                        'laboratory_id'=>$offline->laboratory_id, 
                        'ward_nurse_id'=>$offline->ward_nurse_id, 
                        'case_file'=>$offline->case_file, 
                        'is_viewed'=>$offline->is_viewed, 
                        'is_processed'=>$offline->is_processed, 
                        'is_processed_by'=>$offline->is_processed_by, 
                        'is_processed_time_start'=>$offline->is_processed_time_start, 
                        'is_processed_time_end'=>$offline->is_processed_time_end, 
                        'is_pending'=>$offline->is_pending, 
                        'is_pending_reason'=>$offline->is_pending_reason, 
                        'is_pending_date'=>$offline->is_pending_date, 
                        'is_pending_by'=>$offline->is_pending_by,
                        'fecalysis'=>$offline->fecalysis,
                        'occult_blood'=>$offline->occult_blood,
                        'color'=>$offline->color,
                        'consistency'=>$offline->consistency,
                        'occult_blood_result'=>$offline->occult_blood_result,
                        'dfs'=>$offline->dfs,
                        'kt'=>$offline->kt,
                        'kk'=>$offline->kk,
                        'dfs_ascaris'=>$offline->dfs_ascaris,
                        'dfs_hookworm'=>$offline->dfs_hookworm,
                        'dfs_blastocystis'=>$offline->dfs_blastocystis,
                        'dfs_giardia_lamblia_cyst'=>$offline->dfs_giardia_lamblia_cyst,
                        'dfs_giardia_lamblia_trophozoite'=>$offline->dfs_giardia_lamblia_trophozoite,
                        'dfs_trichusris_trichuira'=>$offline->dfs_trichusris_trichuira,
                        'dfs_entamoeba_lamblia_cyst'=>$offline->dfs_entamoeba_lamblia_cyst,
                        'dfs_entamoeba_lamblia_trophozoite'=>$offline->dfs_entamoeba_lamblia_trophozoite,
                        'kt_ascaris'=>$offline->kt_ascaris,
                        'kt_hookworm'=>$offline->kt_hookworm,
                        'kt_blastocystis'=>$offline->kt_blastocystis,
                        'kt_giardia_lamblia_cyst'=>$offline->kt_giardia_lamblia_cyst,
                        'kt_giardia_lamblia_trophozoite'=>$offline->kt_giardia_lamblia_trophozoite,
                        'kt_trichusris_trichuira'=>$offline->kt_trichusris_trichuira,
                        'kt_entamoeba_lamblia_cyst'=>$offline->kt_entamoeba_lamblia_cyst,
                        'kt_entamoeba_lamblia_trophozoite'=>$offline->kt_entamoeba_lamblia_trophozoite,
                        'kk_ascaris'=>$offline->kk_ascaris,
                        'kk_hookworm'=>$offline->kk_hookworm,
                        'kk_blastocystis'=>$offline->kk_blastocystis,
                        'kk_giardia_lamblia_cyst'=>$offline->kk_giardia_lamblia_cyst,
                        'kk_giardia_lamblia_trophozoite'=>$offline->kk_giardia_lamblia_trophozoite,
                        'kk_trichusris_trichuira'=>$offline->kk_trichusris_trichuira,
                        'kk_entamoeba_lamblia_cyst'=>$offline->kk_entamoeba_lamblia_cyst,
                        'kk_entamoeba_lamblia_trophozoite'=>$offline->kk_entamoeba_lamblia_trophozoite,
                        'others'=>$offline->others,
                        'pus_cells'=>$offline->pus_cells,
                        'reb_blood_cells'=>$offline->reb_blood_cells,
                        'fat_globules'=>$offline->fat_globules,
                        'yeast_cells'=>$offline->yeast_cells,
                        'bacteria'=>$offline->bacteria,
                        'oil_droplets'=>$offline->oil_droplets,
                        'undigested_foods_paticles'=>$offline->undigested_foods_paticles,

                        'enterobius_vermicularis'=>$offline->enterobius_vermicularis,
                        'entamoeba_coli'=>$offline->entamoeba_coli,
                        'entamoeba_histolytica'=>$offline->entamoeba_histolytica,
                        'hpylori_stool'=>$offline->hpylori_stool,

                        'remarks'=>$offline->remarks,
                        'order_status'=>$offline->order_status,  
                        'medtech'=>$offline->medtech,  
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status, 
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        } 

        // syncronize laboratory_stooltest table from online to offline 
        $offline_query = DB::connection('mysql2')->table('laboratory_stooltest')->get();  
        foreach($offline_query as $online){  
            $online_count = DB::table('laboratory_stooltest')->where('lf_id', $online->lf_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_stooltest')->where('lf_id', $online->lf_id)->update([   
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,
                        'fecalysis'=>$online->fecalysis,
                        'occult_blood'=>$online->occult_blood,
                        'color'=>$online->color,
                        'consistency'=>$online->consistency,
                        'occult_blood_result'=>$online->occult_blood_result,
                        'dfs'=>$online->dfs,
                        'kt'=>$online->kt,
                        'kk'=>$online->kk,
                        'dfs_ascaris'=>$online->dfs_ascaris,
                        'dfs_hookworm'=>$online->dfs_hookworm,
                        'dfs_blastocystis'=>$online->dfs_blastocystis,
                        'dfs_giardia_lamblia_cyst'=>$online->dfs_giardia_lamblia_cyst,
                        'dfs_giardia_lamblia_trophozoite'=>$online->dfs_giardia_lamblia_trophozoite,
                        'dfs_trichusris_trichuira'=>$online->dfs_trichusris_trichuira,
                        'dfs_entamoeba_lamblia_cyst'=>$online->dfs_entamoeba_lamblia_cyst,
                        'dfs_entamoeba_lamblia_trophozoite'=>$online->dfs_entamoeba_lamblia_trophozoite,
                        'kt_ascaris'=>$online->kt_ascaris,
                        'kt_hookworm'=>$online->kt_hookworm,
                        'kt_blastocystis'=>$online->kt_blastocystis,
                        'kt_giardia_lamblia_cyst'=>$online->kt_giardia_lamblia_cyst,
                        'kt_giardia_lamblia_trophozoite'=>$online->kt_giardia_lamblia_trophozoite,
                        'kt_trichusris_trichuira'=>$online->kt_trichusris_trichuira,
                        'kt_entamoeba_lamblia_cyst'=>$online->kt_entamoeba_lamblia_cyst,
                        'kt_entamoeba_lamblia_trophozoite'=>$online->kt_entamoeba_lamblia_trophozoite,
                        'kk_ascaris'=>$online->kk_ascaris,
                        'kk_hookworm'=>$online->kk_hookworm,
                        'kk_blastocystis'=>$online->kk_blastocystis,
                        'kk_giardia_lamblia_cyst'=>$online->kk_giardia_lamblia_cyst,
                        'kk_giardia_lamblia_trophozoite'=>$online->kk_giardia_lamblia_trophozoite,
                        'kk_trichusris_trichuira'=>$online->kk_trichusris_trichuira,
                        'kk_entamoeba_lamblia_cyst'=>$online->kk_entamoeba_lamblia_cyst,
                        'kk_entamoeba_lamblia_trophozoite'=>$online->kk_entamoeba_lamblia_trophozoite,
                        'others'=>$online->others,
                        'pus_cells'=>$online->pus_cells,
                        'reb_blood_cells'=>$online->reb_blood_cells,
                        'fat_globules'=>$online->fat_globules,
                        'yeast_cells'=>$online->yeast_cells,
                        'bacteria'=>$online->bacteria,
                        'oil_droplets'=>$online->oil_droplets,
                        'undigested_foods_paticles'=>$online->undigested_foods_paticles,

                        'enterobius_vermicularis'=>$online->enterobius_vermicularis,
                        'entamoeba_coli'=>$online->entamoeba_coli,
                        'entamoeba_histolytica'=>$online->entamoeba_histolytica,
                        'hpylori_stool'=>$online->hpylori_stool,

                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,  
                        'medtech'=>$online->medtech,  
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]);
        
                }else{
                    DB::table('laboratory_stooltest')->insert([  
                        'lf_id' => $online->lf_id,
                        'order_id'=>$online->order_id, 
                        'doctor_id'=>$online->doctor_id, 
                        'patient_id'=>$online->patient_id, 
                        'laboratory_id'=>$online->laboratory_id, 
                        'ward_nurse_id'=>$online->ward_nurse_id, 
                        'case_file'=>$online->case_file, 
                        'is_viewed'=>$online->is_viewed, 
                        'is_processed'=>$online->is_processed, 
                        'is_processed_by'=>$online->is_processed_by, 
                        'is_processed_time_start'=>$online->is_processed_time_start, 
                        'is_processed_time_end'=>$online->is_processed_time_end, 
                        'is_pending'=>$online->is_pending, 
                        'is_pending_reason'=>$online->is_pending_reason, 
                        'is_pending_date'=>$online->is_pending_date, 
                        'is_pending_by'=>$online->is_pending_by,
                        'fecalysis'=>$online->fecalysis,
                        'occult_blood'=>$online->occult_blood,
                        'color'=>$online->color,
                        'consistency'=>$online->consistency,
                        'occult_blood_result'=>$online->occult_blood_result,
                        'dfs'=>$online->dfs,
                        'kt'=>$online->kt,
                        'kk'=>$online->kk,
                        'dfs_ascaris'=>$online->dfs_ascaris,
                        'dfs_hookworm'=>$online->dfs_hookworm,
                        'dfs_blastocystis'=>$online->dfs_blastocystis,
                        'dfs_giardia_lamblia_cyst'=>$online->dfs_giardia_lamblia_cyst,
                        'dfs_giardia_lamblia_trophozoite'=>$online->dfs_giardia_lamblia_trophozoite,
                        'dfs_trichusris_trichuira'=>$online->dfs_trichusris_trichuira,
                        'dfs_entamoeba_lamblia_cyst'=>$online->dfs_entamoeba_lamblia_cyst,
                        'dfs_entamoeba_lamblia_trophozoite'=>$online->dfs_entamoeba_lamblia_trophozoite,
                        'kt_ascaris'=>$online->kt_ascaris,
                        'kt_hookworm'=>$online->kt_hookworm,
                        'kt_blastocystis'=>$online->kt_blastocystis,
                        'kt_giardia_lamblia_cyst'=>$online->kt_giardia_lamblia_cyst,
                        'kt_giardia_lamblia_trophozoite'=>$online->kt_giardia_lamblia_trophozoite,
                        'kt_trichusris_trichuira'=>$online->kt_trichusris_trichuira,
                        'kt_entamoeba_lamblia_cyst'=>$online->kt_entamoeba_lamblia_cyst,
                        'kt_entamoeba_lamblia_trophozoite'=>$online->kt_entamoeba_lamblia_trophozoite,
                        'kk_ascaris'=>$online->kk_ascaris,
                        'kk_hookworm'=>$online->kk_hookworm,
                        'kk_blastocystis'=>$online->kk_blastocystis,
                        'kk_giardia_lamblia_cyst'=>$online->kk_giardia_lamblia_cyst,
                        'kk_giardia_lamblia_trophozoite'=>$online->kk_giardia_lamblia_trophozoite,
                        'kk_trichusris_trichuira'=>$online->kk_trichusris_trichuira,
                        'kk_entamoeba_lamblia_cyst'=>$online->kk_entamoeba_lamblia_cyst,
                        'kk_entamoeba_lamblia_trophozoite'=>$online->kk_entamoeba_lamblia_trophozoite,
                        'others'=>$online->others,
                        'pus_cells'=>$online->pus_cells,
                        'reb_blood_cells'=>$online->reb_blood_cells,
                        'fat_globules'=>$online->fat_globules,
                        'yeast_cells'=>$online->yeast_cells,
                        'bacteria'=>$online->bacteria,
                        'oil_droplets'=>$online->oil_droplets,
                        'undigested_foods_paticles'=>$online->undigested_foods_paticles,

                        'enterobius_vermicularis'=>$online->enterobius_vermicularis,
                        'entamoeba_coli'=>$online->entamoeba_coli,
                        'entamoeba_histolytica'=>$online->entamoeba_histolytica,
                        'hpylori_stool'=>$online->hpylori_stool,

                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,  
                        'medtech'=>$online->medtech,  
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status, 
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }
    
        return true;
    }
    
    public static function syncLaboratoryTest(){ 
        // syncronize laboratory_test table from offline to online   
        $offline = DB::table('laboratory_test')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_test')->where('lt_id', $offline->lt_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_test')->where('lt_id', $offline->lt_id)->update([    
                            'laboratory_id'=>$offline->laboratory_id,
                            'laboratory_test'=>$offline->laboratory_test,
                            'laboratory_rate'=>$offline->laboratory_rate,
                            'department'=>$offline->department,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at, 
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('laboratory_test')->where('lt_id', $offline_count[0]->lt_id)->update([  
                            'laboratory_id'=>$offline_count[0]->laboratory_id,
                            'laboratory_test'=>$offline_count[0]->laboratory_test,
                            'laboratory_rate'=>$offline_count[0]->laboratory_rate,
                            'department'=>$offline_count[0]->department,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('laboratory_test')->insert([ 
                        'lt_id'=> $offline->lt_id, 
                        'laboratory_id'=>$offline->laboratory_id,
                        'laboratory_test'=>$offline->laboratory_test,
                        'laboratory_rate'=>$offline->laboratory_rate,
                        'department'=>$offline->department,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize laboratory_test table from online to offline 
        $online = DB::connection('mysql2')->table('laboratory_test')->get();  
        foreach($online as $online){  
            $online_count = DB::table('laboratory_test')->where('lt_id', $online->lt_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_test')->where('lt_id', $online->lt_id)->update([  
                        'laboratory_id'=>$online->laboratory_id,
                        'laboratory_test'=>$online->laboratory_test,
                        'laboratory_rate'=>$online->laboratory_rate,
                        'department'=>$online->department,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('laboratory_test')->insert([    
                        'lt_id'=> $online->lt_id, 
                        'laboratory_id'=>$online->laboratory_id,
                        'laboratory_test'=>$online->laboratory_test,
                        'laboratory_rate'=>$online->laboratory_rate,
                        'department'=>$online->department,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    } 

    public static function syncLaboratoryThyroidProfile(){ 
        // syncronize laboratory_thyroid_profile table from offline to online   
        $offline = DB::table('laboratory_thyroid_profile')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_thyroid_profile')->where('ltp_id', $offline->ltp_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_thyroid_profile')->where('ltp_id', $offline->ltp_id)->update([    
                            'order_id'=>$offline->order_id,
                            'doctor_id'=>$offline->doctor_id,
                            'patient_id'=>$offline->patient_id,
                            'laboratory_id'=>$offline->laboratory_id,
                            'ward_nurse_id'=>$offline->ward_nurse_id,
                            'case_file'=>$offline->case_file,
                            'is_viewed'=>$offline->is_viewed,
                            'is_processed'=>$offline->is_processed,
                            'is_processed_by'=>$offline->is_processed_by,
                            'is_processed_time_start'=>$offline->is_processed_time_start,
                            'is_processed_time_end'=>$offline->is_processed_time_end,
                            'is_pending'=>$offline->is_pending,
                            'is_pending_reason'=>$offline->is_pending_reason,
                            'is_pending_date'=>$offline->is_pending_date,
                            'is_pending_by'=>$offline->is_pending_by,
                            'thyroid_test'=>$offline->thyroid_test,
                            't3'=>$offline->t3,
                            't3_remarks'=>$offline->t3_remarks,
                            't4'=>$offline->t4,
                            't4_remarks'=>$offline->t4_remarks,
                            'tsh'=>$offline->tsh,
                            'tsh_remarks'=>$offline->tsh_remarks,
                            'ft4'=>$offline->ft4,
                            'ft4_remarks'=>$offline->ft4_remarks,
                            'ft3'=>$offline->ft3,
                            'ft3_remarks'=>$offline->ft3_remarks, 
                            't3t4'=>$offline->t3t4,
                            't3t4_remarks'=>$offline->t3t4_remarks, 
                            'fht'=>$offline->fht,
                            'fht_remarks'=>$offline->fht_remarks, 
                            'remarks'=>$offline->remarks,
                            'order_status'=>$offline->order_status,
                            'medtech'=>$offline->medtech,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('laboratory_thyroid_profile')->where('ltp_id', $offline_count[0]->ltp_id)->update([  
                            'order_id'=>$offline_count[0]->order_id,
                            'doctor_id'=>$offline_count[0]->doctor_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'laboratory_id'=>$offline_count[0]->laboratory_id,
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id,
                            'case_file'=>$offline_count[0]->case_file,
                            'is_viewed'=>$offline_count[0]->is_viewed,
                            'is_processed'=>$offline_count[0]->is_processed,
                            'is_processed_by'=>$offline_count[0]->is_processed_by,
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start,
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end,
                            'is_pending'=>$offline_count[0]->is_pending,
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason,
                            'is_pending_date'=>$offline_count[0]->is_pending_date,
                            'is_pending_by'=>$offline_count[0]->is_pending_by,
                            'thyroid_test'=>$offline_count[0]->thyroid_test,
                            't3'=>$offline_count[0]->t3,
                            't3_remarks'=>$offline_count[0]->t3_remarks,
                            't4'=>$offline_count[0]->t4,
                            't4_remarks'=>$offline_count[0]->t4_remarks,
                            'tsh'=>$offline_count[0]->tsh,
                            'tsh_remarks'=>$offline_count[0]->tsh_remarks,
                            'ft4'=>$offline_count[0]->ft4,
                            'ft4_remarks'=>$offline_count[0]->ft4_remarks,
                            'ft3'=>$offline_count[0]->ft3,
                            'ft3_remarks'=>$offline_count[0]->ft3_remarks,
                            't3t4'=>$offline_count[0]->t3t4,
                            't3t4_remarks'=>$offline_count[0]->t3t4_remarks,
                            'fht'=>$offline_count[0]->fht,
                            'fht_remarks'=>$offline_count[0]->fht_remarks,
                            'remarks'=>$offline_count[0]->remarks,
                            'order_status'=>$offline_count[0]->order_status,
                            'medtech'=>$offline_count[0]->medtech,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('laboratory_thyroid_profile')->insert([ 
                        'ltp_id'=> $offline->ltp_id,
                        'order_id'=>$offline->order_id,
                        'doctor_id'=>$offline->doctor_id,
                        'patient_id'=>$offline->patient_id,
                        'laboratory_id'=>$offline->laboratory_id,
                        'ward_nurse_id'=>$offline->ward_nurse_id,
                        'case_file'=>$offline->case_file,
                        'is_viewed'=>$offline->is_viewed,
                        'is_processed'=>$offline->is_processed,
                        'is_processed_by'=>$offline->is_processed_by,
                        'is_processed_time_start'=>$offline->is_processed_time_start,
                        'is_processed_time_end'=>$offline->is_processed_time_end,
                        'is_pending'=>$offline->is_pending,
                        'is_pending_reason'=>$offline->is_pending_reason,
                        'is_pending_date'=>$offline->is_pending_date,
                        'is_pending_by'=>$offline->is_pending_by,
                        'thyroid_test'=>$offline->thyroid_test,
                        't3'=>$offline->t3,
                        't3_remarks'=>$offline->t3_remarks,
                        't4'=>$offline->t4,
                        't4_remarks'=>$offline->t4_remarks,
                        'tsh'=>$offline->tsh,
                        'tsh_remarks'=>$offline->tsh_remarks,
                        'ft4'=>$offline->ft4,
                        'ft4_remarks'=>$offline->ft4_remarks,
                        'ft3'=>$offline->ft3,
                        'ft3_remarks'=>$offline->ft3_remarks,
                        't3t4'=>$offline->t3t4,
                        't3t4_remarks'=>$offline->t3t4_remarks,
                        'fht'=>$offline->fht,
                        'fht_remarks'=>$offline->fht_remarks,
                        'remarks'=>$offline->remarks,
                        'order_status'=>$offline->order_status,
                        'medtech'=>$offline->medtech,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize laboratory_thyroid_profile table from online to offline 
        $online = DB::connection('mysql2')->table('laboratory_thyroid_profile')->get();  
        foreach($online as $online){  
            $online_count = DB::table('laboratory_thyroid_profile')->where('ltp_id', $online->ltp_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_thyroid_profile')->where('ltp_id', $online->ltp_id)->update([  
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'laboratory_id'=>$online->laboratory_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'thyroid_test'=>$online->thyroid_test,
                        't3'=>$online->t3,
                        't3_remarks'=>$online->t3_remarks,
                        't4'=>$online->t4,
                        't4_remarks'=>$online->t4_remarks,
                        'tsh'=>$online->tsh,
                        'tsh_remarks'=>$online->tsh_remarks,
                        'ft4'=>$online->ft4,
                        'ft4_remarks'=>$online->ft4_remarks,
                        'ft3'=>$online->ft3,
                        'ft3_remarks'=>$online->ft3_remarks,
                        't3t4'=>$online->t3t4,
                        't3t4_remarks'=>$online->t3t4_remarks,
                        'fht'=>$online->fht,
                        'fht_remarks'=>$online->fht_remarks,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('laboratory_thyroid_profile')->insert([    
                        'ltp_id'=> $online->ltp_id, 
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'laboratory_id'=>$online->laboratory_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'thyroid_test'=>$online->thyroid_test,
                        't3'=>$online->t3,
                        't3_remarks'=>$online->t3_remarks,
                        't4'=>$online->t4,
                        't4_remarks'=>$online->t4_remarks,
                        'tsh'=>$online->tsh,
                        'tsh_remarks'=>$online->tsh_remarks,
                        'ft4'=>$online->ft4,
                        'ft4_remarks'=>$online->ft4_remarks,
                        'ft3'=>$online->ft3,
                        'ft3_remarks'=>$online->ft3_remarks,
                        't3t4'=>$online->t3t4,
                        't3t4_remarks'=>$online->t3t4_remarks,
                        'fht'=>$online->fht,
                        'fht_remarks'=>$online->fht_remarks,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    } 

    public static function syncLaboratoryTumorMaker(){
        // syncronize laboratory_tumor_maker table from offline to online
        $offline = DB::table('laboratory_tumor_maker')->get();
        foreach ($offline as $offline) {
            $offline_count = DB::connection('mysql2')->table('laboratory_tumor_maker')->where('ltm_id', $offline->ltm_id)->get();
            if (count($offline_count) > 0) {
                if ($offline->updated_at > $offline_count[0]->updated_at) {
                    DB::connection('mysql2')->table('laboratory_tumor_maker')->where('ltm_id', $offline->ltm_id)->update([
                        'order_id' => $offline->order_id, 
                        'doctor_id' => $offline->doctor_id, 
                        'patient_id' => $offline->patient_id, 
                        'laboratory_id' => $offline->laboratory_id, 
                        'ward_nurse_id' => $offline->ward_nurse_id, 
                        'case_file' => $offline->case_file, 
                        'is_viewed' => $offline->is_viewed, 
                        'is_processed' => $offline->is_processed, 
                        'is_processed_by' => $offline->is_processed_by, 
                        'is_processed_time_start' => $offline->is_processed_time_start, 
                        'is_processed_time_end' => $offline->is_processed_time_end, 
                        'is_pending' => $offline->is_pending, 
                        'is_pending_reason' => $offline->is_pending_reason, 
                        'is_pending_date' => $offline->is_pending_date, 
                        'is_pending_by' => $offline->is_pending_by,  
                        'aso' => $offline->aso, 
                        'aso_result' => $offline->aso_result, 
                        'biopsy' => $offline->biopsy, 
                        'biopsy_result' => $offline->biopsy_result, 
                        'c3' => $offline->c3, 
                        'c3_result' => $offline->c3_result, 
                        'ca_125' => $offline->ca_125, 
                        'ca_125_result' => $offline->ca_125_result, 
                        'cea' => $offline->cea, 
                        'cea_result' => $offline->cea_result, 
                        'psa_prostate' => $offline->aso, 
                        'psa_prostate_result' => $offline->psa_prostate_result, 
                        'afp' => $offline->afp, 
                        'afp_result' => $offline->afp_result,    
                        'remarks' => $offline->remarks,  
                        'order_status' => $offline->order_status, 
                        'medtech' => $offline->medtech, 
                        'trace_number' => $offline->trace_number, 
                        'status' => $offline->status, 
                        'created_at' => $offline->created_at,
                        'updated_at' => $offline->updated_at,
                    ]);
                } else {
                    DB::table('laboratory_tumor_maker')->where('ltm_id', $offline_count[0]->ltm_id)->update([
                        'order_id' => $offline_count[0]->order_id, 
                        'doctor_id' => $offline_count[0]->doctor_id, 
                        'patient_id' => $offline_count[0]->patient_id, 
                        'laboratory_id' => $offline_count[0]->laboratory_id, 
                        'ward_nurse_id' => $offline_count[0]->ward_nurse_id, 
                        'case_file' => $offline_count[0]->case_file, 
                        'is_viewed' => $offline_count[0]->is_viewed, 
                        'is_processed' => $offline_count[0]->is_processed, 
                        'is_processed_by' => $offline_count[0]->is_processed_by, 
                        'is_processed_time_start' => $offline_count[0]->is_processed_time_start, 
                        'is_processed_time_end' => $offline_count[0]->is_processed_time_end, 
                        'is_pending' => $offline_count[0]->is_pending, 
                        'is_pending_reason' => $offline_count[0]->is_pending_reason, 
                        'is_pending_date' => $offline_count[0]->is_pending_date, 
                        'is_pending_by' => $offline_count[0]->is_pending_by, 
                        'aso' => $offline_count[0]->aso, 
                        'aso_result' => $offline_count[0]->aso_result, 
                        'biopsy' => $offline_count[0]->biopsy, 
                        'biopsy_result' => $offline_count[0]->biopsy_result, 
                        'c3' => $offline_count[0]->c3, 
                        'c3_result' => $offline_count[0]->c3_result, 
                        'ca_125' => $offline_count[0]->ca_125, 
                        'ca_125_result' => $offline_count[0]->ca_125_result, 
                        'cea' => $offline_count[0]->cea, 
                        'cea_result' => $offline_count[0]->cea_result, 
                        'psa_prostate' => $offline_count[0]->aso, 
                        'psa_prostate_result' => $offline_count[0]->psa_prostate_result, 
                        'afp' => $offline_count[0]->afp, 
                        'afp_result' => $offline_count[0]->afp_result,     
                        'remarks' => $offline_count[0]->remarks, 
                        'order_status' => $offline_count[0]->order_status, 
                        'medtech' => $offline_count[0]->medtech, 
                        'trace_number' => $offline_count[0]->trace_number, 
                        'status' => $offline_count[0]->status, 
                        'created_at' => $offline_count[0]->created_at,
                        'updated_at' => $offline_count[0]->updated_at,
                    ]);
                }
            } else {
                DB::connection('mysql2')->table('laboratory_tumor_maker')->insert([
                    'ltm_id' => $offline->ltm_id, 
                    'order_id' => $offline->order_id, 
                    'doctor_id' => $offline->doctor_id, 
                    'patient_id' => $offline->patient_id, 
                    'laboratory_id' => $offline->laboratory_id, 
                    'ward_nurse_id' => $offline->ward_nurse_id, 
                    'case_file' => $offline->case_file, 
                    'is_viewed' => $offline->is_viewed, 
                    'is_processed' => $offline->is_processed, 
                    'is_processed_by' => $offline->is_processed_by, 
                    'is_processed_time_start' => $offline->is_processed_time_start, 
                    'is_processed_time_end' => $offline->is_processed_time_end, 
                    'is_pending' => $offline->is_pending, 
                    'is_pending_reason' => $offline->is_pending_reason, 
                    'is_pending_date' => $offline->is_pending_date, 
                    'is_pending_by' => $offline->is_pending_by, 
                    'aso' => $offline->aso, 
                    'aso_result' => $offline->aso_result, 
                    'biopsy' => $offline->biopsy, 
                    'biopsy_result' => $offline->biopsy_result, 
                    'c3' => $offline->c3, 
                    'c3_result' => $offline->c3_result, 
                    'ca_125' => $offline->ca_125, 
                    'ca_125_result' => $offline->ca_125_result, 
                    'cea' => $offline->cea, 
                    'cea_result' => $offline->cea_result, 
                    'psa_prostate' => $offline->aso, 
                    'psa_prostate_result' => $offline->psa_prostate_result, 
                    'afp' => $offline->afp, 
                    'afp_result' => $offline->afp_result, 
                    'remarks' => $offline->remarks, 
                    'order_status' => $offline->order_status, 
                    'medtech' => $offline->medtech, 
                    'trace_number' => $offline->trace_number, 
                    'status' => $offline->status, 
                    'created_at' => $offline->created_at,
                    'updated_at' => $offline->updated_at,
                ]);
            }
        }

        // syncronize laboratory_tumor_maker table from online to offline
        $online = DB::connection('mysql2')->table('laboratory_tumor_maker')->get();
        foreach ($online as $online) {
            $online_count = DB::table('laboratory_tumor_maker')->where('ltm_id', $online->ltm_id)->get();
            if (count($online_count) > 0) {
                DB::table('laboratory_tumor_maker')->where('ltm_id', $online->ltm_id)->update([
                    'order_id' => $online->order_id, 
                    'doctor_id' => $online->doctor_id, 
                    'patient_id' => $online->patient_id, 
                    'laboratory_id' => $online->laboratory_id, 
                    'ward_nurse_id' => $online->ward_nurse_id, 
                    'case_file' => $online->case_file, 
                    'is_viewed' => $online->is_viewed, 
                    'is_processed' => $online->is_processed, 
                    'is_processed_by' => $online->is_processed_by, 
                    'is_processed_time_start' => $online->is_processed_time_start, 
                    'is_processed_time_end' => $online->is_processed_time_end, 
                    'is_pending' => $online->is_pending, 
                    'is_pending_reason' => $online->is_pending_reason, 
                    'is_pending_date' => $online->is_pending_date, 
                    'is_pending_by' => $online->is_pending_by, 
                    'aso' => $online->aso, 
                    'aso_result' => $online->aso_result, 
                    'biopsy' => $online->biopsy, 
                    'biopsy_result' => $online->biopsy_result, 
                    'c3' => $online->c3, 
                    'c3_result' => $online->c3_result, 
                    'ca_125' => $online->ca_125, 
                    'ca_125_result' => $online->ca_125_result, 
                    'cea' => $online->cea, 
                    'cea_result' => $online->cea_result, 
                    'psa_prostate' => $online->aso, 
                    'psa_prostate_result' => $online->psa_prostate_result, 
                    'afp' => $online->afp, 
                    'afp_result' => $online->afp_result, 
                    'remarks' => $online->remarks, 
                    'order_status' => $online->order_status, 
                    'medtech' => $online->medtech, 
                    'trace_number' => $online->trace_number, 
                    'status' => $online->status, 
                    'created_at' => $online->created_at,
                    'updated_at' => $online->updated_at,
                ]);
            } else {
                DB::table('laboratory_tumor_maker')->insert([
                    'ltm_id' => $online->ltm_id,  
                    'order_id' => $online->order_id, 
                    'doctor_id' => $online->doctor_id, 
                    'patient_id' => $online->patient_id, 
                    'laboratory_id' => $online->laboratory_id, 
                    'ward_nurse_id' => $online->ward_nurse_id, 
                    'case_file' => $online->case_file, 
                    'is_viewed' => $online->is_viewed, 
                    'is_processed' => $online->is_processed, 
                    'is_processed_by' => $online->is_processed_by, 
                    'is_processed_time_start' => $online->is_processed_time_start, 
                    'is_processed_time_end' => $online->is_processed_time_end, 
                    'is_pending' => $online->is_pending, 
                    'is_pending_reason' => $online->is_pending_reason, 
                    'is_pending_date' => $online->is_pending_date, 
                    'is_pending_by' => $online->is_pending_by, 
                    'aso' => $online->aso, 
                    'aso_result' => $online->aso_result, 
                    'biopsy' => $online->biopsy, 
                    'biopsy_result' => $online->biopsy_result, 
                    'c3' => $online->c3, 
                    'c3_result' => $online->c3_result, 
                    'ca_125' => $online->ca_125, 
                    'ca_125_result' => $online->ca_125_result, 
                    'cea' => $online->cea, 
                    'cea_result' => $online->cea_result, 
                    'psa_prostate' => $online->aso, 
                    'psa_prostate_result' => $online->psa_prostate_result, 
                    'afp' => $online->afp, 
                    'afp_result' => $online->afp_result, 
                    'remarks' => $online->remarks, 
                    'order_status' => $online->order_status, 
                    'medtech' => $online->medtech, 
                    'trace_number' => $online->trace_number, 
                    'status' => $online->status, 
                    'created_at' => $online->created_at,
                    'updated_at' => $online->updated_at,
                ]);
            }
        }

        return true;
    }

    public static function syncLaboratoryUrinalysis(){ 
        // syncronize laboratory_urinalysis table from offline to online   
        $offline = DB::table('laboratory_urinalysis')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_urinalysis')->where('lu_id', $offline->lu_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_urinalysis')->where('lu_id', $offline->lu_id)->update([    
                            'order_id'=>$offline->order_id,
                            'doctor_id'=>$offline->doctor_id,
                            'patient_id'=>$offline->patient_id,
                            'laboratory_id'=>$offline->laboratory_id,
                            'ward_nurse_id'=>$offline->ward_nurse_id,
                            'case_file'=>$offline->case_file,
                            'is_viewed'=>$offline->is_viewed,
                            'is_processed'=>$offline->is_processed,
                            'is_processed_by'=>$offline->is_processed_by,
                            'is_processed_time_start'=>$offline->is_processed_time_start,
                            'is_processed_time_end'=>$offline->is_processed_time_end,
                            'is_pending'=>$offline->is_pending,
                            'is_pending_reason'=>$offline->is_pending_reason,
                            'is_pending_date'=>$offline->is_pending_date,
                            'is_pending_by'=>$offline->is_pending_by,
                            'urinalysis'=>$offline->urinalysis,
                            'color'=>$offline->color,
                            'transparency'=>$offline->transparency,
                            'reaction'=>$offline->reaction,
                            'sp_gravity'=>$offline->sp_gravity,
                            'albumin'=>$offline->albumin,
                            'sugar'=>$offline->sugar,
                            'pus_cell'=>$offline->pus_cell,
                            'rbc'=>$offline->rbc,
                            'epithelial_cell'=>$offline->epithelial_cell,
                            'mucus_threads'=>$offline->mucus_threads,
                            'renal_cell'=>$offline->renal_cell,
                            'yeast_cell'=>$offline->yeast_cell,
                            'hyaline'=>$offline->hyaline,
                            'rbc_cast'=>$offline->rbc_cast,
                            'wbc_cast'=>$offline->wbc_cast,
                            'coarse_granular_cast'=>$offline->coarse_granular_cast,
                            'fine_granular_cast'=>$offline->fine_granular_cast,
                            'pus_in_clumps'=>$offline->pus_in_clumps,
                            'rbc_in_clumps'=>$offline->rbc_in_clumps,
                            'calcium_oxalate'=>$offline->calcium_oxalate,
                            'uric_acid'=>$offline->uric_acid,
                            'amorphous_phosphate'=>$offline->amorphous_phosphate,
                            'amorphous_urate'=>$offline->amorphous_urate,
                            'calcium_carbonate'=>$offline->calcium_carbonate,
                            'ammonium_biurate'=>$offline->ammonium_biurate,
                            'triple_phosphate'=>$offline->triple_phosphate,
                            'spermatozoa'=>$offline->spermatozoa,
                            'trichomonas_vaginalis'=>$offline->trichomonas_vaginalis,
                            'micral_test'=>$offline->micral_test,
                            'urine_ketone'=>$offline->urine_ketone,
                            'others'=>$offline->others,

                            'glucose'=>$offline->glucose,
                            'protein'=>$offline->protein,
                            'ph'=>$offline->ph,
                            'bacteria'=>$offline->bacteria,

                            'remarks'=>$offline->remarks,
                            'order_status'=>$offline->order_status,
                            'medtech'=>$offline->medtech,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('laboratory_urinalysis')->where('lu_id', $offline_count[0]->lu_id)->update([    
                            'order_id'=>$offline_count[0]->order_id,
                            'doctor_id'=>$offline_count[0]->doctor_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'laboratory_id'=>$offline_count[0]->laboratory_id,
                            'ward_nurse_id'=>$offline_count[0]->ward_nurse_id,
                            'case_file'=>$offline_count[0]->case_file,
                            'is_viewed'=>$offline_count[0]->is_viewed,
                            'is_processed'=>$offline_count[0]->is_processed,
                            'is_processed_by'=>$offline_count[0]->is_processed_by,
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start,
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end,
                            'is_pending'=>$offline_count[0]->is_pending,
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason,
                            'is_pending_date'=>$offline_count[0]->is_pending_date,
                            'is_pending_by'=>$offline_count[0]->is_pending_by,
                            'urinalysis'=>$offline_count[0]->urinalysis,
                            'color'=>$offline_count[0]->color,
                            'transparency'=>$offline_count[0]->transparency,
                            'reaction'=>$offline_count[0]->reaction,
                            'sp_gravity'=>$offline_count[0]->sp_gravity,
                            'albumin'=>$offline_count[0]->albumin,
                            'sugar'=>$offline_count[0]->sugar,
                            'pus_cell'=>$offline_count[0]->pus_cell,
                            'rbc'=>$offline_count[0]->rbc,
                            'epithelial_cell'=>$offline_count[0]->epithelial_cell,
                            'mucus_threads'=>$offline_count[0]->mucus_threads,
                            'renal_cell'=>$offline_count[0]->renal_cell,
                            'yeast_cell'=>$offline_count[0]->yeast_cell,
                            'hyaline'=>$offline_count[0]->hyaline,
                            'rbc_cast'=>$offline_count[0]->rbc_cast,
                            'wbc_cast'=>$offline_count[0]->wbc_cast,
                            'coarse_granular_cast'=>$offline_count[0]->coarse_granular_cast,
                            'fine_granular_cast'=>$offline_count[0]->fine_granular_cast,
                            'pus_in_clumps'=>$offline_count[0]->pus_in_clumps,
                            'rbc_in_clumps'=>$offline_count[0]->rbc_in_clumps,
                            'calcium_oxalate'=>$offline_count[0]->calcium_oxalate,
                            'uric_acid'=>$offline_count[0]->uric_acid,
                            'amorphous_phosphate'=>$offline_count[0]->amorphous_phosphate,
                            'amorphous_urate'=>$offline_count[0]->amorphous_urate,
                            'calcium_carbonate'=>$offline_count[0]->calcium_carbonate,
                            'ammonium_biurate'=>$offline_count[0]->ammonium_biurate,
                            'triple_phosphate'=>$offline_count[0]->triple_phosphate,
                            'spermatozoa'=>$offline_count[0]->spermatozoa,
                            'trichomonas_vaginalis'=>$offline_count[0]->trichomonas_vaginalis,
                            'micral_test'=>$offline_count[0]->micral_test,
                            'urine_ketone'=>$offline_count[0]->urine_ketone,
                            'others'=>$offline_count[0]->others,

                            'glucose'=>$offline_count[0]->glucose,
                            'protein'=>$offline_count[0]->protein,
                            'ph'=>$offline_count[0]->ph,
                            'bacteria'=>$offline_count[0]->bacteria,

                            'remarks'=>$offline_count[0]->remarks,
                            'order_status'=>$offline_count[0]->order_status,
                            'medtech'=>$offline_count[0]->medtech,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('laboratory_urinalysis')->insert([ 
                        'lu_id'=> $offline->lu_id,
                        'order_id'=>$offline->order_id,
                        'doctor_id'=>$offline->doctor_id,
                        'patient_id'=>$offline->patient_id,
                        'laboratory_id'=>$offline->laboratory_id,
                        'ward_nurse_id'=>$offline->ward_nurse_id,
                        'case_file'=>$offline->case_file,
                        'is_viewed'=>$offline->is_viewed,
                        'is_processed'=>$offline->is_processed,
                        'is_processed_by'=>$offline->is_processed_by,
                        'is_processed_time_start'=>$offline->is_processed_time_start,
                        'is_processed_time_end'=>$offline->is_processed_time_end,
                        'is_pending'=>$offline->is_pending,
                        'is_pending_reason'=>$offline->is_pending_reason,
                        'is_pending_date'=>$offline->is_pending_date,
                        'is_pending_by'=>$offline->is_pending_by, 
                        'urinalysis'=>$offline->urinalysis,
                        'color'=>$offline->color,
                        'transparency'=>$offline->transparency,
                        'reaction'=>$offline->reaction,
                        'sp_gravity'=>$offline->sp_gravity,
                        'albumin'=>$offline->albumin,
                        'sugar'=>$offline->sugar,
                        'pus_cell'=>$offline->pus_cell,
                        'rbc'=>$offline->rbc,
                        'epithelial_cell'=>$offline->epithelial_cell,
                        'mucus_threads'=>$offline->mucus_threads,
                        'renal_cell'=>$offline->renal_cell,
                        'yeast_cell'=>$offline->yeast_cell,
                        'hyaline'=>$offline->hyaline,
                        'rbc_cast'=>$offline->rbc_cast,
                        'wbc_cast'=>$offline->wbc_cast,
                        'coarse_granular_cast'=>$offline->coarse_granular_cast,
                        'fine_granular_cast'=>$offline->fine_granular_cast,
                        'pus_in_clumps'=>$offline->pus_in_clumps,
                        'rbc_in_clumps'=>$offline->rbc_in_clumps,
                        'calcium_oxalate'=>$offline->calcium_oxalate,
                        'uric_acid'=>$offline->uric_acid,
                        'amorphous_phosphate'=>$offline->amorphous_phosphate,
                        'amorphous_urate'=>$offline->amorphous_urate,
                        'calcium_carbonate'=>$offline->calcium_carbonate,
                        'ammonium_biurate'=>$offline->ammonium_biurate,
                        'triple_phosphate'=>$offline->triple_phosphate,
                        'spermatozoa'=>$offline->spermatozoa,
                        'trichomonas_vaginalis'=>$offline->trichomonas_vaginalis,
                        'micral_test'=>$offline->micral_test,
                        'urine_ketone'=>$offline->urine_ketone,
                        'others'=>$offline->others,

                        'glucose'=>$offline->glucose,
                        'protein'=>$offline->protein,
                        'ph'=>$offline->ph,
                        'bacteria'=>$offline->bacteria,

                        'remarks'=>$offline->remarks,
                        'order_status'=>$offline->order_status,
                        'medtech'=>$offline->medtech,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at 
                    ]); 
                } 
        }

        // syncronize laboratory_urinalysis table from online to offline 
        $online = DB::connection('mysql2')->table('laboratory_urinalysis')->get();  
        foreach($online as $online){  
            $online_count = DB::table('laboratory_urinalysis')->where('lu_id', $online->lu_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_urinalysis')->where('lu_id', $online->lu_id)->update([   
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'laboratory_id'=>$online->laboratory_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'urinalysis'=>$online->urinalysis,
                        'color'=>$online->color,
                        'transparency'=>$online->transparency,
                        'reaction'=>$online->reaction,
                        'sp_gravity'=>$online->sp_gravity,
                        'albumin'=>$online->albumin,
                        'sugar'=>$online->sugar,
                        'pus_cell'=>$online->pus_cell,
                        'rbc'=>$online->rbc,
                        'epithelial_cell'=>$online->epithelial_cell,
                        'mucus_threads'=>$online->mucus_threads,
                        'renal_cell'=>$online->renal_cell,
                        'yeast_cell'=>$online->yeast_cell,
                        'hyaline'=>$online->hyaline,
                        'rbc_cast'=>$online->rbc_cast,
                        'wbc_cast'=>$online->wbc_cast,
                        'coarse_granular_cast'=>$online->coarse_granular_cast,
                        'fine_granular_cast'=>$online->fine_granular_cast,
                        'pus_in_clumps'=>$online->pus_in_clumps,
                        'rbc_in_clumps'=>$online->rbc_in_clumps,
                        'calcium_oxalate'=>$online->calcium_oxalate,
                        'uric_acid'=>$online->uric_acid,
                        'amorphous_phosphate'=>$online->amorphous_phosphate,
                        'amorphous_urate'=>$online->amorphous_urate,
                        'calcium_carbonate'=>$online->calcium_carbonate,
                        'ammonium_biurate'=>$online->ammonium_biurate,
                        'triple_phosphate'=>$online->triple_phosphate,
                        'spermatozoa'=>$online->spermatozoa,
                        'trichomonas_vaginalis'=>$online->trichomonas_vaginalis,
                        'micral_test'=>$online->micral_test,
                        'urine_ketone'=>$online->urine_ketone,
                        'others'=>$online->others,

                        'glucose'=>$online->glucose,
                        'protein'=>$online->protein,
                        'ph'=>$online->ph,
                        'bacteria'=>$online->bacteria,

                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at 
                    ]); 
                }else{
                    DB::table('laboratory_urinalysis')->insert([   
                        'lu_id'=> $online->lu_id,
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'laboratory_id'=>$online->laboratory_id,
                        'ward_nurse_id'=>$online->ward_nurse_id,
                        'case_file'=>$online->case_file,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by, 
                        'urinalysis'=>$online->urinalysis,
                        'color'=>$online->color,
                        'transparency'=>$online->transparency,
                        'reaction'=>$online->reaction,
                        'sp_gravity'=>$online->sp_gravity,
                        'albumin'=>$online->albumin,
                        'sugar'=>$online->sugar,
                        'pus_cell'=>$online->pus_cell,
                        'rbc'=>$online->rbc,
                        'epithelial_cell'=>$online->epithelial_cell,
                        'mucus_threads'=>$online->mucus_threads,
                        'renal_cell'=>$online->renal_cell,
                        'yeast_cell'=>$online->yeast_cell,
                        'hyaline'=>$online->hyaline,
                        'rbc_cast'=>$online->rbc_cast,
                        'wbc_cast'=>$online->wbc_cast,
                        'coarse_granular_cast'=>$online->coarse_granular_cast,
                        'fine_granular_cast'=>$online->fine_granular_cast,
                        'pus_in_clumps'=>$online->pus_in_clumps,
                        'rbc_in_clumps'=>$online->rbc_in_clumps,
                        'calcium_oxalate'=>$online->calcium_oxalate,
                        'uric_acid'=>$online->uric_acid,
                        'amorphous_phosphate'=>$online->amorphous_phosphate,
                        'amorphous_urate'=>$online->amorphous_urate,
                        'calcium_carbonate'=>$online->calcium_carbonate,
                        'ammonium_biurate'=>$online->ammonium_biurate,
                        'triple_phosphate'=>$online->triple_phosphate,
                        'spermatozoa'=>$online->spermatozoa,
                        'trichomonas_vaginalis'=>$online->trichomonas_vaginalis,
                        'micral_test'=>$online->micral_test,
                        'urine_ketone'=>$online->urine_ketone,
                        'others'=>$online->others,

                        'glucose'=>$online->glucose,
                        'protein'=>$online->protein,
                        'ph'=>$online->ph,
                        'bacteria'=>$online->bacteria,

                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'medtech'=>$online->medtech,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at 
                    ]); 
                } 
        }   

        return true;
    } 

    public static function syncManagement($data){
        // syncronize management table from offline to online   
        $offline = DB::table('management')->get();  
        foreach($offline as $offline){
            $offline_count = DB::connection('mysql2')->table('management')->where('m_id', $offline->m_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('management')->where('m_id', $offline->m_id)->update([    
                            'management_id'=>$offline->management_id,
                            'user_id'=>$offline->user_id,
                            'name'=>$offline->name,
                            'address'=>$offline->address,
                            'tin'=>$offline->tin,
                            'business_style'=>$offline->business_style,
                            'tax_type'=>$offline->tax_type,
                            'logo'=>$offline->logo,
                            'image'=>$offline->image,
                            'header'=>$offline->header,
                            'branch_type'=>$offline->branch_type,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('management')->where('m_id', $offline_count[0]->m_id)->update([  
                            'management_id'=>$offline_count[0]->management_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'name'=>$offline_count[0]->name,
                            'address'=>$offline_count[0]->address,
                            'tin'=>$offline_count[0]->tin,
                            'business_style'=>$offline_count[0]->business_style,
                            'tax_type'=>$offline_count[0]->tax_type,
                            'logo'=>$offline_count[0]->logo,
                            'image'=>$offline_count[0]->image,
                            'header'=>$offline_count[0]->header,
                            'branch_type'=>$offline_count[0]->branch_type,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('management')->insert([ 
                        'm_id'=> $offline->m_id, 
                        'management_id'=>$offline->management_id,
                        'user_id'=>$offline->user_id,
                        'name'=>$offline->name,
                        'address'=>$offline->address,
                        'tin'=>$offline->tin,
                        'business_style'=>$offline->business_style,
                        'tax_type'=>$offline->tax_type,
                        'logo'=>$offline->logo,
                        'image'=>$offline->image,
                        'header'=>$offline->header,
                        'branch_type'=>$offline->branch_type,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize management table from online to offline 
        $online = DB::connection('mysql2')->table('management')->get();  
        foreach($online as $online){  
            $lab_online_count = DB::table('management')->where('m_id', $online->m_id)->get();
                if(count($lab_online_count) > 0){
                    DB::table('management')->where('m_id', $online->m_id)->update([  
                        'management_id'=>$online->management_id,
                        'user_id'=>$online->user_id,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'tin'=>$online->tin,
                        'business_style'=>$online->business_style,
                        'tax_type'=>$online->tax_type,
                        'logo'=>$online->logo,
                        'image'=>$online->image,
                        'header'=>$online->header,
                        'branch_type'=>$online->branch_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('management')->insert([    
                        'm_id'=> $online->m_id, 
                        'management_id'=>$online->management_id,
                        'user_id'=>$online->user_id,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'tin'=>$online->tin,
                        'business_style'=>$online->business_style,
                        'tax_type'=>$online->tax_type,
                        'logo'=>$online->logo,
                        'image'=>$online->image,
                        'header'=>$online->header,
                        'branch_type'=>$online->branch_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncManagementAccreditedCompanies($data){
        // syncronize management_accredited_companies table from offline to online   
        $offline = DB::table('management_accredited_companies')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('management_accredited_companies')->where('mac_id', $offline->mac_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('management_accredited_companies')->where('mac_id', $offline->mac_id)->update([    
                            'management_id'=>$offline->management_id,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'company_id'=>$offline->company_id,
                            'company'=>$offline->company,
                            'address'=>$offline->address,
                            'tin'=>$offline->tin,
                            'contact_person'=>$offline->contact_person,
                            'contact'=>$offline->contact,
                            'contact_position'=>$offline->contact_position,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('management_accredited_companies')->where('mac_id', $offline_count[0]->mac_id)->update([  
                            'management_id'=>$offline_count[0]->management_id,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'company_id'=>$offline_count[0]->company_id,
                            'company'=>$offline_count[0]->company,
                            'address'=>$offline_count[0]->address,
                            'tin'=>$offline_count[0]->tin,
                            'contact_person'=>$offline_count[0]->contact_person,
                            'contact'=>$offline_count[0]->contact,
                            'contact_position'=>$offline_count[0]->contact_position,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('management_accredited_companies')->insert([ 
                        'mac_id'=> $offline->mac_id, 
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'company_id'=>$offline->company_id,
                        'company'=>$offline->company,
                        'address'=>$offline->address,
                        'tin'=>$offline->tin,
                        'contact_person'=>$offline->contact_person,
                        'contact'=>$offline->contact,
                        'contact_position'=>$offline->contact_position,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize management_accredited_companies table from online to offline 
        $online = DB::connection('mysql2')->table('management_accredited_companies')->where('management_id', $data['management_id'])->get();  
        foreach($online as $online){  
            $lab_online_count = DB::table('management_accredited_companies')->where('mac_id', $online->mac_id)->get();
                if(count($lab_online_count) > 0){
                    DB::table('management_accredited_companies')->where('mac_id', $online->mac_id)->update([  
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'company_id'=>$online->company_id,
                        'company'=>$online->company,
                        'address'=>$online->address,
                        'tin'=>$online->tin,
                        'contact_person'=>$online->contact_person,
                        'contact'=>$online->contact,
                        'contact_position'=>$online->contact_position,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('management_accredited_companies')->insert([  
                        'mac_id'=> $online->mac_id, 
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'company_id'=>$online->company_id,
                        'company'=>$online->company,
                        'address'=>$online->address,
                        'tin'=>$online->tin,
                        'contact_person'=>$online->contact_person,
                        'contact'=>$online->contact,
                        'contact_position'=>$online->contact_position,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncManagementAccreditedCompanyHMO($data){
        // syncronize management_accredited_company_hmo table from offline to online   
        $offline = DB::table('management_accredited_company_hmo')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('management_accredited_company_hmo')->where('mach_id', $offline->mach_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('management_accredited_company_hmo')->where('mach_id', $offline->mach_id)->update([    
                            'company_id'=>$offline->company_id,
                            'management_id'=>$offline->management_id,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'hmo'=>$offline->hmo,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('management_accredited_company_hmo')->where('mach_id', $offline_count[0]->mach_id)->update([  
                            'company_id'=>$offline_count[0]->company_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'hmo'=>$offline_count[0]->hmo,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('management_accredited_company_hmo')->insert([ 
                        'mach_id'=> $offline->mach_id, 
                        'company_id'=>$offline->company_id,
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'hmo'=>$offline->hmo,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize management_accredited_company_hmo table from online to offline 
        $online = DB::connection('mysql2')->table('management_accredited_company_hmo')->where('management_id', $data['management_id'])->get();  
        foreach($online as $online){  
            $lab_online_count = DB::table('management_accredited_company_hmo')->where('mach_id', $online->mach_id)->get();
                if(count($lab_online_count) > 0){
                    DB::table('management_accredited_company_hmo')->where('mach_id', $online->mach_id)->update([  
                        'company_id'=>$online->company_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'hmo'=>$online->hmo,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('management_accredited_company_hmo')->insert([  
                        'mach_id'=> $online->mach_id, 
                        'company_id'=>$online->company_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'hmo'=>$online->hmo,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncMedicalExaminationTest($data){
        // syncronize medical_examination_test table from offline to online
        $offline = DB::table('medical_examination_test')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('medical_examination_test')->where('met_id', $offline->met_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('medical_examination_test')->where('met_id', $offline->met_id)->update([    
                            'management_id'=> $offline->management_id,
                            'test_id'=> $offline->test_id,
                            'department'=>$offline->department,
                            'test'=>$offline->test,
                            'rate'=>$offline->rate,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('medical_examination_test')->where('met_id', $offline_count[0]->met_id)->update([   
                            'management_id'=> $offline_count[0]->management_id,
                            'test_id'=> $offline_count[0]->test_id,
                            'department'=>$offline_count[0]->department,
                            'test'=>$offline_count[0]->test,
                            'rate'=>$offline_count[0]->rate,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('medical_examination_test')->insert([
                        'met_id'=> $offline->met_id,
                        'management_id'=> $offline->management_id,
                        'test_id'=> $offline->test_id,
                        'department'=>$offline->department,
                        'test'=>$offline->test,
                        'rate'=>$offline->rate,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize medical_examination_test table from online to offline 
        $online = DB::connection('mysql2')->table('medical_examination_test')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('medical_examination_test')->where('met_id', $online->met_id)->get();
                if(count($online_count) > 0){
                    DB::table('medical_examination_test')->where('met_id', $online->met_id)->update([ 
                        'management_id'=>$online->management_id,
                        'test_id'=>$online->test_id,
                        'department'=>$online->department,
                        'test'=>$online->test,
                        'rate'=>$online->rate,
                        'status' => $online->status, 
                        'updated_at'=>$online->updated_at 
                    ]); 
                }else{
                    DB::table('medical_examination_test')->insert([  
                        'met_id'=> $online->met_id,
                        'management_id'=> $online->management_id,
                        'test_id'=> $online->test_id,
                        'department'=>$online->department,
                        'test'=>$online->test,
                        'rate'=>$online->rate,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    // public static function syncMobileVanQueue($data){
    //     // syncronize mobile_van_queue table from offline to online
    //     $offline = DB::table('mobile_van_queue')->where('management_id', $data['management_id'])->get();  
    //     foreach($offline as $offline){  
    //         $offline_count = DB::connection('mysql2')->table('mobile_van_queue')->where('mv_id', $offline->mv_id)->get();
    //             if(count($offline_count) > 0){ 
    //                 if($offline->updated_at > $offline_count[0]->updated_at){  
    //                     DB::connection('mysql2')->table('mobile_van_queue')->where('mv_id', $offline->mv_id)->update([    
    //                         'patient_id'=> $offline->patient_id,
    //                         'management_id'=> $offline->management_id,
    //                         'main_mgmt_id'=>$offline->main_mgmt_id,
    //                         'doctor_id'=>$offline->doctor_id,
    //                         'type'=>$offline->type,
    //                         'transaction_type'=>$offline->transaction_type,
    //                         'trace_number'=>$offline->trace_number,
    //                         'priority_sequence'=>$offline->priority_sequence,
    //                         'status'=>$offline->status,
    //                         'created_at'=>$offline->created_at,
    //                         'updated_at'=>$offline->updated_at
    //                     ]);
    //                 } 
    //                 else{
    //                     DB::table('mobile_van_queue')->where('mv_id', $offline_count[0]->mv_id)->update([   
    //                         'patient_id'=> $offline_count[0]->patient_id,
    //                         'management_id'=> $offline_count[0]->management_id,
    //                         'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
    //                         'doctor_id'=>$offline_count[0]->doctor_id,
    //                         'type'=>$offline_count[0]->type,
    //                         'transaction_type'=>$offline_count[0]->transaction_type,
    //                         'trace_number'=>$offline_count[0]->trace_number,
    //                         'priority_sequence'=>$offline_count[0]->priority_sequence,
    //                         'status'=>$offline_count[0]->status,
    //                         'created_at'=>$offline_count[0]->created_at,
    //                         'updated_at'=>$offline_count[0]->updated_at
    //                     ]);
    //                 }  
    //             }else{
    //                 DB::connection('mysql2')->table('mobile_van_queue')->insert([
    //                     'mv_id'=> $offline->mv_id,
    //                     'patient_id'=> $offline->patient_id,
    //                     'management_id'=> $offline->management_id,
    //                     'main_mgmt_id'=>$offline->main_mgmt_id,
    //                     'doctor_id'=>$offline->doctor_id,
    //                     'type'=>$offline->type,
    //                     'transaction_type'=>$offline->transaction_type,
    //                     'trace_number'=>$offline->trace_number,
    //                     'priority_sequence'=>$offline->priority_sequence,
    //                     'status'=>$offline->status,
    //                     'created_at'=>$offline->created_at,
    //                     'updated_at'=>$offline->updated_at
    //                 ]); 
    //             } 
    //     }

    //     // syncronize mobile_van_queue table from online to offline 
    //     $online = DB::connection('mysql2')->table('mobile_van_queue')->where('management_id', $data['management_id'])->get();
    //     foreach($online as $online){  
    //         $online_count = DB::table('mobile_van_queue')->where('mv_id', $online->mv_id)->get();
    //             if(count($online_count) > 0){
    //                 DB::table('mobile_van_queue')->where('mv_id', $online->mv_id)->update([ 
    //                     'patient_id'=> $online->patient_id,
    //                     'management_id'=> $online->management_id,
    //                     'main_mgmt_id'=>$online->main_mgmt_id,
    //                     'doctor_id'=>$online->doctor_id,
    //                     'type'=>$online->type,
    //                     'transaction_type'=>$online->transaction_type,
    //                     'trace_number'=>$online->trace_number,
    //                     'priority_sequence'=>$online->priority_sequence,
    //                     'status'=>$online->status,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                 ]); 
    //             }else{
    //                 DB::table('mobile_van_queue')->insert([  
    //                     'mv_id'=> $online->mv_id,
    //                     'patient_id'=> $online->patient_id,
    //                     'management_id'=> $online->management_id,
    //                     'main_mgmt_id'=>$online->main_mgmt_id,
    //                     'doctor_id'=>$online->doctor_id,
    //                     'type'=>$online->type,
    //                     'transaction_type'=>$online->transaction_type,
    //                     'trace_number'=>$online->trace_number,
    //                     'priority_sequence'=>$online->priority_sequence,
    //                     'status'=>$online->status,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                 ]); 
    //             } 
    //     }   

    //     return true;
    // }

    public static function syncNurseAccount($data){
        // syncronize nurses table from offline to online   
        $offline = DB::table('nurses')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('nurses')->where('n_id', $offline->n_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('nurses')->where('n_id', $offline->n_id)->update([    
                            'nurse_id'=>$offline->nurse_id,
                            'user_id'=>$offline->user_id,
                            'management_id'=>$offline->management_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'address'=>$offline->address,
                            'gender'=>$offline->gender,
                            'email'=>$offline->email,
                            'birthday'=>$offline->birthday,
                            'image'=>$offline->image,
                            'status'=>$offline->status,
                            'role'=>$offline->role,
                            'added_by'=>$offline->added_by,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('nurses')->where('n_id', $offline_count[0]->n_id)->update([  
                            'nurse_id'=>$offline_count[0]->nurse_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'address'=>$offline_count[0]->address,
                            'gender'=>$offline_count[0]->gender,
                            'email'=>$offline_count[0]->email,
                            'birthday'=>$offline_count[0]->birthday,
                            'image'=>$offline_count[0]->image,
                            'status'=>$offline_count[0]->status,
                            'role'=>$offline_count[0]->role,
                            'added_by'=>$offline_count[0]->added_by,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('nurses')->insert([ 
                        'n_id'=> $offline->n_id, 
                        'nurse_id'=>$offline->nurse_id,
                        'user_id'=>$offline->user_id,
                        'management_id'=>$offline->management_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'address'=>$offline->address,
                        'gender'=>$offline->gender,
                        'email'=>$offline->email,
                        'birthday'=>$offline->birthday,
                        'image'=>$offline->image,
                        'status'=>$offline->status,
                        'role'=>$offline->role,
                        'added_by'=>$offline->added_by,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize nurses table from online to offline 
        $online = DB::connection('mysql2')->table('nurses')->where('management_id', $data['management_id'])->get();  
        foreach($online as $online){  
            $lab_online_count = DB::table('nurses')->where('n_id', $online->n_id)->get();
                if(count($lab_online_count) > 0){
                    DB::table('nurses')->where('n_id', $online->n_id)->update([  
                        'nurse_id'=>$online->nurse_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'gender'=>$online->gender,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'role'=>$online->role,
                        'added_by'=>$online->added_by,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('nurses')->insert([  
                        'n_id'=> $online->n_id, 
                        'nurse_id'=>$online->nurse_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'gender'=>$online->gender,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'role'=>$online->role,
                        'added_by'=>$online->added_by,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncOperationManagerAccount($data){
        // syncronize operation_manager_account table from offline to online   
        $offline = DB::table('operation_manager_account')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('operation_manager_account')->where('m_id', $offline->m_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('operation_manager_account')->where('m_id', $offline->m_id)->update([    
                            'om_id'=>$offline->om_id,
                            'user_id'=>$offline->user_id,
                            'management_id'=>$offline->management_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'gender'=>$offline->gender,
                            'address'=>$offline->address,
                            'email'=>$offline->email,
                            'birthday'=>$offline->birthday,
                            'role'=>$offline->role,
                            'image'=>$offline->image,
                            'status'=>$offline->status,
                            'added_by'=>$offline->added_by,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('operation_manager_account')->where('m_id', $offline_count[0]->m_id)->update([  
                            'om_id'=>$offline_count[0]->om_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'gender'=>$offline_count[0]->gender,
                            'address'=>$offline_count[0]->address,
                            'email'=>$offline_count[0]->email,
                            'birthday'=>$offline_count[0]->birthday,
                            'role'=>$offline_count[0]->role,
                            'image'=>$offline_count[0]->image,
                            'status'=>$offline_count[0]->status,
                            'added_by'=>$offline_count[0]->added_by,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('operation_manager_account')->insert([ 
                        'm_id'=> $offline->m_id, 
                        'om_id'=>$offline->om_id,
                        'user_id'=>$offline->user_id,
                        'management_id'=>$offline->management_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'gender'=>$offline->gender,
                        'address'=>$offline->address,
                        'email'=>$offline->email,
                        'birthday'=>$offline->birthday,
                        'role'=>$offline->role,
                        'image'=>$offline->image,
                        'status'=>$offline->status,
                        'added_by'=>$offline->added_by,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize operation_manager_account table from online to offline 
        $online = DB::connection('mysql2')->table('operation_manager_account')->where('management_id', $data['management_id'])->get();  
        foreach($online as $online){  
            $lab_online_count = DB::table('operation_manager_account')->where('m_id', $online->m_id)->get();
                if(count($lab_online_count) > 0){
                    DB::table('operation_manager_account')->where('m_id', $online->m_id)->update([  
                        'om_id'=>$online->om_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'address'=>$online->address,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'added_by'=>$online->added_by,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('operation_manager_account')->insert([  
                        'm_id'=> $online->m_id, 
                        'om_id'=>$online->om_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'address'=>$online->address,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'added_by'=>$online->added_by,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncOtherAccount($data){
        // syncronize other_account table from offline to online   
        $offline = DB::table('other_account')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('other_account')->where('o_id', $offline->o_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('other_account')->where('o_id', $offline->o_id)->update([     
                            'user_id'=>$offline->user_id,
                            'management_id'=>$offline->management_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'gender'=>$offline->gender,
                            'address'=>$offline->address,
                            'email'=>$offline->email,
                            'birthday'=>$offline->birthday,
                            'role'=>$offline->role,
                            'image'=>$offline->image,
                            'status'=>$offline->status,
                            'added_by'=>$offline->added_by,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('other_account')->where('o_id', $offline_count[0]->o_id)->update([   
                            'user_id'=>$offline_count[0]->user_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'gender'=>$offline_count[0]->gender,
                            'address'=>$offline_count[0]->address,
                            'email'=>$offline_count[0]->email,
                            'birthday'=>$offline_count[0]->birthday,
                            'role'=>$offline_count[0]->role,
                            'image'=>$offline_count[0]->image,
                            'status'=>$offline_count[0]->status,
                            'added_by'=>$offline_count[0]->added_by,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('other_account')->insert([ 
                        'o_id'=> $offline->o_id, 
                        'oa_id'=>$offline->oa_id,
                        'user_id'=>$offline->user_id,
                        'management_id'=>$offline->management_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'gender'=>$offline->gender,
                        'address'=>$offline->address,
                        'email'=>$offline->email,
                        'birthday'=>$offline->birthday,
                        'role'=>$offline->role,
                        'image'=>$offline->image,
                        'status'=>$offline->status,
                        'added_by'=>$offline->added_by,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize other_account table from online to offline 
        $online = DB::connection('mysql2')->table('other_account')->where('management_id', $data['management_id'])->get();  
        foreach($online as $online){  
            $lab_online_count = DB::table('other_account')->where('o_id', $online->o_id)->get();
                if(count($lab_online_count) > 0){
                    DB::table('other_account')->where('o_id', $online->o_id)->update([   
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'address'=>$online->address,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'added_by'=>$online->added_by,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('other_account')->insert([  
                        'o_id'=> $online->o_id, 
                        'oa_id'=>$online->oa_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'address'=>$online->address,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'added_by'=>$online->added_by,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncOtherOrderTest($data){
        // syncronize other_order_test table from offline to online   
        $offline = DB::table('other_order_test')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('other_order_test')->where('oot_id', $offline->oot_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('other_order_test')->where('oot_id', $offline->oot_id)->update([    
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'order_id'=>$offline->order_id,
                        'order_name'=>$offline->order_name,
                        'order_amount'=>$offline->order_amount,
                        'department'=>$offline->department,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);
                } 
                else{
                    DB::table('other_order_test')->where('oot_id', $offline_count[0]->oot_id)->update([  
                        'management_id'=>$offline_count[0]->management_id,
                        'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                        'order_id'=>$offline_count[0]->order_id,
                        'order_name'=>$offline_count[0]->order_name,
                        'order_amount'=>$offline_count[0]->order_amount,
                        'department'=>$offline_count[0]->department,
                        'status'=>$offline_count[0]->status,
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);
                }  
            }else{
                DB::connection('mysql2')->table('other_order_test')->insert([ 
                    'oot_id'=> $offline->oot_id, 
                    'management_id'=>$offline->management_id,
                    'main_mgmt_id'=>$offline->main_mgmt_id,
                    'order_id'=>$offline->order_id,
                    'order_name'=>$offline->order_name,
                    'order_amount'=>$offline->order_amount,
                    'department'=>$offline->department,
                    'status'=>$offline->status,
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at
                ]); 
            } 
        }

        // syncronize other_order_test table from online to offline 
        $online = DB::connection('mysql2')->table('other_order_test')->where('management_id', $data['management_id'])->get();  
        foreach($online as $online){  
            $lab_online_count = DB::table('other_order_test')->where('oot_id', $online->oot_id)->get();
            if(count($lab_online_count) > 0){
                DB::table('other_order_test')->where('oot_id', $online->oot_id)->update([  
                    'management_id'=>$online->management_id,
                    'main_mgmt_id'=>$online->main_mgmt_id,
                    'order_id'=>$online->order_id,
                    'order_name'=>$online->order_name,
                    'order_amount'=>$online->order_amount,
                    'department'=>$online->department,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            }else{
                DB::table('other_order_test')->insert([    
                    'oot_id'=> $online->oot_id, 
                    'management_id'=>$online->management_id,
                    'main_mgmt_id'=>$online->main_mgmt_id,
                    'order_id'=>$online->order_id,
                    'order_name'=>$online->order_name,
                    'order_amount'=>$online->order_amount,
                    'department'=>$online->department,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            } 
        }   

        return true;
    }
    
    public static function syncPackagesCharge($data){
        // syncronize packages_charge table from offline to online   
        $offline = DB::table('packages_charge')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('packages_charge')->where('pck_id', $offline->pck_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('packages_charge')->where('pck_id', $offline->pck_id)->update([    
                            'package_id'=>$offline->package_id,
                            'package_name'=>$offline->package_name,
                            'management_id'=>$offline->management_id,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'department'=>$offline->department,
                            'category'=>$offline->category,
                            'order_id'=>$offline->order_id,
                            'order_name'=>$offline->order_name,
                            'order_amount'=>$offline->order_amount,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('packages_charge')->where('pck_id', $offline_count[0]->pck_id)->update([  
                            'package_id'=>$offline_count[0]->package_id,
                            'package_name'=>$offline_count[0]->package_name,
                            'management_id'=>$offline_count[0]->management_id,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'department'=>$offline_count[0]->department,
                            'category'=>$offline_count[0]->category,
                            'order_id'=>$offline_count[0]->order_id,
                            'order_name'=>$offline_count[0]->order_name,
                            'order_amount'=>$offline_count[0]->order_amount,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('packages_charge')->insert([ 
                        'pck_id'=> $offline->pck_id, 
                        'package_id'=>$offline->package_id,
                        'package_name'=>$offline->package_name,
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'department'=>$offline->department,
                        'category'=>$offline->category,
                        'order_id'=>$offline->order_id,
                        'order_name'=>$offline->order_name,
                        'order_amount'=>$offline->order_amount,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize packages_charge table from online to offline 
        $online = DB::connection('mysql2')->table('packages_charge')->where('management_id', $data['management_id'])->get();  
        foreach($online as $online){  
            $lab_online_count = DB::table('packages_charge')->where('pck_id', $online->pck_id)->get();
                if(count($lab_online_count) > 0){
                    DB::table('packages_charge')->where('pck_id', $online->pck_id)->update([  
                        'package_id'=>$online->package_id,
                        'package_name'=>$online->package_name,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'department'=>$online->department,
                        'category'=>$online->category,
                        'order_id'=>$online->order_id,
                        'order_name'=>$online->order_name,
                        'order_amount'=>$online->order_amount,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('packages_charge')->insert([    
                        'pck_id'=> $online->pck_id, 
                        'package_id'=>$online->package_id,
                        'package_name'=>$online->package_name,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'department'=>$online->department,
                        'category'=>$online->category,
                        'order_id'=>$online->order_id,
                        'order_name'=>$online->order_name,
                        'order_amount'=>$online->order_amount,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPackagesOrderList($data){
        // syncronize packages_order_list table from offline to online   
        $offline = DB::table('packages_order_list')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('packages_order_list')->where('pol_id', $offline->pol_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('packages_order_list')->where('pol_id', $offline->pol_id)->update([    
                        'order_id'=>$offline->order_id,
                        'trace_number'=>$offline->trace_number,
                        'package_id'=>$offline->package_id,
                        'management_id'=>$offline->management_id,
                        'patient_id'=>$offline->patient_id,
                        'package_name'=>$offline->package_name,
                        'package_amount'=>$offline->package_amount,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);
                } 
                else{
                    DB::table('packages_order_list')->where('pol_id', $offline_count[0]->pol_id)->update([  
                        'order_id'=>$offline_count[0]->order_id,
                        'trace_number'=>$offline_count[0]->trace_number,
                        'package_id'=>$offline_count[0]->package_id,
                        'management_id'=>$offline_count[0]->management_id,
                        'patient_id'=>$offline_count[0]->patient_id,
                        'package_name'=>$offline_count[0]->package_name,
                        'package_amount'=>$offline_count[0]->package_amount,
                        'status'=>$offline_count[0]->status,
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);
                }  
            }else{
                DB::connection('mysql2')->table('packages_order_list')->insert([ 
                    'pol_id'=> $offline->pol_id, 
                    'order_id'=>$offline->order_id,
                    'trace_number'=>$offline->trace_number,
                    'package_id'=>$offline->package_id,
                    'management_id'=>$offline->management_id,
                    'patient_id'=>$offline->patient_id,
                    'package_name'=>$offline->package_name,
                    'package_amount'=>$offline->package_amount,
                    'status'=>$offline->status,
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at
                ]); 
            } 
        }

        // syncronize packages_order_list table from online to offline 
        $online = DB::connection('mysql2')->table('packages_order_list')->where('management_id', $data['management_id'])->get();  
        foreach($online as $online){  
            $lab_online_count = DB::table('packages_order_list')->where('pol_id', $online->pol_id)->get();
            if(count($lab_online_count) > 0){
                DB::table('packages_order_list')->where('pol_id', $online->pol_id)->update([  
                    'order_id'=>$online->order_id,
                    'trace_number'=>$online->trace_number,
                    'package_id'=>$online->package_id,
                    'management_id'=>$online->management_id,
                    'patient_id'=>$online->patient_id,
                    'package_name'=>$online->package_name,
                    'package_amount'=>$online->package_amount,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            }else{
                DB::table('packages_order_list')->insert([    
                    'pol_id'=> $online->pol_id, 
                    'order_id'=>$online->order_id,
                    'trace_number'=>$online->trace_number,
                    'package_id'=>$online->package_id,
                    'management_id'=>$online->management_id,
                    'patient_id'=>$online->patient_id,
                    'package_name'=>$online->package_name,
                    'package_amount'=>$online->package_amount,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            } 
        }   

        return true;                                                
    }

    public static function syncPatients($data){
        // syncronize patients table from offline to online   
        $offline = DB::table('patients')->where('main_mgmt_id', $data['main_mgmt_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients')->where('patient_id', $offline->patient_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('patients')->where('patient_id', $offline->patient_id)->update([  
                        'encoders_id'=>$offline->encoders_id,
                        'doctors_id'=>$offline->doctors_id,
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'user_id'=>$offline->user_id,
                        'firstname'=>$offline->firstname,
                        'lastname'=>$offline->lastname,
                        'middle'=>$offline->middle,
                        'email'=>$offline->email,
                        'mobile'=>$offline->mobile,
                        'telephone'=>$offline->telephone,
                        'birthday'=>$offline->birthday,
                        'birthplace'=>$offline->birthplace,
                        'gender'=>$offline->gender,
                        'civil_status'=>$offline->civil_status,
                        'religion'=>$offline->religion,
                        'height'=>$offline->height,
                        'weight'=>$offline->weight,
                        'occupation'=>$offline->occupation,
                        'street'=>$offline->street,
                        'barangay'=>$offline->barangay,
                        'city'=>$offline->city,
                        'municipality'=>$offline->municipality,
                        'tin'=>$offline->tin,
                        'philhealth' =>$offline->philhealth,
                        'company'=>$offline->company,
                        'zip'=>$offline->zip,
                        'blood_type'=>$offline->blood_type,
                        'blood_systolic'=>$offline->blood_systolic,
                        'blood_diastolic'=>$offline->blood_diastolic,
                        'temperature'=>$offline->temperature,
                        'pulse'=>$offline->pulse,
                        'lmp'=>$offline->lmp,
                        'rispiratory'=>$offline->rispiratory,
                        'glucose'=>$offline->glucose,
                        'uric_acid'=>$offline->uric_acid,
                        'hepatitis'=>$offline->hepatitis,
                        'tuberculosis'=>$offline->tuberculosis,
                        'dengue'=>$offline->dengue,
                        'cholesterol'=>$offline->cholesterol,
                        'allergies'=>$offline->allergies,
                        'medication'=>$offline->medication,
                        'covid_19'=>$offline->covid_19,
                        'swine_flu'=>$offline->swine_flu,
                        'hiv'=>$offline->hiv,
                        'asf'=>$offline->asf,
                        'vacinated'=>$offline->vacinated,
                        'pro'=>$offline->pro,
                        'remarks'=>$offline->remarks,
                        'image'=>$offline->image,
                        'status'=>$offline->status,
                        'patient_condition'=>$offline->patient_condition,
                        'doctors_response'=>$offline->doctors_response,
                        'is_edited_bydoc'=>$offline->is_edited_bydoc,
                        'package_selected'=>$offline->package_selected,
                        'join_category'=>$offline->join_category,
                        'added_by'=>$offline->added_by,
                        'added_from'=>$offline->added_from,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);
                } 
                else{
                    DB::table('patients')->where('patient_id', $offline_count[0]->patient_id)->update([   
                        'encoders_id'=>$offline_count[0]->encoders_id,
                        'doctors_id'=>$offline_count[0]->doctors_id,
                        'management_id'=>$offline_count[0]->management_id,
                        'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                        'user_id'=>$offline_count[0]->user_id,
                        'firstname'=>$offline_count[0]->firstname,
                        'lastname'=>$offline_count[0]->lastname,
                        'middle'=>$offline_count[0]->middle,
                        'email'=>$offline_count[0]->email,
                        'mobile'=>$offline_count[0]->mobile,
                        'telephone'=>$offline_count[0]->telephone,
                        'birthday'=>$offline_count[0]->birthday,
                        'birthplace'=>$offline_count[0]->birthplace,
                        'gender'=>$offline_count[0]->gender,
                        'civil_status'=>$offline_count[0]->civil_status,
                        'religion'=>$offline_count[0]->religion,
                        'height'=>$offline_count[0]->height,
                        'weight'=>$offline_count[0]->weight,
                        'occupation'=>$offline_count[0]->occupation,
                        'street'=>$offline_count[0]->street,
                        'barangay'=>$offline_count[0]->barangay,
                        'city'=>$offline_count[0]->city,
                        'municipality'=>$offline_count[0]->municipality,
                        'tin'=>$offline_count[0]->tin,
                        'philhealth' =>$offline_count[0]->philhealth,
                        'company'=>$offline_count[0]->company,
                        'zip'=>$offline_count[0]->zip,
                        'blood_type'=>$offline_count[0]->blood_type,
                        'blood_systolic'=>$offline_count[0]->blood_systolic,
                        'blood_diastolic'=>$offline_count[0]->blood_diastolic,
                        'temperature'=>$offline_count[0]->temperature,
                        'pulse'=>$offline_count[0]->pulse,
                        'lmp'=>$offline_count[0]->lmp,
                        'rispiratory'=>$offline_count[0]->rispiratory,
                        'glucose'=>$offline_count[0]->glucose,
                        'uric_acid'=>$offline_count[0]->uric_acid,
                        'hepatitis'=>$offline_count[0]->hepatitis,
                        'tuberculosis'=>$offline_count[0]->tuberculosis,
                        'dengue'=>$offline_count[0]->dengue,
                        'cholesterol'=>$offline_count[0]->cholesterol,
                        'allergies'=>$offline_count[0]->allergies,
                        'medication'=>$offline_count[0]->medication,
                        'covid_19'=>$offline_count[0]->covid_19,
                        'swine_flu'=>$offline_count[0]->swine_flu,
                        'hiv'=>$offline_count[0]->hiv,
                        'asf'=>$offline_count[0]->asf,
                        'vacinated'=>$offline_count[0]->vacinated,
                        'pro'=>$offline_count[0]->pro,
                        'remarks'=>$offline_count[0]->remarks,
                        'image'=>$offline_count[0]->image,
                        'status'=>$offline_count[0]->status,
                        'patient_condition'=>$offline_count[0]->patient_condition,
                        'doctors_response'=>$offline_count[0]->doctors_response,
                        'is_edited_bydoc'=>$offline_count[0]->is_edited_bydoc,
                        'package_selected'=>$offline_count[0]->package_selected,
                        'join_category'=>$offline_count[0]->join_category,
                        'added_by'=>$offline_count[0]->added_by,
                        'added_from'=>$offline_count[0]->added_from,
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);
                }  
            }else{
                DB::connection('mysql2')->table('patients')->insert([ 
                    'patient_id'=> $offline->patient_id, 
                    'encoders_id'=>$offline->encoders_id,
                    'doctors_id'=>$offline->doctors_id,
                    'management_id'=>$offline->management_id,
                    'main_mgmt_id'=>$offline->main_mgmt_id,
                    'user_id'=>$offline->user_id,
                    'firstname'=>$offline->firstname,
                    'lastname'=>$offline->lastname,
                    'middle'=>$offline->middle,
                    'email'=>$offline->email,
                    'mobile'=>$offline->mobile,
                    'telephone'=>$offline->telephone,
                    'birthday'=>$offline->birthday,
                    'birthplace'=>$offline->birthplace,
                    'gender'=>$offline->gender,
                    'civil_status'=>$offline->civil_status,
                    'religion'=>$offline->religion,
                    'height'=>$offline->height,
                    'weight'=>$offline->weight,
                    'occupation'=>$offline->occupation,
                    'street'=>$offline->street,
                    'barangay'=>$offline->barangay,
                    'city'=>$offline->city,
                    'municipality'=>$offline->municipality,
                    'tin'=>$offline->tin,
                    'philhealth' =>$offline->philhealth,
                    'company'=>$offline->company,
                    'zip'=>$offline->zip,
                    'blood_type'=>$offline->blood_type,
                    'blood_systolic'=>$offline->blood_systolic,
                    'blood_diastolic'=>$offline->blood_diastolic,
                    'temperature'=>$offline->temperature,
                    'pulse'=>$offline->pulse,
                    'lmp'=>$offline->lmp,
                    'rispiratory'=>$offline->rispiratory,
                    'glucose'=>$offline->glucose,
                    'uric_acid'=>$offline->uric_acid,
                    'hepatitis'=>$offline->hepatitis,
                    'tuberculosis'=>$offline->tuberculosis,
                    'dengue'=>$offline->dengue,
                    'cholesterol'=>$offline->cholesterol,
                    'allergies'=>$offline->allergies,
                    'medication'=>$offline->medication,
                    'covid_19'=>$offline->covid_19,
                    'swine_flu'=>$offline->swine_flu,
                    'hiv'=>$offline->hiv,
                    'asf'=>$offline->asf,
                    'vacinated'=>$offline->vacinated,
                    'pro'=>$offline->pro,
                    'remarks'=>$offline->remarks,
                    'image'=>$offline->image,
                    'status'=>$offline->status,
                    'patient_condition'=>$offline->patient_condition,
                    'doctors_response'=>$offline->doctors_response,
                    'is_edited_bydoc'=>$offline->is_edited_bydoc,
                    'package_selected'=>$offline->package_selected,
                    'join_category'=>$offline->join_category,
                    'added_by'=>$offline->added_by,
                    'added_from'=>$offline->added_from,
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at
                ]); 
            } 
        }

        // syncronize patients table from online to offline 
        $online = DB::connection('mysql2')->table('patients')->where('main_mgmt_id', $data['main_mgmt_id'])->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients')->where('patient_id', $online->patient_id)->get();
            if(count($online_count) > 0){
                DB::table('patients')->where('patient_id', $online->patient_id)->update([   
                    'encoders_id'=>$online->encoders_id,
                    'doctors_id'=>$online->doctors_id,
                    'management_id'=>$online->management_id,
                    'main_mgmt_id'=>$online->main_mgmt_id,
                    'user_id'=>$online->user_id,
                    'firstname'=>$online->firstname,
                    'lastname'=>$online->lastname,
                    'middle'=>$online->middle,
                    'email'=>$online->email,
                    'mobile'=>$online->mobile,
                    'telephone'=>$online->telephone,
                    'birthday'=>$online->birthday,
                    'birthplace'=>$online->birthplace,
                    'gender'=>$online->gender,
                    'civil_status'=>$online->civil_status,
                    'religion'=>$online->religion,
                    'height'=>$online->height,
                    'weight'=>$online->weight,
                    'occupation'=>$online->occupation,
                    'street'=>$online->street,
                    'barangay'=>$online->barangay,
                    'city'=>$online->city,
                    'municipality'=>$online->municipality,
                    'tin'=>$online->tin,
                    'philhealth' =>$online->philhealth,
                    'company'=>$online->company,
                    'zip'=>$online->zip,
                    'blood_type'=>$online->blood_type,
                    'blood_systolic'=>$online->blood_systolic,
                    'blood_diastolic'=>$online->blood_diastolic,
                    'temperature'=>$online->temperature,
                    'pulse'=>$online->pulse,
                    'lmp'=>$online->lmp,
                    'rispiratory'=>$online->rispiratory,
                    'glucose'=>$online->glucose,
                    'uric_acid'=>$online->uric_acid,
                    'hepatitis'=>$online->hepatitis,
                    'tuberculosis'=>$online->tuberculosis,
                    'dengue'=>$online->dengue,
                    'cholesterol'=>$online->cholesterol,
                    'allergies'=>$online->allergies,
                    'medication'=>$online->medication,
                    'covid_19'=>$online->covid_19,
                    'swine_flu'=>$online->swine_flu,
                    'hiv'=>$online->hiv,
                    'asf'=>$online->asf,
                    'vacinated'=>$online->vacinated,
                    'pro'=>$online->pro,
                    'remarks'=>$online->remarks,
                    'image'=>$online->image,
                    'status'=>$online->status,
                    'patient_condition'=>$online->patient_condition,
                    'doctors_response'=>$online->doctors_response,
                    'is_edited_bydoc'=>$online->is_edited_bydoc,
                    'package_selected'=>$online->package_selected,
                    'join_category'=>$online->join_category,
                    'added_by'=>$online->added_by,
                    'added_from'=>$online->added_from,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            }else{
                DB::table('patients')->insert([    
                    'patient_id'=> $online->patient_id, 
                    'encoders_id'=>$online->encoders_id,
                    'doctors_id'=>$online->doctors_id,
                    'management_id'=>$online->management_id,
                    'main_mgmt_id'=>$online->main_mgmt_id,
                    'user_id'=>$online->user_id,
                    'firstname'=>$online->firstname,
                    'lastname'=>$online->lastname,
                    'middle'=>$online->middle,
                    'email'=>$online->email,
                    'mobile'=>$online->mobile,
                    'telephone'=>$online->telephone,
                    'birthday'=>$online->birthday,
                    'birthplace'=>$online->birthplace,
                    'gender'=>$online->gender,
                    'civil_status'=>$online->civil_status,
                    'religion'=>$online->religion,
                    'height'=>$online->height,
                    'weight'=>$online->weight,
                    'occupation'=>$online->occupation,
                    'street'=>$online->street,
                    'barangay'=>$online->barangay,
                    'city'=>$online->city,
                    'municipality'=>$online->municipality,
                    'tin'=>$online->tin,
                    'philhealth' =>$online->philhealth,
                    'company'=>$online->company,
                    'zip'=>$online->zip,
                    'blood_type'=>$online->blood_type,
                    'blood_systolic'=>$online->blood_systolic,
                    'blood_diastolic'=>$online->blood_diastolic,
                    'temperature'=>$online->temperature,
                    'pulse'=>$online->pulse,
                    'lmp'=>$online->lmp,
                    'rispiratory'=>$online->rispiratory,
                    'glucose'=>$online->glucose,
                    'uric_acid'=>$online->uric_acid,
                    'hepatitis'=>$online->hepatitis,
                    'tuberculosis'=>$online->tuberculosis,
                    'dengue'=>$online->dengue,
                    'cholesterol'=>$online->cholesterol,
                    'allergies'=>$online->allergies,
                    'medication'=>$online->medication,
                    'covid_19'=>$online->covid_19,
                    'swine_flu'=>$online->swine_flu,
                    'hiv'=>$online->hiv,
                    'asf'=>$online->asf,
                    'vacinated'=>$online->vacinated,
                    'pro'=>$online->pro,
                    'remarks'=>$online->remarks,
                    'image'=>$online->image,
                    'status'=>$online->status,
                    'patient_condition'=>$online->patient_condition,
                    'doctors_response'=>$online->doctors_response,
                    'is_edited_bydoc'=>$online->is_edited_bydoc,
                    'package_selected'=>$online->package_selected,
                    'join_category'=>$online->join_category,
                    'added_by'=>$online->added_by,
                    'added_from'=>$online->added_from,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            } 
        }   

        return true;
    }

    public static function syncPatientsCholesterolHistory(){
        // syncronize patients_cholesterol_history table from offline to online   
        $offline = DB::table('patients_cholesterol_history')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_cholesterol_history')->where('cholesterol_id', $offline->cholesterol_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('patients_cholesterol_history')->where('cholesterol_id', $offline->cholesterol_id)->update([     
                        'patients_id'=>$offline->patients_id,
                        'cholesterol'=>$offline->cholesterol,
                        'added_by'=>$offline->added_by,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]);
                } 
                else{
                    DB::table('patients_cholesterol_history')->where('cholesterol_id', $offline_count[0]->cholesterol_id)->update([   
                        'patients_id'=>$offline_count[0]->patients_id,
                        'cholesterol'=>$offline_count[0]->cholesterol,
                        'added_by'=>$offline_count[0]->added_by,
                        'updated_at'=>$offline_count[0]->updated_at,
                        'created_at'=>$offline_count[0]->created_at
                    ]);
                }  
            }else{
                DB::connection('mysql2')->table('patients_cholesterol_history')->insert([ 
                    'cholesterol_id'=> $offline->cholesterol_id, 
                    'patients_id'=>$offline->patients_id,
                    'cholesterol'=>$offline->cholesterol,
                    'added_by'=>$offline->added_by,
                    'updated_at'=>$offline->updated_at,
                    'created_at'=>$offline->created_at
                ]); 
            } 
        }

        // syncronize patients_cholesterol_history table from online to offline 
        $online = DB::connection('mysql2')->table('patients_cholesterol_history')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_cholesterol_history')->where('cholesterol_id', $online->cholesterol_id)->get();
            if(count($online_count) > 0){
                DB::table('patients_cholesterol_history')->where('cholesterol_id', $online->cholesterol_id)->update([  
                    'patients_id'=>$online->patients_id,
                    'cholesterol'=>$online->cholesterol,
                    'added_by'=>$online->added_by,
                    'updated_at'=>$online->updated_at,
                    'created_at'=>$online->created_at
                ]); 
            }else{
                DB::table('patients_cholesterol_history')->insert([    
                    'cholesterol_id'=> $online->cholesterol_id, 
                    'patients_id'=>$online->patients_id,
                    'cholesterol'=>$online->cholesterol,
                    'added_by'=>$online->added_by,
                    'updated_at'=>$online->updated_at,
                    'created_at'=>$online->created_at
                ]); 
            } 
        }   

        return true;
    }

    public static function syncPatientsContactTracing(){
        // syncronize patients_contacttracing table from offline to online   
        $offline = DB::table('patients_contacttracing')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_contacttracing')->where('pct_id', $offline->pct_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_contacttracing')->where('pct_id', $offline->pct_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'management_id'=>$offline->management_id,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'temperature'=>$offline->temperature,
                            'sickness'=>$offline->sickness,
                            'purpose'=>$offline->purpose,
                            'allergies'=>$offline->allergies,
                            'last_xray_taken'=>$offline->last_xray_taken,
                            'last_xray_result'=>$offline->last_xray_result,
                            'history_of_travel_date'=>$offline->history_of_travel_date,
                            'history_of_travel_days'=>$offline->history_of_travel_days,
                            'history_of_travel_place'=>$offline->history_of_travel_place,
                            'contact_with_puipum'=>$offline->contact_with_puipum,
                            'contact_with_positive'=>$offline->contact_with_positive,
                            'crt_purpose'=>$offline->crt_purpose,
                            'crt_requestedby'=>$offline->crt_requestedby,
                            'work_company'=>$offline->work_company,
                            'contact_information'=>$offline->contact_information,
                            'allow_quarantine_ifpositive'=>$offline->allow_quarantine_ifpositive,
                            'triage_staff'=>$offline->triage_staff,
                            'transaction_type'=>$offline->transaction_type,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('patients_contacttracing')->where('pct_id', $offline_count[0]->pct_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'temperature'=>$offline_count[0]->temperature,
                            'sickness'=>$offline_count[0]->sickness,
                            'purpose'=>$offline_count[0]->purpose,
                            'allergies'=>$offline_count[0]->allergies,
                            'last_xray_taken'=>$offline_count[0]->last_xray_taken,
                            'last_xray_result'=>$offline_count[0]->last_xray_result,
                            'history_of_travel_date'=>$offline_count[0]->history_of_travel_date,
                            'history_of_travel_days'=>$offline_count[0]->history_of_travel_days,
                            'history_of_travel_place'=>$offline_count[0]->history_of_travel_place,
                            'contact_with_puipum'=>$offline_count[0]->contact_with_puipum,
                            'contact_with_positive'=>$offline_count[0]->contact_with_positive,
                            'crt_purpose'=>$offline_count[0]->crt_purpose,
                            'crt_requestedby'=>$offline_count[0]->crt_requestedby,
                            'work_company'=>$offline_count[0]->work_company,
                            'contact_information'=>$offline_count[0]->contact_information,
                            'allow_quarantine_ifpositive'=>$offline_count[0]->allow_quarantine_ifpositive,
                            'triage_staff'=>$offline_count[0]->triage_staff,
                            'transaction_type'=>$offline_count[0]->transaction_type,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_contacttracing')->insert([ 
                        'pct_id'=> $offline->pct_id, 
                        'patient_id'=>$offline->patient_id,
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'temperature'=>$offline->temperature,
                        'sickness'=>$offline->sickness,
                        'purpose'=>$offline->purpose,
                        'allergies'=>$offline->allergies,
                        'last_xray_taken'=>$offline->last_xray_taken,
                        'last_xray_result'=>$offline->last_xray_result,
                        'history_of_travel_date'=>$offline->history_of_travel_date,
                        'history_of_travel_days'=>$offline->history_of_travel_days,
                        'history_of_travel_place'=>$offline->history_of_travel_place,
                        'contact_with_puipum'=>$offline->contact_with_puipum,
                        'contact_with_positive'=>$offline->contact_with_positive,
                        'crt_purpose'=>$offline->crt_purpose,
                        'crt_requestedby'=>$offline->crt_requestedby,
                        'work_company'=>$offline->work_company,
                        'contact_information'=>$offline->contact_information,
                        'allow_quarantine_ifpositive'=>$offline->allow_quarantine_ifpositive,
                        'triage_staff'=>$offline->triage_staff,
                        'transaction_type'=>$offline->transaction_type,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize patients_contacttracing table from online to offline 
        $online = DB::connection('mysql2')->table('patients_contacttracing')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_contacttracing')->where('pct_id', $online->pct_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_contacttracing')->where('pct_id', $online->pct_id)->update([
                        'patient_id'=>$online->patient_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'temperature'=>$online->temperature,
                        'sickness'=>$online->sickness,
                        'purpose'=>$online->purpose,
                        'allergies'=>$online->allergies,
                        'last_xray_taken'=>$online->last_xray_taken,
                        'last_xray_result'=>$online->last_xray_result,
                        'history_of_travel_date'=>$online->history_of_travel_date,
                        'history_of_travel_days'=>$online->history_of_travel_days,
                        'history_of_travel_place'=>$online->history_of_travel_place,
                        'contact_with_puipum'=>$online->contact_with_puipum,
                        'contact_with_positive'=>$online->contact_with_positive,
                        'crt_purpose'=>$online->crt_purpose,
                        'crt_requestedby'=>$online->crt_requestedby,
                        'work_company'=>$online->work_company,
                        'contact_information'=>$online->contact_information,
                        'allow_quarantine_ifpositive'=>$online->allow_quarantine_ifpositive,
                        'triage_staff'=>$online->triage_staff,
                        'transaction_type'=>$online->transaction_type,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('patients_contacttracing')->insert([    
                        'pct_id'=> $online->pct_id, 
                        'patient_id'=>$online->patient_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'temperature'=>$online->temperature,
                        'sickness'=>$online->sickness,
                        'purpose'=>$online->purpose,
                        'allergies'=>$online->allergies,
                        'last_xray_taken'=>$online->last_xray_taken,
                        'last_xray_result'=>$online->last_xray_result,
                        'history_of_travel_date'=>$online->history_of_travel_date,
                        'history_of_travel_days'=>$online->history_of_travel_days,
                        'history_of_travel_place'=>$online->history_of_travel_place,
                        'contact_with_puipum'=>$online->contact_with_puipum,
                        'contact_with_positive'=>$online->contact_with_positive,
                        'crt_purpose'=>$online->crt_purpose,
                        'crt_requestedby'=>$online->crt_requestedby,
                        'work_company'=>$online->work_company,
                        'contact_information'=>$online->contact_information,
                        'allow_quarantine_ifpositive'=>$online->allow_quarantine_ifpositive,
                        'triage_staff'=>$online->triage_staff,
                        'transaction_type'=>$online->transaction_type,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientsDiagnosis(){
        // syncronize patients_diagnosis table from offline to online   
        $offline = DB::table('patients_diagnosis')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_diagnosis')->where('pd_id', $offline->pd_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_diagnosis')->where('pd_id', $offline->pd_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'doctor_id'=>$offline->doctor_id,
                            'diagnosis'=>$offline->diagnosis,
                            'remarks'=>$offline->remarks,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_diagnosis')->where('pd_id', $offline_count[0]->pd_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'doctor_id'=>$offline_count[0]->doctor_id,
                            'diagnosis'=>$offline_count[0]->diagnosis,
                            'remarks'=>$offline_count[0]->remarks,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_diagnosis')->insert([ 
                        'pd_id'=> $offline->pd_id, 
                        'patient_id'=>$offline->patient_id,
                        'doctor_id'=>$offline->doctor_id,
                        'diagnosis'=>$offline->diagnosis,
                        'remarks'=>$offline->remarks,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_diagnosis table from online to offline 
        $online = DB::connection('mysql2')->table('patients_diagnosis')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_diagnosis')->where('pd_id', $online->pd_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_diagnosis')->where('pd_id', $online->pd_id)->update([
                        'patient_id'=>$online->patient_id,
                        'doctor_id'=>$online->doctor_id,
                        'diagnosis'=>$online->diagnosis,
                        'remarks'=>$online->remarks,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_diagnosis')->insert([    
                        'pd_id'=> $online->pd_id, 
                        'patient_id'=>$online->patient_id,
                        'doctor_id'=>$online->doctor_id,
                        'diagnosis'=>$online->diagnosis,
                        'remarks'=>$online->remarks,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientsDiets(){
        // syncronize patients_diets table from offline to online   
        $offline = DB::table('patients_diets')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_diets')->where('pd_id', $offline->pd_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_diets')->where('pd_id', $offline->pd_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'doctor_id'=>$offline->doctor_id,
                            'meals'=>$offline->meals,
                            'description'=>$offline->description,
                            'is_suggested'=>$offline->is_suggested,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('patients_diets')->where('pd_id', $offline_count[0]->pd_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'doctor_id'=>$offline_count[0]->doctor_id,
                            'meals'=>$offline_count[0]->meals,
                            'description'=>$offline_count[0]->description,
                            'is_suggested'=>$offline_count[0]->is_suggested,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_diets')->insert([ 
                        'pd_id'=> $offline->pd_id, 
                        'patient_id'=>$offline->patient_id,
                        'doctor_id'=>$offline->doctor_id,
                        'meals'=>$offline->meals,
                        'description'=>$offline->description,
                        'is_suggested'=>$offline->is_suggested,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize patients_diets table from online to offline 
        $online = DB::connection('mysql2')->table('patients_diets')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_diets')->where('pd_id', $online->pd_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_diets')->where('pd_id', $online->pd_id)->update([
                        'patient_id'=>$online->patient_id,
                        'doctor_id'=>$online->doctor_id,
                        'meals'=>$online->meals,
                        'description'=>$online->description,
                        'is_suggested'=>$online->is_suggested,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('patients_diets')->insert([    
                        'pd_id'=> $online->pd_id, 
                        'patient_id'=>$online->patient_id,
                        'doctor_id'=>$online->doctor_id,
                        'meals'=>$online->meals,
                        'description'=>$online->description,
                        'is_suggested'=>$online->is_suggested,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    } 

    public static function syncPatientsFamilyHistories(){
        // syncronize patients_family_histories table from offline to online   
        $offline = DB::table('patients_family_histories')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_family_histories')->where('pfh_id', $offline->pfh_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_family_histories')->where('pfh_id', $offline->pfh_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'name'=>$offline->name,
                            'address'=>$offline->address,
                            'birthday'=>$offline->birthday,
                            'occupation'=>$offline->occupation,
                            'health_status'=>$offline->health_status,
                            'category'=>$offline->category,
                            'is_deceased'=>$offline->is_deceased,
                            'is_deceased_date'=>$offline->is_deceased_date,
                            'is_deceased_reason'=>$offline->is_deceased_reason,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_family_histories')->where('pfh_id', $offline_count[0]->pfh_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'name'=>$offline_count[0]->name,
                            'address'=>$offline_count[0]->address,
                            'birthday'=>$offline_count[0]->birthday,
                            'occupation'=>$offline_count[0]->occupation,
                            'health_status'=>$offline_count[0]->health_status,
                            'category'=>$offline_count[0]->category,
                            'is_deceased'=>$offline_count[0]->is_deceased,
                            'is_deceased_date'=>$offline_count[0]->is_deceased_date,
                            'is_deceased_reason'=>$offline_count[0]->is_deceased_reason,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_family_histories')->insert([ 
                        'pfh_id'=> $offline->pfh_id, 
                        'patient_id'=>$offline->patient_id,
                        'name'=>$offline->name,
                        'address'=>$offline->address,
                        'birthday'=>$offline->birthday,
                        'occupation'=>$offline->occupation,
                        'health_status'=>$offline->health_status,
                        'category'=>$offline->category,
                        'is_deceased'=>$offline->is_deceased,
                        'is_deceased_date'=>$offline->is_deceased_date,
                        'is_deceased_reason'=>$offline->is_deceased_reason,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_family_histories table from online to offline 
        $online = DB::connection('mysql2')->table('patients_family_histories')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_family_histories')->where('pfh_id', $online->pfh_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_family_histories')->where('pfh_id', $online->pfh_id)->update([
                        'patient_id'=>$online->patient_id,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'birthday'=>$online->birthday,
                        'occupation'=>$online->occupation,
                        'health_status'=>$online->health_status,
                        'category'=>$online->category,
                        'is_deceased'=>$online->is_deceased,
                        'is_deceased_date'=>$online->is_deceased_date,
                        'is_deceased_reason'=>$online->is_deceased_reason,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_family_histories')->insert([    
                        'pfh_id'=> $online->pfh_id,
                        'patient_id'=>$online->patient_id,
                        'name'=>$online->name,
                        'address'=>$online->address,
                        'birthday'=>$online->birthday,
                        'occupation'=>$online->occupation,
                        'health_status'=>$online->health_status,
                        'category'=>$online->category,
                        'is_deceased'=>$online->is_deceased,
                        'is_deceased_date'=>$online->is_deceased_date,
                        'is_deceased_reason'=>$online->is_deceased_reason,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientsFamilyHistory(){
        // syncronize patients_family_history table from offline to online   
        $offline = DB::table('patients_family_history')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_family_history')->where('dph_id', $offline->dph_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_family_history')->where('dph_id', $offline->dph_id)->update([    
                            'doctors_id'=>$offline->doctors_id,
                            'patient_id'=>$offline->patient_id,
                            'family_history'=>$offline->family_history,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_family_history')->where('dph_id', $offline_count[0]->dph_id)->update([  
                            'doctors_id'=>$offline_count[0]->doctors_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'family_history'=>$offline_count[0]->family_history,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_family_history')->insert([ 
                        'dph_id'=> $offline->dph_id, 
                        'doctors_id'=>$offline->doctors_id,
                        'patient_id'=>$offline->patient_id,
                        'family_history'=>$offline->family_history,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_family_history table from online to offline 
        $online = DB::connection('mysql2')->table('patients_family_history')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_family_history')->where('dph_id', $online->dph_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_family_history')->where('dph_id', $online->dph_id)->update([
                        'doctors_id'=>$online->doctors_id,
                        'patient_id'=>$online->patient_id,
                        'family_history'=>$online->family_history,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_family_history')->insert([    
                        'dph_id'=> $online->dph_id, 
                        'doctors_id'=>$online->doctors_id,
                        'patient_id'=>$online->patient_id,
                        'family_history'=>$online->family_history,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientsGlucoseHistory(){
        // syncronize patients_glucose_history table from offline to online   
       $offline = DB::table('patients_glucose_history')->get();  
       foreach($offline as $offline){  
           $offline_count = DB::connection('mysql2')->table('patients_glucose_history')->where('pgh_id', $offline->pgh_id)->get();
               if(count($offline_count) > 0){ 
                   if($offline->updated_at > $offline_count[0]->updated_at){  
                       DB::connection('mysql2')->table('patients_glucose_history')->where('pgh_id', $offline->pgh_id)->update([    
                           'patients_id'=>$offline->patients_id,
                           'glucose'=>$offline->glucose,
                           'added_by'=>$offline->added_by,
                           'status'=>$offline->status,
                           'created_at'=>$offline->created_at,
                           'updated_at'=>$offline->updated_at
                       ]);
                   } 
                   else{
                       DB::table('patients_glucose_history')->where('pgh_id', $offline_count[0]->pgh_id)->update([  
                           'patients_id'=>$offline_count[0]->patients_id,
                           'glucose'=>$offline_count[0]->glucose,
                           'added_by'=>$offline_count[0]->added_by,
                           'status'=>$offline_count[0]->status,
                           'created_at'=>$offline_count[0]->created_at,
                           'updated_at'=>$offline_count[0]->updated_at
                       ]);
                   }  
               }else{
                   DB::connection('mysql2')->table('patients_glucose_history')->insert([ 
                       'pgh_id'=> $offline->pgh_id, 
                       'patients_id'=>$offline->patients_id,
                       'glucose'=>$offline->glucose,
                       'added_by'=>$offline->added_by,
                       'status'=>$offline->status,
                       'created_at'=>$offline->created_at,
                       'updated_at'=>$offline->updated_at
                   ]); 
               } 
       }

       // syncronize patients_glucose_history table from online to offline 
       $online = DB::connection('mysql2')->table('patients_glucose_history')->get();  
       foreach($online as $online){  
           $online_count = DB::table('patients_glucose_history')->where('pgh_id', $online->pgh_id)->get();
               if(count($online_count) > 0){
                   DB::table('patients_glucose_history')->where('pgh_id', $online->pgh_id)->update([
                       'patients_id'=>$online->patients_id,
                       'glucose'=>$online->glucose,
                       'added_by'=>$online->added_by,
                       'status'=>$online->status,
                       'created_at'=>$online->created_at,
                       'updated_at'=>$online->updated_at
                   ]); 
               }else{
                   DB::table('patients_glucose_history')->insert([    
                       'pgh_id'=> $online->pgh_id, 
                       'patients_id'=>$online->patients_id,
                       'glucose'=>$online->glucose,
                       'added_by'=>$online->added_by,
                       'status'=>$online->status,
                       'created_at'=>$online->created_at,
                       'updated_at'=>$online->updated_at
                   ]); 
               } 
       }   

       return true;
    }

    public static function syncPatientsHistory(){
        // syncronize patients_history table from offline to online   
        $offline = DB::table('patients_history')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history')->where('ph_id', $offline->ph_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history')->where('ph_id', $offline->ph_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'street'=>$offline->street,
                            'barangay'=>$offline->barangay,
                            'city'=>$offline->city,
                            'zip'=>$offline->zip,
                            'height'=>$offline->height,
                            'weight'=>$offline->weight,
                            'occupation'=>$offline->occupation,
                            'allergies'=>$offline->allergies,
                            'medication'=>$offline->medication,
                            'remarks'=>$offline->remarks,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history')->where('ph_id', $offline_count[0]->ph_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'street'=>$offline_count[0]->street,
                            'barangay'=>$offline_count[0]->barangay,
                            'city'=>$offline_count[0]->city,
                            'zip'=>$offline_count[0]->zip,
                            'height'=>$offline_count[0]->height,
                            'weight'=>$offline_count[0]->weight,
                            'occupation'=>$offline_count[0]->occupation,
                            'allergies'=>$offline_count[0]->allergies,
                            'medication'=>$offline_count[0]->medication,
                            'remarks'=>$offline_count[0]->remarks,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history')->insert([ 
                        'ph_id'=> $offline->ph_id, 
                        'patient_id'=>$offline->patient_id,
                        'street'=>$offline->street,
                        'barangay'=>$offline->barangay,
                        'city'=>$offline->city,
                        'zip'=>$offline->zip,
                        'height'=>$offline->height,
                        'weight'=>$offline->weight,
                        'occupation'=>$offline->occupation,
                        'allergies'=>$offline->allergies,
                        'medication'=>$offline->medication,
                        'remarks'=>$offline->remarks,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize patients_history table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history')->where('ph_id', $online->ph_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history')->where('ph_id', $online->ph_id)->update([
                        'patient_id'=>$online->patient_id,
                        'street'=>$online->street,
                        'barangay'=>$online->barangay,
                        'city'=>$online->city,
                        'zip'=>$online->zip,
                        'height'=>$online->height,
                        'weight'=>$online->weight,
                        'occupation'=>$online->occupation,
                        'allergies'=>$online->allergies,
                        'medication'=>$online->medication,
                        'remarks'=>$online->remarks,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('patients_history')->insert([    
                        'ph_id'=> $online->ph_id, 
                        'patient_id'=>$online->patient_id,
                        'street'=>$online->street,
                        'barangay'=>$online->barangay,
                        'city'=>$online->city,
                        'zip'=>$online->zip,
                        'height'=>$online->height,
                        'weight'=>$online->weight,
                        'occupation'=>$online->occupation,
                        'allergies'=>$online->allergies,
                        'medication'=>$online->medication,
                        'remarks'=>$online->remarks,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    } 

    public static function syncPatientHistoryAttachment(){
        // syncronize patients_history_attachment table from offline to online   
        $offline = DB::table('patients_history_attachment')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history_attachment')->where('pha_id', $offline->pha_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history_attachment')->where('pha_id', $offline->pha_id)->update([    
                            'history_attachment_id'=>$offline->history_attachment_id,
                            'patient_id'=>$offline->patient_id,
                            'attachment'=>$offline->attachment,
                            'remarks'=>$offline->remarks,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history_attachment')->where('pha_id', $offline_count[0]->pha_id)->update([  
                            'history_attachment_id'=>$offline_count[0]->history_attachment_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'attachment'=>$offline_count[0]->attachment,
                            'remarks'=>$offline_count[0]->remarks,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history_attachment')->insert([ 
                        'pha_id'=> $offline->pha_id, 
                        'history_attachment_id'=>$offline->history_attachment_id,
                        'patient_id'=>$offline->patient_id,
                        'attachment'=>$offline->attachment,
                        'remarks'=>$offline->remarks,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_history_attachment table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history_attachment')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history_attachment')->where('pha_id', $online->pha_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history_attachment')->where('pha_id', $online->pha_id)->update([
                        'history_attachment_id'=>$online->history_attachment_id,
                        'patient_id'=>$online->patient_id,
                        'attachment'=>$online->attachment,
                        'remarks'=>$online->remarks,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_history_attachment')->insert([ 
                        'pha_id'=> $online->pha_id, 
                        'history_attachment_id'=>$online->history_attachment_id,
                        'patient_id'=>$online->patient_id,
                        'attachment'=>$online->attachment,
                        'remarks'=>$online->remarks,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    } 

    public static function syncPatientHistoryCalcium(){
        // syncronize patients_history_calcium table from offline to online   
        $offline = DB::table('patients_history_calcium')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history_calcium')->where('phc_id', $offline->phc_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history_calcium')->where('phc_id', $offline->phc_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'calcium'=>$offline->calcium,
                            'added_by'=>$offline->added_by,
                            'adder_type'=>$offline->adder_type,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history_calcium')->where('phc_id', $offline_count[0]->phc_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'calcium'=>$offline_count[0]->calcium,
                            'added_by'=>$offline_count[0]->added_by,
                            'adder_type'=>$offline_count[0]->adder_type,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history_calcium')->insert([ 
                        'phc_id'=> $offline->phc_id, 
                        'patient_id'=>$offline->patient_id,
                        'calcium'=>$offline->calcium,
                        'added_by'=>$offline->added_by,
                        'adder_type'=>$offline->adder_type,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_history_calcium table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history_calcium')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history_calcium')->where('phc_id', $online->phc_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history_calcium')->where('phc_id', $online->phc_id)->update([
                        'patient_id'=>$online->patient_id,
                        'calcium'=>$online->calcium,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_history_calcium')->insert([ 
                        'phc_id'=> $online->phc_id, 
                        'patient_id'=>$online->patient_id,
                        'calcium'=>$online->calcium,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientHistoryChloride(){
        // syncronize patients_history_chloride table from offline to online   
        $offline = DB::table('patients_history_chloride')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history_chloride')->where('phc_id', $offline->phc_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history_chloride')->where('phc_id', $offline->phc_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'chloride'=>$offline->chloride,
                            'added_by'=>$offline->added_by,
                            'adder_type'=>$offline->adder_type,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history_chloride')->where('phc_id', $offline_count[0]->phc_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'chloride'=>$offline_count[0]->chloride,
                            'added_by'=>$offline_count[0]->added_by,
                            'adder_type'=>$offline_count[0]->adder_type,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history_chloride')->insert([ 
                        'phc_id'=> $offline->phc_id, 
                        'patient_id'=>$offline->patient_id,
                        'chloride'=>$offline->chloride,
                        'added_by'=>$offline->added_by,
                        'adder_type'=>$offline->adder_type,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_history_chloride table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history_chloride')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history_chloride')->where('phc_id', $online->phc_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history_chloride')->where('phc_id', $online->phc_id)->update([
                        'patient_id'=>$online->patient_id,
                        'chloride'=>$online->chloride,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_history_chloride')->insert([ 
                        'phc_id'=> $online->phc_id, 
                        'patient_id'=>$online->patient_id,
                        'chloride'=>$online->chloride,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true; 
    }

    public static function syncPatientHistoryCreatinine(){
        // syncronize patients_history_creatinine table from offline to online   
        $offline = DB::table('patients_history_creatinine')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history_creatinine')->where('phc_id', $offline->phc_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history_creatinine')->where('phc_id', $offline->phc_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'creatinine'=>$offline->creatinine,
                            'added_by'=>$offline->added_by,
                            'adder_type'=>$offline->adder_type,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history_creatinine')->where('phc_id', $offline_count[0]->phc_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'creatinine'=>$offline_count[0]->creatinine,
                            'added_by'=>$offline_count[0]->added_by,
                            'adder_type'=>$offline_count[0]->adder_type,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history_creatinine')->insert([ 
                        'phc_id'=> $offline->phc_id, 
                        'patient_id'=>$offline->patient_id,
                        'creatinine'=>$offline->creatinine,
                        'added_by'=>$offline->added_by,
                        'adder_type'=>$offline->adder_type,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_history_creatinine table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history_creatinine')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history_creatinine')->where('phc_id', $online->phc_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history_creatinine')->where('phc_id', $online->phc_id)->update([
                        'patient_id'=>$online->patient_id,
                        'creatinine'=>$online->creatinine,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_history_creatinine')->insert([ 
                        'phc_id'=> $online->phc_id,
                        'patient_id'=>$online->patient_id,
                        'creatinine'=>$online->creatinine,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientHistoryHDL(){
        // syncronize patients_history_hdl table from offline to online   
        $offline = DB::table('patients_history_hdl')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history_hdl')->where('phh_id', $offline->phh_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history_hdl')->where('phh_id', $offline->phh_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'high_density_lipoproteins'=>$offline->high_density_lipoproteins,
                            'added_by'=>$offline->added_by,
                            'adder_type'=>$offline->adder_type,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history_hdl')->where('phh_id', $offline_count[0]->phh_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'high_density_lipoproteins'=>$offline_count[0]->high_density_lipoproteins,
                            'added_by'=>$offline_count[0]->added_by,
                            'adder_type'=>$offline_count[0]->adder_type,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history_hdl')->insert([ 
                        'phh_id'=> $offline->phh_id, 
                        'patient_id'=>$offline->patient_id,
                        'high_density_lipoproteins'=>$offline->high_density_lipoproteins,
                        'added_by'=>$offline->added_by,
                        'adder_type'=>$offline->adder_type,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_history_hdl table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history_hdl')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history_hdl')->where('phh_id', $online->phh_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history_hdl')->where('phh_id', $online->phh_id)->update([
                        'patient_id'=>$online->patient_id,
                        'high_density_lipoproteins'=>$online->high_density_lipoproteins,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_history_hdl')->insert([ 
                        'phh_id'=> $online->phh_id, 
                        'patient_id'=>$online->patient_id,
                        'high_density_lipoproteins'=>$online->high_density_lipoproteins,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientHistoryLDL(){
        // syncronize patients_history_ldl table from offline to online   
        $offline = DB::table('patients_history_ldl')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history_ldl')->where('phl_id', $offline->phl_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history_ldl')->where('phl_id', $offline->phl_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'low_density_lipoprotein'=>$offline->low_density_lipoprotein,
                            'added_by'=>$offline->added_by,
                            'adder_type'=>$offline->adder_type,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history_ldl')->where('phl_id', $offline_count[0]->phl_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'low_density_lipoprotein'=>$offline_count[0]->low_density_lipoprotein,
                            'added_by'=>$offline_count[0]->added_by,
                            'adder_type'=>$offline_count[0]->adder_type,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history_ldl')->insert([ 
                        'phl_id'=> $offline->phl_id, 
                        'patient_id'=>$offline->patient_id,
                        'low_density_lipoprotein'=>$offline->low_density_lipoprotein,
                        'added_by'=>$offline->added_by,
                        'adder_type'=>$offline->adder_type,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_history_ldl table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history_ldl')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history_ldl')->where('phl_id', $online->phl_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history_ldl')->where('phl_id', $online->phl_id)->update([
                        'patient_id'=>$online->patient_id,
                        'low_density_lipoprotein'=>$online->low_density_lipoprotein,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_history_ldl')->insert([ 
                        'phl_id'=> $online->phl_id, 
                        'patient_id'=>$online->patient_id,
                        'low_density_lipoprotein'=>$online->low_density_lipoprotein,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientHistoryLithium(){
        // syncronize patients_history_lithium table from offline to online   
        $offline = DB::table('patients_history_lithium')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history_lithium')->where('phl_id', $offline->phl_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history_lithium')->where('phl_id', $offline->phl_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'lithium'=>$offline->lithium,
                            'added_by'=>$offline->added_by,
                            'adder_type'=>$offline->adder_type,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history_lithium')->where('phl_id', $offline_count[0]->phl_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'lithium'=>$offline_count[0]->lithium,
                            'added_by'=>$offline_count[0]->added_by,
                            'adder_type'=>$offline_count[0]->adder_type,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history_lithium')->insert([ 
                        'phl_id'=> $offline->phl_id, 
                        'patient_id'=>$offline->patient_id,
                        'lithium'=>$offline->lithium,
                        'added_by'=>$offline->added_by,
                        'adder_type'=>$offline->adder_type,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_history_lithium table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history_lithium')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history_lithium')->where('phl_id', $online->phl_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history_lithium')->where('phl_id', $online->phl_id)->update([
                        'patient_id'=>$online->patient_id,
                        'lithium'=>$online->lithium,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_history_lithium')->insert([ 
                        'phl_id'=> $online->phl_id, 
                        'patient_id'=>$online->patient_id,
                        'lithium'=>$online->lithium,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientHistoryMagnessium(){
        // syncronize patients_history_magnessium table from offline to online   
        $offline = DB::table('patients_history_magnessium')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history_magnessium')->where('phm_id', $offline->phm_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history_magnessium')->where('phm_id', $offline->phm_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'magnessium'=>$offline->magnessium,
                            'added_by'=>$offline->added_by,
                            'adder_type'=>$offline->adder_type,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history_magnessium')->where('phm_id', $offline_count[0]->phm_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'magnessium'=>$offline_count[0]->magnessium,
                            'added_by'=>$offline_count[0]->added_by,
                            'adder_type'=>$offline_count[0]->adder_type,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history_magnessium')->insert([ 
                        'phm_id'=> $offline->phm_id, 
                        'patient_id'=>$offline->patient_id,
                        'magnessium'=>$offline->magnessium,
                        'added_by'=>$offline->added_by,
                        'adder_type'=>$offline->adder_type,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_history_magnessium table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history_magnessium')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history_magnessium')->where('phm_id', $online->phm_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history_magnessium')->where('phm_id', $online->phm_id)->update([
                        'patient_id'=>$online->patient_id,
                        'magnessium'=>$online->magnessium,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_history_magnessium')->insert([ 
                        'phm_id'=> $online->phm_id, 
                        'patient_id'=>$online->patient_id,
                        'magnessium'=>$online->magnessium,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientHistoryPotassium(){
        // syncronize patients_history_potassium table from offline to online   
        $offline = DB::table('patients_history_potassium')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history_potassium')->where('php_id', $offline->php_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history_potassium')->where('php_id', $offline->php_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'potassium'=>$offline->potassium,
                            'added_by'=>$offline->added_by,
                            'adder_type'=>$offline->adder_type,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history_potassium')->where('php_id', $offline_count[0]->php_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'potassium'=>$offline_count[0]->potassium,
                            'added_by'=>$offline_count[0]->added_by,
                            'adder_type'=>$offline_count[0]->adder_type,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history_potassium')->insert([ 
                        'php_id'=> $offline->php_id, 
                        'patient_id'=>$offline->patient_id,
                        'potassium'=>$offline->potassium,
                        'added_by'=>$offline->added_by,
                        'adder_type'=>$offline->adder_type,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_history_potassium table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history_potassium')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history_potassium')->where('php_id', $online->php_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history_potassium')->where('php_id', $online->php_id)->update([
                        'patient_id'=>$online->patient_id,
                        'potassium'=>$online->potassium,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_history_potassium')->insert([ 
                        'php_id'=> $online->php_id, 
                        'patient_id'=>$online->patient_id,
                        'potassium'=>$online->potassium,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientHistoryProtein(){
        // syncronize patients_history_protein table from offline to online   
        $offline = DB::table('patients_history_protein')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history_protein')->where('php_id', $offline->php_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history_protein')->where('php_id', $offline->php_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'protein'=>$offline->protein,
                            'added_by'=>$offline->added_by,
                            'adder_type'=>$offline->adder_type,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history_protein')->where('php_id', $offline_count[0]->php_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'protein'=>$offline_count[0]->protein,
                            'added_by'=>$offline_count[0]->added_by,
                            'adder_type'=>$offline_count[0]->adder_type,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history_protein')->insert([ 
                        'php_id'=> $offline->php_id, 
                        'patient_id'=>$offline->patient_id,
                        'protein'=>$offline->protein,
                        'added_by'=>$offline->added_by,
                        'adder_type'=>$offline->adder_type,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_history_protein table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history_protein')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history_protein')->where('php_id', $online->php_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history_protein')->where('php_id', $online->php_id)->update([
                        'patient_id'=>$online->patient_id,
                        'protein'=>$online->protein,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_history_protein')->insert([ 
                        'php_id'=> $online->php_id, 
                        'patient_id'=>$online->patient_id,
                        'protein'=>$online->protein,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientHistorySoduim(){
        // syncronize patients_history_sodium table from offline to online   
        $offline = DB::table('patients_history_sodium')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_history_sodium')->where('phs_id', $offline->phs_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_history_sodium')->where('phs_id', $offline->phs_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'sodium'=>$offline->sodium,
                            'added_by'=>$offline->added_by,
                            'adder_type'=>$offline->adder_type,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_history_sodium')->where('phs_id', $offline_count[0]->phs_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'sodium'=>$offline_count[0]->sodium,
                            'added_by'=>$offline_count[0]->added_by,
                            'adder_type'=>$offline_count[0]->adder_type,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_history_sodium')->insert([ 
                        'phs_id'=> $offline->phs_id, 
                        'patient_id'=>$offline->patient_id,
                        'sodium'=>$offline->sodium,
                        'added_by'=>$offline->added_by,
                        'adder_type'=>$offline->adder_type,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_history_sodium table from online to offline 
        $online = DB::connection('mysql2')->table('patients_history_sodium')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_history_sodium')->where('phs_id', $online->phs_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_history_sodium')->where('phs_id', $online->phs_id)->update([
                        'patient_id'=>$online->patient_id,
                        'sodium'=>$online->sodium,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_history_sodium')->insert([ 
                        'phs_id'=> $online->phs_id, 
                        'patient_id'=>$online->patient_id,
                        'sodium'=>$online->sodium,
                        'added_by'=>$online->added_by,
                        'adder_type'=>$online->adder_type,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientHistoryLabBP(){
        // syncronize patients_lab_history table from offline to online   
        $offline = DB::table('patients_lab_history')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_lab_history')->where('plh_id', $offline->plh_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_lab_history')->where('plh_id', $offline->plh_id)->update([    
                            'patients_id'=>$offline->patients_id,
                            'systolic'=>$offline->systolic,
                            'diastolic'=>$offline->diastolic,
                            'added_by'=>$offline->added_by,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('patients_lab_history')->where('plh_id', $offline_count[0]->plh_id)->update([  
                            'patients_id'=>$offline_count[0]->patients_id,
                            'systolic'=>$offline_count[0]->systolic,
                            'diastolic'=>$offline_count[0]->diastolic,
                            'added_by'=>$offline_count[0]->added_by,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_lab_history')->insert([ 
                        'plh_id'=> $offline->plh_id, 
                        'patients_id'=>$offline->patients_id,
                        'systolic'=>$offline->systolic,
                        'diastolic'=>$offline->diastolic,
                        'added_by'=>$offline->added_by,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize patients_lab_history table from online to offline 
        $online = DB::connection('mysql2')->table('patients_lab_history')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_lab_history')->where('plh_id', $online->plh_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_lab_history')->where('plh_id', $online->plh_id)->update([
                        'patients_id'=>$online->patients_id,
                        'systolic'=>$online->systolic,
                        'diastolic'=>$online->diastolic,
                        'added_by'=>$online->added_by,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('patients_lab_history')->insert([ 
                        'plh_id'=> $online->plh_id, 
                        'patients_id'=>$online->patients_id,
                        'systolic'=>$online->systolic,
                        'diastolic'=>$online->diastolic,
                        'added_by'=>$online->added_by,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientPainHistory(){
        // syncronize patients_pain_history table from offline to online   
        $offline = DB::table('patients_pain_history')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_pain_history')->where('pph_id', $offline->pph_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_pain_history')->where('pph_id', $offline->pph_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'pain_position_x'=>$offline->pain_position_x,
                            'pain_position_y'=>$offline->pain_position_y,
                            'pain_level'=>$offline->pain_level,
                            'description'=>$offline->description,
                            'facing'=>$offline->facing,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_pain_history')->where('pph_id', $offline_count[0]->pph_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'pain_position_x'=>$offline_count[0]->pain_position_x,
                            'pain_position_y'=>$offline_count[0]->pain_position_y,
                            'pain_level'=>$offline_count[0]->pain_level,
                            'description'=>$offline_count[0]->description,
                            'facing'=>$offline_count[0]->facing,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_pain_history')->insert([ 
                        'pph_id'=> $offline->pph_id, 
                        'patient_id'=>$offline->patient_id,
                        'pain_position_x'=>$offline->pain_position_x,
                        'pain_position_y'=>$offline->pain_position_y,
                        'pain_level'=>$offline->pain_level,
                        'description'=>$offline->description,
                        'facing'=>$offline->facing,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_pain_history table from online to offline 
        $online = DB::connection('mysql2')->table('patients_pain_history')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_pain_history')->where('pph_id', $online->pph_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_pain_history')->where('pph_id', $online->pph_id)->update([
                        'patient_id'=>$online->patient_id,
                        'pain_position_x'=>$online->pain_position_x,
                        'pain_position_y'=>$online->pain_position_y,
                        'pain_level'=>$online->pain_level,
                        'description'=>$online->description,
                        'facing'=>$online->facing,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_pain_history')->insert([ 
                        'pph_id'=> $online->pph_id, 
                        'patient_id'=>$online->patient_id,
                        'pain_position_x'=>$online->pain_position_x,
                        'pain_position_y'=>$online->pain_position_y,
                        'pain_level'=>$online->pain_level,
                        'description'=>$online->description,
                        'facing'=>$online->facing,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientPermission(){
        // syncronize patients_permission table from offline to online   
        $offline = DB::table('patients_permission')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_permission')->where('permission_id', $offline->permission_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_permission')->where('permission_id', $offline->permission_id)->update([    
                            'patients_id'=>$offline->patients_id,
                            'doctors_id'=>$offline->doctors_id,
                            'permission_on'=>$offline->permission_on,
                            'permission_status'=>$offline->permission_status,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('patients_permission')->where('permission_id', $offline_count[0]->permission_id)->update([  
                            'patients_id'=>$offline_count[0]->patients_id,
                            'doctors_id'=>$offline_count[0]->doctors_id,
                            'permission_on'=>$offline_count[0]->permission_on,
                            'permission_status'=>$offline_count[0]->permission_status,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_permission')->insert([ 
                        'permission_id'=> $offline->permission_id, 
                        'patients_id'=>$offline->patients_id,
                        'doctors_id'=>$offline->doctors_id,
                        'permission_on'=>$offline->permission_on,
                        'permission_status'=>$offline->permission_status,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize patients_permission table from online to offline 
        $online = DB::connection('mysql2')->table('patients_permission')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_permission')->where('permission_id', $online->permission_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_permission')->where('permission_id', $online->permission_id)->update([
                        'patients_id'=>$online->patients_id,
                        'doctors_id'=>$online->doctors_id,
                        'permission_on'=>$online->permission_on,
                        'permission_status'=>$online->permission_status,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('patients_permission')->insert([ 
                        'permission_id'=> $online->permission_id, 
                        'patients_id'=>$online->patients_id,
                        'doctors_id'=>$online->doctors_id,
                        'permission_on'=>$online->permission_on,
                        'permission_status'=>$online->permission_status,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientPersonalMedication(){
        // syncronize patients_personal_medication table from offline to online   
        $offline = DB::table('patients_personal_medication')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_personal_medication')->where('ppm_id', $offline->ppm_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_personal_medication')->where('ppm_id', $offline->ppm_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'meals'=>$offline->meals,
                            'description'=>$offline->description,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_personal_medication')->where('ppm_id', $offline_count[0]->ppm_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'meals'=>$offline_count[0]->meals,
                            'description'=>$offline_count[0]->description,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_personal_medication')->insert([ 
                        'ppm_id'=> $offline->ppm_id, 
                        'patient_id'=>$offline->patient_id,
                        'meals'=>$offline->meals,
                        'description'=>$offline->description,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_personal_medication table from online to offline 
        $online = DB::connection('mysql2')->table('patients_personal_medication')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_personal_medication')->where('ppm_id', $online->ppm_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_personal_medication')->where('ppm_id', $online->ppm_id)->update([
                        'patient_id'=>$online->patient_id,
                        'meals'=>$online->meals,
                        'description'=>$online->description,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_personal_medication')->insert([ 
                        'ppm_id'=> $online->ppm_id, 
                        'patient_id'=>$online->patient_id,
                        'meals'=>$online->meals,
                        'description'=>$online->description,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientPulseHistory(){
        // syncronize patients_pulse_history table from offline to online   
        $offline = DB::table('patients_pulse_history')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_pulse_history')->where('pph_id', $offline->pph_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_pulse_history')->where('pph_id', $offline->pph_id)->update([    
                            'patients_id'=>$offline->patients_id,
                            'pulse'=>$offline->pulse,
                            'added_by'=>$offline->added_by,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patients_pulse_history')->where('pph_id', $offline_count[0]->pph_id)->update([  
                            'patients_id'=>$offline_count[0]->patients_id,
                            'pulse'=>$offline_count[0]->pulse,
                            'added_by'=>$offline_count[0]->added_by,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_pulse_history')->insert([ 
                        'pph_id'=> $offline->pph_id, 
                        'patients_id'=>$offline->patients_id,
                        'pulse'=>$offline->pulse,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patients_pulse_history table from online to offline 
        $online = DB::connection('mysql2')->table('patients_pulse_history')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_pulse_history')->where('pph_id', $online->pph_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_pulse_history')->where('pph_id', $online->pph_id)->update([
                        'patients_id'=>$online->patients_id,
                        'pulse'=>$online->pulse,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patients_pulse_history')->insert([ 
                        'pph_id'=> $online->pph_id, 
                        'patients_id'=>$online->patients_id,
                        'pulse'=>$online->pulse,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientRespiratoryHistory(){
        // syncronize patients_respiratory_history table from offline to online   
        $offline = DB::table('patients_respiratory_history')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_respiratory_history')->where('prh_id', $offline->prh_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('patients_respiratory_history')->where('prh_id', $offline->prh_id)->update([    
                        'patients_id'=>$offline->patients_id,
                        'respiratory'=>$offline->respiratory,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);
                } 
                else{
                    DB::table('patients_respiratory_history')->where('prh_id', $offline_count[0]->prh_id)->update([  
                        'patients_id'=>$offline_count[0]->patients_id,
                        'respiratory'=>$offline_count[0]->respiratory,
                        'added_by'=>$offline_count[0]->added_by,
                        'status'=>$offline_count[0]->status,
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);
                }  
            }else{
                DB::connection('mysql2')->table('patients_respiratory_history')->insert([ 
                    'prh_id'=> $offline->prh_id, 
                    'patients_id'=>$offline->patients_id,
                    'respiratory'=>$offline->respiratory,
                    'added_by'=>$offline->added_by,
                    'status'=>$offline->status,
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at
                ]); 
            } 
        }

        // syncronize patients_respiratory_history table from online to offline 
        $online = DB::connection('mysql2')->table('patients_respiratory_history')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_respiratory_history')->where('prh_id', $online->prh_id)->get();
            if(count($online_count) > 0){
                DB::table('patients_respiratory_history')->where('prh_id', $online->prh_id)->update([
                    'patients_id'=>$online->patients_id,
                    'respiratory'=>$online->respiratory,
                    'added_by'=>$online->added_by,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            }else{
                DB::table('patients_respiratory_history')->insert([ 
                    'prh_id'=> $online->prh_id, 
                    'patients_id'=>$online->patients_id,
                    'respiratory'=>$online->respiratory,
                    'added_by'=>$online->added_by,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            } 
        }   

        return true;
    }

    public static function syncPatientTempHistory(){
        // syncronize patients_temp_history table from offline to online   
        $offline = DB::table('patients_temp_history')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_temp_history')->where('pth_id', $offline->pth_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_temp_history')->where('pth_id', $offline->pth_id)->update([    
                            'patients_id'=>$offline->patients_id,
                            'temp'=>$offline->temp,
                            'added_by'=>$offline->added_by,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('patients_temp_history')->where('pth_id', $offline_count[0]->pth_id)->update([  
                            'patients_id'=>$offline_count[0]->patients_id,
                            'temp'=>$offline_count[0]->temp,
                            'added_by'=>$offline_count[0]->added_by,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_temp_history')->insert([ 
                        'pth_id'=> $offline->pth_id, 
                        'patients_id'=>$offline->patients_id,
                        'temp'=>$offline->temp,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize patients_temp_history table from online to offline 
        $online = DB::connection('mysql2')->table('patients_temp_history')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_temp_history')->where('pth_id', $online->pth_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_temp_history')->where('pth_id', $online->pth_id)->update([
                        'patients_id'=>$online->patients_id,
                        'temp'=>$online->temp,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('patients_temp_history')->insert([ 
                        'pth_id'=> $online->pth_id, 
                        'patients_id'=>$online->patients_id,
                        'temp'=>$online->temp,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientUricAcidHistory(){
        // syncronize patients_uric_acid_history table from offline to online   
        $offline = DB::table('patients_uric_acid_history')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_uric_acid_history')->where('uric_acid_id', $offline->uric_acid_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_uric_acid_history')->where('uric_acid_id', $offline->uric_acid_id)->update([    
                            'patients_id'=>$offline->patients_id,
                            'uric_acid'=>$offline->uric_acid,
                            'added_by'=>$offline->added_by,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('patients_uric_acid_history')->where('uric_acid_id', $offline_count[0]->uric_acid_id)->update([  
                            'patients_id'=>$offline_count[0]->patients_id,
                            'uric_acid'=>$offline_count[0]->uric_acid,
                            'added_by'=>$offline_count[0]->added_by,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_uric_acid_history')->insert([ 
                        'uric_acid_id'=> $offline->uric_acid_id, 
                        'patients_id'=>$offline->patients_id,
                        'uric_acid'=>$offline->uric_acid,
                        'added_by'=>$offline->added_by,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize patients_uric_acid_history table from online to offline 
        $online = DB::connection('mysql2')->table('patients_uric_acid_history')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_uric_acid_history')->where('uric_acid_id', $online->uric_acid_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_uric_acid_history')->where('uric_acid_id', $online->uric_acid_id)->update([
                        'patients_id'=>$online->patients_id,
                        'uric_acid'=>$online->uric_acid,
                        'added_by'=>$online->added_by,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('patients_uric_acid_history')->insert([ 
                        'uric_acid_id'=> $online->uric_acid_id, 
                        'patients_id'=>$online->patients_id,
                        'uric_acid'=>$online->uric_acid,
                        'added_by'=>$online->added_by,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPatientWeightHistory(){
        // syncronize patients_weight_history table from offline to online   
        $offline = DB::table('patients_weight_history')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patients_weight_history')->where('pwh_id', $offline->pwh_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patients_weight_history')->where('pwh_id', $offline->pwh_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'weight'=>$offline->weight,
                            'added_by'=>$offline->added_by,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('patients_weight_history')->where('pwh_id', $offline_count[0]->pwh_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'weight'=>$offline_count[0]->weight,
                            'added_by'=>$offline_count[0]->added_by,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patients_weight_history')->insert([ 
                        'pwh_id'=> $offline->pwh_id, 
                        'patient_id'=>$offline->patient_id,
                        'weight'=>$offline->weight,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize patients_weight_history table from online to offline 
        $online = DB::connection('mysql2')->table('patients_weight_history')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patients_weight_history')->where('pwh_id', $online->pwh_id)->get();
                if(count($online_count) > 0){
                    DB::table('patients_weight_history')->where('pwh_id', $online->pwh_id)->update([
                        'patient_id'=>$online->patient_id,
                        'weight'=>$online->weight,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('patients_weight_history')->insert([ 
                        'pwh_id'=> $online->pwh_id, 
                        'patient_id'=>$online->patient_id,
                        'weight'=>$online->weight,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    // public static function syncPatientQueue(){
    //     // syncronize patient_queue table from offline to online   
    //     $offline = DB::table('patient_queue')->get();  
    //     foreach($offline as $offline){  
    //         $offline_count = DB::connection('mysql2')->table('patient_queue')->where('pq_id', $offline->pq_id)->get();
    //         if(count($offline_count) > 0){ 
    //             if($offline->updated_at > $offline_count[0]->updated_at){  
    //                 DB::connection('mysql2')->table('patient_queue')->where('pq_id', $offline->pq_id)->update([    
    //                     'patient_id'=>$offline->patient_id,
    //                     'management_id'=>$offline->management_id,
    //                     'main_mgmt_id'=>$offline->main_mgmt_id,
    //                     'doctor_id'=>$offline->doctor_id,
    //                     'type'=>$offline->type,
    //                     'transaction_type'=>$offline->transaction_type,
    //                     'trace_number'=>$offline->trace_number,
    //                     'priority_sequence'=>$offline->priority_sequence,
    //                     'status'=>$offline->status,
    //                     'created_at'=>$offline->created_at,
    //                     'updated_at'=>$offline->updated_at
    //                 ]);
    //             } 
    //             else{
    //                 DB::table('patient_queue')->where('pq_id', $offline_count[0]->pq_id)->update([  
    //                     'patient_id'=>$offline_count[0]->patient_id,
    //                     'management_id'=>$offline_count[0]->management_id,
    //                     'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
    //                     'doctor_id'=>$offline_count[0]->doctor_id,
    //                     'type'=>$offline_count[0]->type,
    //                     'transaction_type'=>$offline_count[0]->transaction_type,
    //                     'trace_number'=>$offline_count[0]->trace_number,
    //                     'priority_sequence'=>$offline_count[0]->priority_sequence,
    //                     'status'=>$offline_count[0]->status,
    //                     'created_at'=>$offline_count[0]->created_at,
    //                     'updated_at'=>$offline_count[0]->updated_at
    //                 ]);
    //             }  
    //         }else{
    //             DB::connection('mysql2')->table('patient_queue')->insert([ 
    //                 'pq_id'=> $offline->pq_id, 
    //                 'patient_id'=>$offline->patient_id,
    //                 'management_id'=>$offline->management_id,
    //                 'main_mgmt_id'=>$offline->main_mgmt_id,
    //                 'doctor_id'=>$offline->doctor_id,
    //                 'type'=>$offline->type,
    //                 'transaction_type'=>$offline->transaction_type,
    //                 'trace_number'=>$offline->trace_number,
    //                 'priority_sequence'=>$offline->priority_sequence,
    //                 'status'=>$offline->status,
    //                 'created_at'=>$offline->created_at,
    //                 'updated_at'=>$offline->updated_at
    //             ]); 
    //         } 
    //     }

    //     // syncronize patient_queue table from online to offline 
    //     $online = DB::connection('mysql2')->table('patient_queue')->get();  
    //     foreach($online as $online){  
    //         $online_count = DB::table('patient_queue')->where('pq_id', $online->pq_id)->get();
    //         if(count($online_count) > 0){
    //             DB::table('patient_queue')->where('pq_id', $online->pq_id)->update([
    //                 'patient_id'=>$online->patient_id,
    //                 'management_id'=>$online->management_id,
    //                 'main_mgmt_id'=>$online->main_mgmt_id,
    //                 'doctor_id'=>$online->doctor_id,
    //                 'type'=>$online->type,
    //                 'transaction_type'=>$online->transaction_type,
    //                 'trace_number'=>$online->trace_number,
    //                 'priority_sequence'=>$online->priority_sequence,
    //                 'status'=>$online->status,
    //                 'created_at'=>$online->created_at,
    //                 'updated_at'=>$online->updated_at
    //             ]); 
    //         }else{
    //             DB::table('patient_queue')->insert([ 
    //                 'pq_id'=> $online->pq_id, 
    //                 'patient_id'=>$online->patient_id,
    //                 'management_id'=>$online->management_id,
    //                 'main_mgmt_id'=>$online->main_mgmt_id,
    //                 'doctor_id'=>$online->doctor_id,
    //                 'type'=>$online->type,
    //                 'transaction_type'=>$online->transaction_type,
    //                 'trace_number'=>$online->trace_number,
    //                 'priority_sequence'=>$online->priority_sequence,
    //                 'status'=>$online->status,
    //                 'created_at'=>$online->created_at,
    //                 'updated_at'=>$online->updated_at
    //             ]); 
    //         } 
    //     }   

    //     return true;
    // }
    
    public static function syncPatientShareImages(){
        // syncronize patient_sharedimages table from offline to online   
        $offline = DB::table('patient_sharedimages')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('patient_sharedimages')->where('psi_id', $offline->psi_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('patient_sharedimages')->where('psi_id', $offline->psi_id)->update([    
                            'patient_id'=>$offline->patient_id,
                            'image'=>$offline->image,
                            'category'=>$offline->category,
                            'type'=>$offline->type,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('patient_sharedimages')->where('psi_id', $offline_count[0]->psi_id)->update([  
                            'patient_id'=>$offline_count[0]->patient_id,
                            'image'=>$offline_count[0]->image,
                            'category'=>$offline_count[0]->category,
                            'type'=>$offline_count[0]->type,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('patient_sharedimages')->insert([ 
                        'psi_id'=> $offline->psi_id, 
                        'patient_id'=>$offline->patient_id,
                        'image'=>$offline->image,
                        'category'=>$offline->category,
                        'type'=>$offline->type,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize patient_sharedimages table from online to offline 
        $online = DB::connection('mysql2')->table('patient_sharedimages')->get();  
        foreach($online as $online){  
            $online_count = DB::table('patient_sharedimages')->where('psi_id', $online->psi_id)->get();
                if(count($online_count) > 0){
                    DB::table('patient_sharedimages')->where('psi_id', $online->psi_id)->update([
                        'patient_id'=>$online->patient_id,
                        'image'=>$online->image,
                        'category'=>$online->category,
                        'type'=>$online->type,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('patient_sharedimages')->insert([ 
                        'psi_id'=> $online->psi_id, 
                        'patient_id'=>$online->patient_id,
                        'image'=>$online->image,
                        'category'=>$online->category,
                        'type'=>$online->type,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPayrollHeader($data){
        // syncronize payroll_header table from offline to online   
        $offline = DB::table('payroll_header')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('payroll_header')->where('phi_id', $offline->phi_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('payroll_header')->where('phi_id', $offline->phi_id)->update([    
                            'management_id'=>$offline->management_id,
                            'header'=>$offline->header,
                            'category'=>$offline->category,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at,
                        ]);
                    } 
                    else{
                        DB::table('payroll_header')->where('phi_id', $offline_count[0]->phi_id)->update([  
                            'management_id'=>$offline_count[0]->management_id,
                            'header'=>$offline_count[0]->header,
                            'category'=>$offline_count[0]->category,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at,
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('payroll_header')->insert([ 
                        'phi_id'=> $offline->phi_id, 
                        'management_id'=>$offline->management_id,
                        'header'=>$offline->header,
                        'category'=>$offline->category,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at,
                    ]); 
                } 
        }

        // syncronize payroll_header table from online to offline 
        $online = DB::connection('mysql2')->table('payroll_header')->where('management_id', $data['management_id'])->get();  
        foreach($online as $online){  
            $online_count = DB::table('payroll_header')->where('phi_id', $online->phi_id)->get();
                if(count($online_count) > 0){
                    DB::table('payroll_header')->where('phi_id', $online->phi_id)->update([
                        'management_id'=>$online->management_id,
                        'header'=>$online->header,
                        'category'=>$online->category,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at,
                    ]); 
                }else{
                    DB::table('payroll_header')->insert([ 
                        'phi_id'=> $online->phi_id, 
                        'management_id'=>$online->management_id,
                        'header'=>$online->header,
                        'category'=>$online->category,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at,
                    ]); 
                } 
        }   

        return true;
    }

    public static function pharmacyclinicWarehoseDRAccounts($data){
        // syncronize pharmacyclinic_warehose_draccounts table from offline to online
        $offline = DB::table('pharmacyclinic_warehose_draccounts')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('pharmacyclinic_warehose_draccounts')->where('pwdr_id', $offline->pwdr_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('pharmacyclinic_warehose_draccounts')->where('pwdr_id', $offline->pwdr_id)->update([    
                        'warehouse_id'=>$offline->warehouse_id,
                        'management_id'=>$offline->management_id,
                        'sales_agent_id'=>$offline->sales_agent_id,
                        'pharmacy_name'=>$offline->pharmacy_name,
                        'pharmacy_address'=>$offline->pharmacy_address,
                        'contact_number'=>$offline->contact_number,
                        'contact_person'=>$offline->contact_person,
                        'contact_position'=>$offline->contact_position,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);
                } 
                else{
                    DB::table('pharmacyclinic_warehose_draccounts')->where('pwdr_id', $offline_count[0]->pwdr_id)->update([  
                        'warehouse_id'=>$offline_count[0]->warehouse_id,
                        'management_id'=>$offline_count[0]->management_id,
                        'sales_agent_id'=>$offline_count[0]->sales_agent_id,
                        'pharmacy_name'=>$offline_count[0]->pharmacy_name,
                        'pharmacy_address'=>$offline_count[0]->pharmacy_address,
                        'contact_number'=>$offline_count[0]->contact_number,
                        'contact_person'=>$offline_count[0]->contact_person,
                        'contact_position'=>$offline_count[0]->contact_position,
                        'status'=>$offline_count[0]->status,
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);
                }  
            }else{
                DB::connection('mysql2')->table('pharmacyclinic_warehose_draccounts')->insert([
                    'pwdr_id'=> $offline->pwdr_id,
                    'warehouse_id'=>$offline->warehouse_id,
                    'management_id'=>$offline->management_id,
                    'sales_agent_id'=>$offline->sales_agent_id,
                    'pharmacy_name'=>$offline->pharmacy_name,
                    'pharmacy_address'=>$offline->pharmacy_address,
                    'contact_number'=>$offline->contact_number,
                    'contact_person'=>$offline->contact_person,
                    'contact_position'=>$offline->contact_position,
                    'status'=>$offline->status,
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at
                ]); 
            } 
        }

        // syncronize pharmacyclinic_warehose_draccounts table from online to offline 
        $online = DB::connection('mysql2')->table('pharmacyclinic_warehose_draccounts')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('pharmacyclinic_warehose_draccounts')->where('pwdr_id', $online->pwdr_id)->get();
            if(count($online_count) > 0){
                DB::table('pharmacyclinic_warehose_draccounts')->where('pwdr_id', $online->pwdr_id)->update([
                    'warehouse_id'=>$online->warehouse_id,
                    'management_id'=>$online->management_id,
                    'sales_agent_id'=>$online->sales_agent_id,
                    'pharmacy_name'=>$online->pharmacy_name,
                    'pharmacy_address'=>$online->pharmacy_address,
                    'contact_number'=>$online->contact_number,
                    'contact_person'=>$online->contact_person,
                    'contact_position'=>$online->contact_position,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            }else{
                DB::table('pharmacyclinic_warehose_draccounts')->insert([ 
                    'pwdr_id'=> $online->pwdr_id,
                    'warehouse_id'=>$online->warehouse_id,
                    'management_id'=>$online->management_id,
                    'sales_agent_id'=>$online->sales_agent_id,
                    'pharmacy_name'=>$online->pharmacy_name,
                    'pharmacy_address'=>$online->pharmacy_address,
                    'contact_number'=>$online->contact_number,
                    'contact_person'=>$online->contact_person,
                    'contact_position'=>$online->contact_position,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            } 
        }   

        return true;
    }

    public static function pharmacyclinicWarehoseDraccountsAgent($data){
        // syncronize pharmacyclinic_warehose_draccounts_agent table from offline to online
        $offline = DB::table('pharmacyclinic_warehose_draccounts_agent')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('pharmacyclinic_warehose_draccounts_agent')->where('phwda_id', $offline->phwda_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('pharmacyclinic_warehose_draccounts_agent')->where('phwda_id', $offline->phwda_id)->update([    
                        'agent_id'=>$offline->agent_id,
                        'management_id'=>$offline->management_id,
                        'main_mngt_id'=>$offline->main_mngt_id,
                        'name'=>$offline->name,
                        'address'=>$offline->address,
                        'contact'=>$offline->contact,
                        'date_started'=>$offline->date_started,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);
                } 
                else{
                    DB::table('pharmacyclinic_warehose_draccounts_agent')->where('phwda_id', $offline_count[0]->phwda_id)->update([  
                        'agent_id'=>$offline_count[0]->agent_id,
                        'management_id'=>$offline_count[0]->management_id,
                        'main_mngt_id'=>$offline_count[0]->main_mngt_id,
                        'name'=>$offline_count[0]->name,
                        'address'=>$offline_count[0]->address,
                        'contact'=>$offline_count[0]->contact,
                        'date_started'=>$offline_count[0]->date_started,
                        'status'=>$offline_count[0]->status,
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);
                }  
            }else{
                DB::connection('mysql2')->table('pharmacyclinic_warehose_draccounts_agent')->insert([
                    'phwda_id'=> $offline->phwda_id,
                    'agent_id'=>$offline->agent_id,
                    'management_id'=>$offline->management_id,
                    'main_mngt_id'=>$offline->main_mngt_id,
                    'name'=>$offline->name,
                    'address'=>$offline->address,
                    'contact'=>$offline->contact,
                    'date_started'=>$offline->date_started,
                    'status'=>$offline->status,
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at
                ]); 
            } 
        }

        // syncronize pharmacyclinic_warehose_draccounts_agent table from online to offline 
        $online = DB::connection('mysql2')->table('pharmacyclinic_warehose_draccounts_agent')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('pharmacyclinic_warehose_draccounts_agent')->where('phwda_id', $online->phwda_id)->get();
            if(count($online_count) > 0){
                DB::table('pharmacyclinic_warehose_draccounts_agent')->where('phwda_id', $online->phwda_id)->update([
                    'agent_id'=>$online->agent_id,
                    'management_id'=>$online->management_id,
                    'main_mngt_id'=>$online->main_mngt_id,
                    'name'=>$online->name,
                    'address'=>$online->address,
                    'contact'=>$online->contact,
                    'date_started'=>$online->date_started,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            }else{
                DB::table('pharmacyclinic_warehose_draccounts_agent')->insert([ 
                    'phwda_id'=> $online->phwda_id,
                    'agent_id'=>$online->agent_id,
                    'management_id'=>$online->management_id,
                    'main_mngt_id'=>$online->main_mngt_id,
                    'name'=>$online->name,
                    'address'=>$online->address,
                    'contact'=>$online->contact,
                    'date_started'=>$online->date_started,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            } 
        }   

        return true;
    }    

    public static function pharmacyclinicWarehoseProducts($data){
        // syncronize pharmacyclinic_warehose_products table from offline to online
        $offline = DB::table('pharmacyclinic_warehose_products')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('pharmacyclinic_warehose_products')->where('pwp_id', $offline->pwp_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('pharmacyclinic_warehose_products')->where('pwp_id', $offline->pwp_id)->update([    
                            'warehouse_id'=>$offline->warehouse_id,
                            'management_id'=>$offline->management_id,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'product_id'=>$offline->product_id,
                            'product_code'=>$offline->product_code,
                            'product_name'=>$offline->product_name,
                            'product_generic'=>$offline->product_generic,
                            'product_category'=>$offline->product_category,
                            'unit'=>$offline->unit,
                            'msrp'=>$offline->msrp,
                            'srp'=>$offline->srp,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('pharmacyclinic_warehose_products')->where('pwp_id', $offline_count[0]->pwp_id)->update([  
                            'warehouse_id'=>$offline_count[0]->warehouse_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'product_id'=>$offline_count[0]->product_id,
                            'product_code'=>$offline_count[0]->product_code,
                            'product_name'=>$offline_count[0]->product_name,
                            'product_generic'=>$offline_count[0]->product_generic,
                            'product_category'=>$offline_count[0]->product_category,
                            'unit'=>$offline_count[0]->unit,
                            'msrp'=>$offline_count[0]->msrp,
                            'srp'=>$offline_count[0]->srp,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('pharmacyclinic_warehose_products')->insert([
                        'pwp_id'=> $offline->pwp_id,
                        'warehouse_id'=>$offline->warehouse_id,
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'product_id'=>$offline->product_id,
                        'product_code'=>$offline->product_code,
                        'product_name'=>$offline->product_name,
                        'product_generic'=>$offline->product_generic,
                        'product_category'=>$offline->product_category,
                        'unit'=>$offline->unit,
                        'msrp'=>$offline->msrp,
                        'srp'=>$offline->srp,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize pharmacyclinic_warehose_products table from online to offline 
        $online = DB::connection('mysql2')->table('pharmacyclinic_warehose_products')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('pharmacyclinic_warehose_products')->where('pwp_id', $online->pwp_id)->get();
                if(count($online_count) > 0){
                    DB::table('pharmacyclinic_warehose_products')->where('pwp_id', $online->pwp_id)->update([
                        'warehouse_id'=>$online->warehouse_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'product_id'=>$online->product_id,
                        'product_code'=>$online->product_code,
                        'product_name'=>$online->product_name,
                        'product_generic'=>$online->product_generic,
                        'product_category'=>$online->product_category,
                        'unit'=>$online->unit,
                        'msrp'=>$online->msrp,
                        'srp'=>$online->srp,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('pharmacyclinic_warehose_products')->insert([ 
                        'pwp_id'=> $online->pwp_id,
                        'warehouse_id'=>$online->warehouse_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'product_id'=>$online->product_id,
                        'product_code'=>$online->product_code,
                        'product_name'=>$online->product_name,
                        'product_generic'=>$online->product_generic,
                        'product_category'=>$online->product_category,
                        'unit'=>$online->unit,
                        'msrp'=>$online->msrp,
                        'srp'=>$online->srp,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function pharmacyclinicWarehouseBrand($data){
        // syncronize pharmacyclinic_warehouse_brand table from offline to online
        $offline = DB::table('pharmacyclinic_warehouse_brand')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('pharmacyclinic_warehouse_brand')->where('brand_id', $offline->brand_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('pharmacyclinic_warehouse_brand')->where('brand_id', $offline->brand_id)->update([    
                            'management_id'=>$offline->management_id,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'brand'=>$offline->brand,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('pharmacyclinic_warehouse_brand')->where('brand_id', $offline_count[0]->brand_id)->update([  
                            'management_id'=>$offline_count[0]->management_id,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'brand'=>$offline_count[0]->brand,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('pharmacyclinic_warehouse_brand')->insert([
                        'brand_id'=> $offline->brand_id,
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'brand'=>$offline->brand,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize pharmacyclinic_warehouse_brand table from online to offline 
        $online = DB::connection('mysql2')->table('pharmacyclinic_warehouse_brand')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('pharmacyclinic_warehouse_brand')->where('brand_id', $online->brand_id)->get();
                if(count($online_count) > 0){
                    DB::table('pharmacyclinic_warehouse_brand')->where('brand_id', $online->brand_id)->update([
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'brand'=>$online->brand,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('pharmacyclinic_warehouse_brand')->insert([ 
                        'brand_id'=> $online->brand_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'brand'=>$online->brand,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function pharmacyclinicWarehouseCategory($data){
        // syncronize pharmacyclinic_warehouse_category table from offline to online
        $offline = DB::table('pharmacyclinic_warehouse_category')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('pharmacyclinic_warehouse_category')->where('category_id', $offline->category_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('pharmacyclinic_warehouse_category')->where('category_id', $offline->category_id)->update([    
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'category'=>$offline->category,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]);
                } 
                else{
                    DB::table('pharmacyclinic_warehouse_category')->where('category_id', $offline_count[0]->category_id)->update([  
                        'management_id'=>$offline_count[0]->management_id,
                        'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                        'category'=>$offline_count[0]->category,
                        'status'=>$offline_count[0]->status,
                        'created_at'=>$offline_count[0]->created_at,
                        'updated_at'=>$offline_count[0]->updated_at
                    ]);
                }  
            }else{
                DB::connection('mysql2')->table('pharmacyclinic_warehouse_category')->insert([
                    'category_id'=> $offline->category_id,
                    'management_id'=>$offline->management_id,
                    'main_mgmt_id'=>$offline->main_mgmt_id,
                    'category'=>$offline->category,
                    'status'=>$offline->status,
                    'created_at'=>$offline->created_at,
                    'updated_at'=>$offline->updated_at
                ]); 
            } 
        }

        // syncronize pharmacyclinic_warehouse_category table from online to offline 
        $online = DB::connection('mysql2')->table('pharmacyclinic_warehouse_category')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('pharmacyclinic_warehouse_category')->where('category_id', $online->category_id)->get();
            if(count($online_count) > 0){
                DB::table('pharmacyclinic_warehouse_category')->where('category_id', $online->category_id)->update([
                    'management_id'=>$online->management_id,
                    'main_mgmt_id'=>$online->main_mgmt_id,
                    'category'=>$online->category,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            }else{
                DB::table('pharmacyclinic_warehouse_category')->insert([ 
                    'category_id'=> $online->category_id,
                    'management_id'=>$online->management_id,
                    'main_mgmt_id'=>$online->main_mgmt_id,
                    'category'=>$online->category,
                    'status'=>$online->status,
                    'created_at'=>$online->created_at,
                    'updated_at'=>$online->updated_at
                ]); 
            } 
        }   

        return true;
    }

    public static function pharmacyclinicWarehouseInventory($data){
        // syncronize pharmacyclinic_warehouse_inventory table from offline to online
        $offline = DB::table('pharmacyclinic_warehouse_inventory')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory')->where('pwi_id', $offline->pwi_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory')->where('pwi_id', $offline->pwi_id)->update([    
                            'warehouse_id'=>$offline->warehouse_id,
                            'management_id'=>$offline->management_id,
                            'product_id'=>$offline->product_id,
                            'product_name'=>$offline->product_name,
                            'product_generic'=>$offline->product_generic,
                            'unit'=>$offline->unit,
                            'msrp'=>$offline->msrp,
                            'srp'=>$offline->srp,
                            'qty'=>$offline->qty,
                            'batch_number'=>$offline->batch_number,
                            'invoice_number'=>$offline->invoice_number,
                            'dr_number'=>$offline->dr_number,
                            'dr_totalamount'=>$offline->dr_totalamount,
                            'dr_account'=>$offline->dr_account,
                            'dr_accountname'=>$offline->dr_accountname,
                            'dr_accountaddress'=>$offline->dr_accountaddress,
                            'dr_date'=>$offline->dr_date,
                            'expiration_date'=>$offline->expiration_date,
                            'manufactured_date'=>$offline->manufactured_date,
                            'delivered_date'=>$offline->delivered_date,
                            'delivered_by'=>$offline->delivered_by,
                            'type'=>$offline->type,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('pharmacyclinic_warehouse_inventory')->where('pwi_id', $offline_count[0]->pwi_id)->update([  
                            'warehouse_id'=>$offline_count[0]->warehouse_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'product_id'=>$offline_count[0]->product_id,
                            'product_name'=>$offline_count[0]->product_name,
                            'product_generic'=>$offline_count[0]->product_generic,
                            'unit'=>$offline_count[0]->unit,
                            'msrp'=>$offline_count[0]->msrp,
                            'srp'=>$offline_count[0]->srp,
                            'qty'=>$offline_count[0]->qty,
                            'batch_number'=>$offline_count[0]->batch_number,
                            'invoice_number'=>$offline_count[0]->invoice_number,
                            'dr_number'=>$offline_count[0]->dr_number,
                            'dr_totalamount'=>$offline_count[0]->dr_totalamount,
                            'dr_account'=>$offline_count[0]->dr_account,
                            'dr_accountname'=>$offline_count[0]->dr_accountname,
                            'dr_accountaddress'=>$offline_count[0]->dr_accountaddress,
                            'dr_date'=>$offline_count[0]->dr_date,
                            'expiration_date'=>$offline_count[0]->expiration_date,
                            'manufactured_date'=>$offline_count[0]->manufactured_date,
                            'delivered_date'=>$offline_count[0]->delivered_date,
                            'delivered_by'=>$offline_count[0]->delivered_by,
                            'type'=>$offline_count[0]->type,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory')->insert([
                        'pwi_id'=> $offline->pwi_id,
                        'warehouse_id'=>$offline->warehouse_id,
                        'management_id'=>$offline->management_id,
                        'product_id'=>$offline->product_id,
                        'product_name'=>$offline->product_name,
                        'product_generic'=>$offline->product_generic,
                        'unit'=>$offline->unit,
                        'msrp'=>$offline->msrp,
                        'srp'=>$offline->srp,
                        'qty'=>$offline->qty,
                        'batch_number'=>$offline->batch_number,
                        'invoice_number'=>$offline->invoice_number,
                        'dr_number'=>$offline->dr_number,
                        'dr_totalamount'=>$offline->dr_totalamount,
                        'dr_account'=>$offline->dr_account,
                        'dr_accountname'=>$offline->dr_accountname,
                        'dr_accountaddress'=>$offline->dr_accountaddress,
                        'dr_date'=>$offline->dr_date,
                        'expiration_date'=>$offline->expiration_date,
                        'manufactured_date'=>$offline->manufactured_date,
                        'delivered_date'=>$offline->delivered_date,
                        'delivered_by'=>$offline->delivered_by,
                        'type'=>$offline->type,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize pharmacyclinic_warehouse_inventory table from online to offline 
        $online = DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('pharmacyclinic_warehouse_inventory')->where('pwi_id', $online->pwi_id)->get();
                if(count($online_count) > 0){
                    DB::table('pharmacyclinic_warehouse_inventory')->where('pwi_id', $online->pwi_id)->update([
                        'warehouse_id'=>$offline->warehouse_id,
                        'management_id'=>$offline->management_id,
                        'product_id'=>$offline->product_id,
                        'product_name'=>$offline->product_name,
                        'product_generic'=>$offline->product_generic,
                        'unit'=>$offline->unit,
                        'msrp'=>$offline->msrp,
                        'srp'=>$offline->srp,
                        'qty'=>$offline->qty,
                        'batch_number'=>$offline->batch_number,
                        'invoice_number'=>$offline->invoice_number,
                        'dr_number'=>$offline->dr_number,
                        'dr_totalamount'=>$offline->dr_totalamount,
                        'dr_account'=>$offline->dr_account,
                        'dr_accountname'=>$offline->dr_accountname,
                        'dr_accountaddress'=>$offline->dr_accountaddress,
                        'dr_date'=>$offline->dr_date,
                        'expiration_date'=>$offline->expiration_date,
                        'manufactured_date'=>$offline->manufactured_date,
                        'delivered_date'=>$offline->delivered_date,
                        'delivered_by'=>$offline->delivered_by,
                        'type'=>$offline->type,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                }else{
                    DB::table('pharmacyclinic_warehouse_inventory')->insert([ 
                        'pwi_id'=> $online->pwi_id,
                        'warehouse_id'=>$online->warehouse_id,
                        'management_id'=>$online->management_id,
                        'product_id'=>$online->product_id,
                        'product_name'=>$online->product_name,
                        'product_generic'=>$online->product_generic,
                        'unit'=>$online->unit,
                        'msrp'=>$online->msrp,
                        'srp'=>$online->srp,
                        'qty'=>$online->qty,
                        'batch_number'=>$online->batch_number,
                        'invoice_number'=>$online->invoice_number,
                        'dr_number'=>$online->dr_number,
                        'dr_totalamount'=>$online->dr_totalamount,
                        'dr_account'=>$online->dr_account,
                        'dr_accountname'=>$online->dr_accountname,
                        'dr_accountaddress'=>$online->dr_accountaddress,
                        'dr_date'=>$online->dr_date,
                        'expiration_date'=>$online->expiration_date,
                        'manufactured_date'=>$online->manufactured_date,
                        'delivered_date'=>$online->delivered_date,
                        'delivered_by'=>$online->delivered_by,
                        'type'=>$online->type,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function pharmacyclinicWarehouseInventoryForapproval($data){
        // syncronize pharmacyclinic_warehouse_inventory_forapproval table from offline to online
        $offline = DB::table('pharmacyclinic_warehouse_inventory_forapproval')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_forapproval')->where('pwif_id', $offline->pwif_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_forapproval')->where('pwif_id', $offline->pwif_id)->update([    
                            'warehouse_id'=>$offline->warehouse_id,
                            'management_id'=>$offline->management_id,
                            'product_id'=>$offline->product_id,
                            'product_name'=>$offline->product_name,
                            'product_generic'=>$offline->product_generic,
                            'unit'=>$offline->unit,
                            'msrp'=>$offline->msrp,
                            'srp'=>$offline->srp,
                            'qty'=>$offline->qty,
                            'batch_number'=>$offline->batch_number,
                            'po_number'=>$offline->po_number,
                            'invoice_number'=>$offline->invoice_number,
                            'dr_number'=>$offline->dr_number,
                            'dr_totalamount'=>$offline->dr_totalamount,
                            'dr_account'=>$offline->dr_account,
                            'dr_accountname'=>$offline->dr_accountname,
                            'dr_accountaddress'=>$offline->dr_accountaddress,
                            'dr_date'=>$offline->dr_date,
                            'expiration_date'=>$offline->expiration_date,
                            'manufactured_date'=>$offline->manufactured_date,
                            'delivered_date'=>$offline->delivered_date,
                            'delivered_by'=>$offline->delivered_by,
                            'type'=>$offline->type,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('pharmacyclinic_warehouse_inventory_forapproval')->where('pwif_id', $offline_count[0]->pwif_id)->update([  
                            'warehouse_id'=>$offline_count[0]->warehouse_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'product_id'=>$offline_count[0]->product_id,
                            'product_name'=>$offline_count[0]->product_name,
                            'product_generic'=>$offline_count[0]->product_generic,
                            'unit'=>$offline_count[0]->unit,
                            'msrp'=>$offline_count[0]->msrp,
                            'srp'=>$offline_count[0]->srp,
                            'qty'=>$offline_count[0]->qty,
                            'batch_number'=>$offline_count[0]->batch_number,
                            'po_number'=>$offline_count[0]->po_number,
                            'invoice_number'=>$offline_count[0]->invoice_number,
                            'dr_number'=>$offline_count[0]->dr_number,
                            'dr_totalamount'=>$offline_count[0]->dr_totalamount,
                            'dr_account'=>$offline_count[0]->dr_account,
                            'dr_accountname'=>$offline_count[0]->dr_accountname,
                            'dr_accountaddress'=>$offline_count[0]->dr_accountaddress,
                            'dr_date'=>$offline_count[0]->dr_date,
                            'expiration_date'=>$offline_count[0]->expiration_date,
                            'manufactured_date'=>$offline_count[0]->manufactured_date,
                            'delivered_date'=>$offline_count[0]->delivered_date,
                            'delivered_by'=>$offline_count[0]->delivered_by,
                            'type'=>$offline_count[0]->type,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_forapproval')->insert([
                        'pwif_id'=> $offline->pwif_id,
                        'warehouse_id'=>$offline->warehouse_id,
                        'management_id'=>$offline->management_id,
                        'product_id'=>$offline->product_id,
                        'product_name'=>$offline->product_name,
                        'product_generic'=>$offline->product_generic,
                        'unit'=>$offline->unit,
                        'msrp'=>$offline->msrp,
                        'srp'=>$offline->srp,
                        'qty'=>$offline->qty,
                        'batch_number'=>$offline->batch_number,
                        'po_number'=>$offline->po_number,
                        'invoice_number'=>$offline->invoice_number,
                        'dr_number'=>$offline->dr_number,
                        'dr_totalamount'=>$offline->dr_totalamount,
                        'dr_account'=>$offline->dr_account,
                        'dr_accountname'=>$offline->dr_accountname,
                        'dr_accountaddress'=>$offline->dr_accountaddress,
                        'dr_date'=>$offline->dr_date,
                        'expiration_date'=>$offline->expiration_date,
                        'manufactured_date'=>$offline->manufactured_date,
                        'delivered_date'=>$offline->delivered_date,
                        'delivered_by'=>$offline->delivered_by,
                        'type'=>$offline->type,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize pharmacyclinic_warehouse_inventory_forapproval table from online to offline 
        $online = DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_forapproval')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('pharmacyclinic_warehouse_inventory_forapproval')->where('pwif_id', $online->pwif_id)->get();
                if(count($online_count) > 0){
                    DB::table('pharmacyclinic_warehouse_inventory_forapproval')->where('pwif_id', $online->pwif_id)->update([
                        'warehouse_id'=>$online->warehouse_id,
                        'management_id'=>$online->management_id,
                        'product_id'=>$online->product_id,
                        'product_name'=>$online->product_name,
                        'product_generic'=>$online->product_generic,
                        'unit'=>$online->unit,
                        'msrp'=>$online->msrp,
                        'srp'=>$online->srp,
                        'qty'=>$online->qty,
                        'batch_number'=>$online->batch_number,
                        'po_number'=>$online->po_number,
                        'invoice_number'=>$online->invoice_number,
                        'dr_number'=>$online->dr_number,
                        'dr_totalamount'=>$online->dr_totalamount,
                        'dr_account'=>$online->dr_account,
                        'dr_accountname'=>$online->dr_accountname,
                        'dr_accountaddress'=>$online->dr_accountaddress,
                        'dr_date'=>$online->dr_date,
                        'expiration_date'=>$online->expiration_date,
                        'manufactured_date'=>$online->manufactured_date,
                        'delivered_date'=>$online->delivered_date,
                        'delivered_by'=>$online->delivered_by,
                        'type'=>$online->type,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('pharmacyclinic_warehouse_inventory_forapproval')->insert([ 
                        'pwif_id'=> $online->pwif_id,
                        'warehouse_id'=>$online->warehouse_id,
                        'management_id'=>$online->management_id,
                        'product_id'=>$online->product_id,
                        'product_name'=>$online->product_name,
                        'product_generic'=>$online->product_generic,
                        'unit'=>$online->unit,
                        'msrp'=>$online->msrp,
                        'srp'=>$online->srp,
                        'qty'=>$online->qty,
                        'batch_number'=>$online->batch_number,
                        'po_number'=>$online->po_number,
                        'invoice_number'=>$online->invoice_number,
                        'dr_number'=>$online->dr_number,
                        'dr_totalamount'=>$online->dr_totalamount,
                        'dr_account'=>$online->dr_account,
                        'dr_accountname'=>$online->dr_accountname,
                        'dr_accountaddress'=>$online->dr_accountaddress,
                        'dr_date'=>$online->dr_date,
                        'expiration_date'=>$online->expiration_date,
                        'manufactured_date'=>$online->manufactured_date,
                        'delivered_date'=>$online->delivered_date,
                        'delivered_by'=>$online->delivered_by,
                        'type'=>$online->type,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function pharmacyclinicWarehouseInventoryTempExclusive($data){
        // syncronize pharmacyclinic_warehouse_inventory_temp_exclusive table from offline to online
        $offline = DB::table('pharmacyclinic_warehouse_inventory_temp_exclusive')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_temp_exclusive')->where('pwite_id', $offline->pwite_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_temp_exclusive')->where('pwite_id', $offline->pwite_id)->update([    
                            'warehouse_id'=>$offline->warehouse_id,
                            'request_id'=>$offline->request_id,
                            'warehouse_id'=>$offline->warehouse_id,
                            'management_id'=>$offline->management_id,
                            'product_id'=>$offline->product_id,
                            'product_name'=>$offline->product_name,
                            'product_generic'=>$offline->product_generic,
                            'unit'=>$offline->unit,
                            'msrp'=>$offline->msrp,
                            'srp'=>$offline->srp,
                            'qty'=>$offline->qty,
                            'batch_number'=>$offline->batch_number,
                            'expiration_date'=>$offline->expiration_date,
                            'manufactured_date'=>$offline->manufactured_date,
                            'type'=>$offline->type,
                            'item_check'=>$offline->item_check,
                            'accounting_approve'=>$offline->accounting_approve,
                            'supplier_approve'=>$offline->supplier_approve,
                            'owner_approve'=>$offline->owner_approve,
                            'owner_disapprove_reason'=>$offline->owner_disapprove_reason,
                            'finalized'=>$offline->finalized,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at,
                        ]);
                    } 
                    else{
                        DB::table('pharmacyclinic_warehouse_inventory_temp_exclusive')->where('pwite_id', $offline_count[0]->pwite_id)->update([  
                            'warehouse_id'=>$offline_count[0]->warehouse_id,
                            'request_id'=>$offline_count[0]->request_id,
                            'warehouse_id'=>$offline_count[0]->warehouse_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'product_id'=>$offline_count[0]->product_id,
                            'product_name'=>$offline_count[0]->product_name,
                            'product_generic'=>$offline_count[0]->product_generic,
                            'unit'=>$offline_count[0]->unit,
                            'msrp'=>$offline_count[0]->msrp,
                            'srp'=>$offline_count[0]->srp,
                            'qty'=>$offline_count[0]->qty,
                            'batch_number'=>$offline_count[0]->batch_number,
                            'expiration_date'=>$offline_count[0]->expiration_date,
                            'manufactured_date'=>$offline_count[0]->manufactured_date,
                            'type'=>$offline_count[0]->type,
                            'item_check'=>$offline_count[0]->item_check,
                            'accounting_approve'=>$offline_count[0]->accounting_approve,
                            'supplier_approve'=>$offline_count[0]->supplier_approve,
                            'owner_approve'=>$offline_count[0]->owner_approve,
                            'owner_disapprove_reason'=>$offline_count[0]->owner_disapprove_reason,
                            'finalized'=>$offline_count[0]->finalized,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at,
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_temp_exclusive')->insert([
                        'pwite_id'=> $offline->pwite_id,
                        'warehouse_id'=>$offline->warehouse_id,
                        'request_id'=>$offline->request_id,
                        'warehouse_id'=>$offline->warehouse_id,
                        'management_id'=>$offline->management_id,
                        'product_id'=>$offline->product_id,
                        'product_name'=>$offline->product_name,
                        'product_generic'=>$offline->product_generic,
                        'unit'=>$offline->unit,
                        'msrp'=>$offline->msrp,
                        'srp'=>$offline->srp,
                        'qty'=>$offline->qty,
                        'batch_number'=>$offline->batch_number,
                        'expiration_date'=>$offline->expiration_date,
                        'manufactured_date'=>$offline->manufactured_date,
                        'type'=>$offline->type,
                        'item_check'=>$offline->item_check,
                        'accounting_approve'=>$offline->accounting_approve,
                        'supplier_approve'=>$offline->supplier_approve,
                        'owner_approve'=>$offline->owner_approve,
                        'owner_disapprove_reason'=>$offline->owner_disapprove_reason,
                        'finalized'=>$offline->finalized,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at,
                    ]); 
                } 
        }

        // syncronize pharmacyclinic_warehouse_inventory_temp_exclusive table from online to offline 
        $online = DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_temp_exclusive')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('pharmacyclinic_warehouse_inventory_temp_exclusive')->where('pwite_id', $online->pwite_id)->get();
                if(count($online_count) > 0){
                    DB::table('pharmacyclinic_warehouse_inventory_temp_exclusive')->where('pwite_id', $online->pwite_id)->update([
                        'warehouse_id'=>$online->warehouse_id,
                        'request_id'=>$online->request_id,
                        'warehouse_id'=>$online->warehouse_id,
                        'management_id'=>$online->management_id,
                        'product_id'=>$online->product_id,
                        'product_name'=>$online->product_name,
                        'product_generic'=>$online->product_generic,
                        'unit'=>$online->unit,
                        'msrp'=>$online->msrp,
                        'srp'=>$online->srp,
                        'qty'=>$online->qty,
                        'batch_number'=>$online->batch_number,
                        'expiration_date'=>$online->expiration_date,
                        'manufactured_date'=>$online->manufactured_date,
                        'type'=>$online->type,
                        'item_check'=>$online->item_check,
                        'accounting_approve'=>$online->accounting_approve,
                        'supplier_approve'=>$online->supplier_approve,
                        'owner_approve'=>$online->owner_approve,
                        'owner_disapprove_reason'=>$online->owner_disapprove_reason,
                        'finalized'=>$online->finalized,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at,
                    ]); 
                }else{
                    DB::table('pharmacyclinic_warehouse_inventory_temp_exclusive')->insert([ 
                        'pwite_id'=> $online->pwite_id,
                        'warehouse_id'=>$online->warehouse_id,
                        'request_id'=>$online->request_id,
                        'warehouse_id'=>$online->warehouse_id,
                        'management_id'=>$online->management_id,
                        'product_id'=>$online->product_id,
                        'product_name'=>$online->product_name,
                        'product_generic'=>$online->product_generic,
                        'unit'=>$online->unit,
                        'msrp'=>$online->msrp,
                        'srp'=>$online->srp,
                        'qty'=>$online->qty,
                        'batch_number'=>$online->batch_number,
                        'expiration_date'=>$online->expiration_date,
                        'manufactured_date'=>$online->manufactured_date,
                        'type'=>$online->type,
                        'item_check'=>$online->item_check,
                        'accounting_approve'=>$online->accounting_approve,
                        'supplier_approve'=>$online->supplier_approve,
                        'owner_approve'=>$online->owner_approve,
                        'owner_disapprove_reason'=>$online->owner_disapprove_reason,
                        'finalized'=>$online->finalized,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at,
                    ]); 
                } 
        }   

        return true;
    }
    

    public static function pharmacyclinicWarehouseInventoryTemp($data){
        // syncronize pharmacyclinic_warehouse_inventory_temp table from offline to online
        $offline = DB::table('pharmacyclinic_warehouse_inventory_temp')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_temp')->where('pwit_id', $offline->pwit_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_temp')->where('pwit_id', $offline->pwit_id)->update([    
                            'warehouse_id'=>$offline->warehouse_id,
                            'management_id'=>$offline->management_id,
                            'product_id'=>$offline->product_id,
                            'product_name'=>$offline->product_name,
                            'product_generic'=>$offline->product_generic,
                            'unit'=>$offline->unit,
                            'msrp'=>$offline->msrp,
                            'srp'=>$offline->srp,
                            'qty'=>$offline->qty,
                            'batch_number'=>$offline->batch_number,
                            'expiration_date'=>$offline->expiration_date,
                            'manufactured_date'=>$offline->manufactured_date,
                            'type'=>$offline->type,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('pharmacyclinic_warehouse_inventory_temp')->where('pwit_id', $offline_count[0]->pwit_id)->update([  
                            'warehouse_id'=>$offline_count[0]->warehouse_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'product_id'=>$offline_count[0]->product_id,
                            'product_name'=>$offline_count[0]->product_name,
                            'product_generic'=>$offline_count[0]->product_generic,
                            'unit'=>$offline_count[0]->unit,
                            'msrp'=>$offline_count[0]->msrp,
                            'srp'=>$offline_count[0]->srp,
                            'qty'=>$offline_count[0]->qty,
                            'batch_number'=>$offline_count[0]->batch_number,
                            'expiration_date'=>$offline_count[0]->expiration_date,
                            'manufactured_date'=>$offline_count[0]->manufactured_date,
                            'type'=>$offline_count[0]->type,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_temp')->insert([
                        'pwit_id'=> $offline->pwit_id,
                        'warehouse_id'=>$offline->warehouse_id,
                        'management_id'=>$offline->management_id,
                        'product_id'=>$offline->product_id,
                        'product_name'=>$offline->product_name,
                        'product_generic'=>$offline->product_generic,
                        'unit'=>$offline->unit,
                        'msrp'=>$offline->msrp,
                        'srp'=>$offline->srp,
                        'qty'=>$offline->qty,
                        'batch_number'=>$offline->batch_number,
                        'expiration_date'=>$offline->expiration_date,
                        'manufactured_date'=>$offline->manufactured_date,
                        'type'=>$offline->type,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize pharmacyclinic_warehouse_inventory_temp table from online to offline 
        $online = DB::connection('mysql2')->table('pharmacyclinic_warehouse_inventory_temp')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('pharmacyclinic_warehouse_inventory_temp')->where('pwit_id', $online->pwit_id)->get();
                if(count($online_count) > 0){
                    DB::table('pharmacyclinic_warehouse_inventory_temp')->where('pwit_id', $online->pwit_id)->update([
                        'pwit_id'=> $online->pwit_id,
                        'warehouse_id'=>$online->warehouse_id,
                        'management_id'=>$online->management_id,
                        'product_id'=>$online->product_id,
                        'product_name'=>$online->product_name,
                        'product_generic'=>$online->product_generic,
                        'unit'=>$online->unit,
                        'msrp'=>$online->msrp,
                        'srp'=>$online->srp,
                        'qty'=>$online->qty,
                        'batch_number'=>$online->batch_number,
                        'expiration_date'=>$online->expiration_date,
                        'manufactured_date'=>$online->manufactured_date,
                        'type'=>$online->type,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('pharmacyclinic_warehouse_inventory_temp')->insert([ 
                        'pwit_id'=> $online->pwit_id,
                        'warehouse_id'=>$online->warehouse_id,
                        'management_id'=>$online->management_id,
                        'product_id'=>$online->product_id,
                        'product_name'=>$online->product_name,
                        'product_generic'=>$online->product_generic,
                        'unit'=>$online->unit,
                        'msrp'=>$online->msrp,
                        'srp'=>$online->srp,
                        'qty'=>$online->qty,
                        'batch_number'=>$online->batch_number,
                        'invoice_number'=>$online->invoice_number,
                        'dr_number'=>$online->dr_number,
                        'dr_totalamount'=>$online->dr_totalamount,
                        'dr_account'=>$online->dr_account,
                        'dr_accountname'=>$online->dr_accountname,
                        'dr_accountaddress'=>$online->dr_accountaddress,
                        'dr_date'=>$online->dr_date,
                        'expiration_date'=>$online->expiration_date,
                        'manufactured_date'=>$online->manufactured_date,
                        'delivered_date'=>$online->delivered_date,
                        'delivered_by'=>$online->delivered_by,
                        'type'=>$online->type,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function pharmacyclinicWarehousePOInvoiceTemp($data){
        // syncronize pharmacyclinic_warehouse_po_invoice_temp table from offline to online
        $offline = DB::table('pharmacyclinic_warehouse_po_invoice_temp')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('pharmacyclinic_warehouse_po_invoice_temp')->where('pwpit_id', $offline->pwpit_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('pharmacyclinic_warehouse_po_invoice_temp')->where('pwpit_id', $offline->pwpit_id)->update([    
                            'warehouse_id'=>$offline->warehouse_id,
                            'management_id'=>$offline->management_id,
                            'product_id'=>$offline->product_id,
                            'product_code'=>$offline->product_code,
                            'product_name'=>$offline->product_name,
                            'product_generic'=>$offline->product_generic,
                            'product_category'=>$offline->product_category,
                            'unit'=>$offline->unit,
                            'msrp'=>$offline->msrp,
                            'srp'=>$offline->srp,
                            'qty'=>$offline->qty,
                            'batch_number'=>$offline->batch_number,
                            'expiration_date'=>$offline->expiration_date,
                            'manufactured_date'=>$offline->manufactured_date,
                            'type'=>$offline->type,
                            'saved_by'=>$offline->saved_by,
                            'po_number'=>$offline->po_number,
                            'is_saved'=>$offline->is_saved,
                            'is_confirmed'=>$offline->is_confirmed,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('pharmacyclinic_warehouse_po_invoice_temp')->where('pwpit_id', $offline_count[0]->pwpit_id)->update([  
                            'warehouse_id'=>$offline_count[0]->warehouse_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'product_id'=>$offline_count[0]->product_id,
                            'product_code'=>$offline_count[0]->product_code,
                            'product_name'=>$offline_count[0]->product_name,
                            'product_generic'=>$offline_count[0]->product_generic,
                            'product_category'=>$offline_count[0]->product_category,
                            'unit'=>$offline_count[0]->unit,
                            'msrp'=>$offline_count[0]->msrp,
                            'srp'=>$offline_count[0]->srp,
                            'qty'=>$offline_count[0]->qty,
                            'batch_number'=>$offline_count[0]->batch_number,
                            'expiration_date'=>$offline_count[0]->expiration_date,
                            'manufactured_date'=>$offline_count[0]->manufactured_date,
                            'type'=>$offline_count[0]->type,
                            'saved_by'=>$offline_count[0]->saved_by,
                            'po_number'=>$offline_count[0]->po_number,
                            'is_saved'=>$offline_count[0]->is_saved,
                            'is_confirmed'=>$offline_count[0]->is_confirmed,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('pharmacyclinic_warehouse_po_invoice_temp')->insert([
                        'pwpit_id'=> $offline->pwpit_id,
                        'warehouse_id'=>$offline->warehouse_id,
                        'management_id'=>$offline->management_id,
                        'product_id'=>$offline->product_id,
                        'product_code'=>$offline->product_code,
                        'product_name'=>$offline->product_name,
                        'product_generic'=>$offline->product_generic,
                        'product_category'=>$offline->product_category,
                        'unit'=>$offline->unit,
                        'msrp'=>$offline->msrp,
                        'srp'=>$offline->srp,
                        'qty'=>$offline->qty,
                        'batch_number'=>$offline->batch_number,
                        'expiration_date'=>$offline->expiration_date,
                        'manufactured_date'=>$offline->manufactured_date,
                        'type'=>$offline->type,
                        'saved_by'=>$offline->saved_by,
                        'po_number'=>$offline->po_number,
                        'is_saved'=>$offline->is_saved,
                        'is_confirmed'=>$offline->is_confirmed,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize pharmacyclinic_warehouse_po_invoice_temp table from online to offline 
        $online = DB::connection('mysql2')->table('pharmacyclinic_warehouse_po_invoice_temp')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('pharmacyclinic_warehouse_po_invoice_temp')->where('pwpit_id', $online->pwpit_id)->get();
                if(count($online_count) > 0){
                    DB::table('pharmacyclinic_warehouse_po_invoice_temp')->where('pwpit_id', $online->pwpit_id)->update([
                        'warehouse_id'=>$online->warehouse_id,
                        'management_id'=>$online->management_id,
                        'product_id'=>$online->product_id,
                        'product_code'=>$online->product_code,
                        'product_name'=>$online->product_name,
                        'product_generic'=>$online->product_generic,
                        'product_category'=>$online->product_category,
                        'unit'=>$online->unit,
                        'msrp'=>$online->msrp,
                        'srp'=>$online->srp,
                        'qty'=>$online->qty,
                        'batch_number'=>$online->batch_number,
                        'expiration_date'=>$online->expiration_date,
                        'manufactured_date'=>$online->manufactured_date,
                        'type'=>$online->type,
                        'saved_by'=>$online->saved_by,
                        'po_number'=>$online->po_number,
                        'is_saved'=>$online->is_saved,
                        'is_confirmed'=>$online->is_confirmed,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('pharmacyclinic_warehouse_po_invoice_temp')->insert([ 
                        'pwpit_id'=> $online->pwpit_id,
                        'warehouse_id'=>$online->warehouse_id,
                        'management_id'=>$online->management_id,
                        'product_id'=>$online->product_id,
                        'product_code'=>$online->product_code,
                        'product_name'=>$online->product_name,
                        'product_generic'=>$online->product_generic,
                        'product_category'=>$online->product_category,
                        'unit'=>$online->unit,
                        'msrp'=>$online->msrp,
                        'srp'=>$online->srp,
                        'qty'=>$online->qty,
                        'batch_number'=>$online->batch_number,
                        'expiration_date'=>$online->expiration_date,
                        'manufactured_date'=>$online->manufactured_date,
                        'type'=>$online->type,
                        'saved_by'=>$online->saved_by,
                        'po_number'=>$online->po_number,
                        'is_saved'=>$online->is_saved,
                        'is_confirmed'=>$online->is_confirmed,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    // //wala ni
    // public static function syncPharmacy($data){
    //     // syncronize pharmacy table from offline to online   
    //     $offline = DB::table('pharmacy')->where('management_id', $data['management_id'])->get();  
    //     foreach($offline as $offline){  
    //         $offline_count = DB::connection('mysql2')->table('pharmacy')->where('phmcy_id', $offline->phmcy_id)->get();
    //             if(count($offline_count) > 0){ 
    //                 if($offline->updated_at > $offline_count[0]->updated_at){  
    //                     DB::connection('mysql2')->table('pharmacy')->where('phmcy_id', $offline->phmcy_id)->update([    
    //                         'pharmacy_id'=>$offline->pharmacy_id,
    //                         'user_id'=>$offline->user_id,
    //                         'management_id'=>$offline->management_id,
    //                         'user_fullname'=>$offline->user_fullname,
    //                         'user_address'=>$offline->user_address,
    //                         'name'=>$offline->name,
    //                         'gender'=>$offline->gender,
    //                         'company_name'=>$offline->company_name,
    //                         'address'=>$offline->address,
    //                         'tin_number'=>$offline->tin_number,
    //                         'email'=>$offline->email,
    //                         'contact'=>$offline->contact,
    //                         'status'=>$offline->status,
    //                         'role'=>$offline->role,
    //                         'added_by'=>$offline->added_by,
    //                         'pharmacy_category'=>$offline->pharmacy_category,
    //                         'pharmacy_type'=>$offline->pharmacy_type,
    //                         'company_logo'=>$offline->company_logo,
    //                         'image'=>$offline->image,
    //                         'created_at'=>$offline->created_at,
    //                         'updated_at'=>$offline->updated_at
    //                     ]);
    //                 } 
    //                 else{
    //                     DB::table('pharmacy')->where('phmcy_id', $offline_count[0]->phmcy_id)->update([  
    //                         'pharmacy_id'=>$offline_count[0]->pharmacy_id,
    //                         'user_id'=>$offline_count[0]->user_id,
    //                         'management_id'=>$offline_count[0]->management_id,
    //                         'user_fullname'=>$offline_count[0]->user_fullname,
    //                         'user_address'=>$offline_count[0]->user_address,
    //                         'name'=>$offline_count[0]->name,
    //                         'gender'=>$offline_count[0]->gender,
    //                         'company_name'=>$offline_count[0]->company_name,
    //                         'address'=>$offline_count[0]->address,
    //                         'tin_number'=>$offline_count[0]->tin_number,
    //                         'email'=>$offline_count[0]->email,
    //                         'contact'=>$offline_count[0]->contact,
    //                         'status'=>$offline_count[0]->status,
    //                         'role'=>$offline_count[0]->role,
    //                         'added_by'=>$offline_count[0]->added_by,
    //                         'pharmacy_category'=>$offline_count[0]->pharmacy_category,
    //                         'pharmacy_type'=>$offline_count[0]->pharmacy_type,
    //                         'company_logo'=>$offline_count[0]->company_logo,
    //                         'image'=>$offline_count[0]->image,
    //                         'created_at'=>$offline_count[0]->created_at,
    //                         'updated_at'=>$offline_count[0]->updated_at
    //                     ]);
    //                 }  
    //             }else{
    //                 DB::connection('mysql2')->table('pharmacy')->insert([ 
    //                     'phmcy_id'=> $offline->phmcy_id, 
    //                     'pharmacy_id'=>$offline->pharmacy_id,
    //                     'user_id'=>$offline->user_id,
    //                     'management_id'=>$offline->management_id,
    //                     'user_fullname'=>$offline->user_fullname,
    //                     'user_address'=>$offline->user_address,
    //                     'name'=>$offline->name,
    //                     'gender'=>$offline->gender,
    //                     'company_name'=>$offline->company_name,
    //                     'address'=>$offline->address,
    //                     'tin_number'=>$offline->tin_number,
    //                     'email'=>$offline->email,
    //                     'contact'=>$offline->contact,
    //                     'status'=>$offline->status,
    //                     'role'=>$offline->role,
    //                     'added_by'=>$offline->added_by,
    //                     'pharmacy_category'=>$offline->pharmacy_category,
    //                     'pharmacy_type'=>$offline->pharmacy_type,
    //                     'company_logo'=>$offline->company_logo,
    //                     'image'=>$offline->image,
    //                     'created_at'=>$offline->created_at,
    //                     'updated_at'=>$offline->updated_at
    //                 ]); 
    //             } 
    //     }

    //     // syncronize pharmacy table from online to offline 
    //     $online = DB::connection('mysql2')->table('pharmacy')->where('management_id', $data['management_id'])->get();  
    //     foreach($online as $online){  
    //         $online_count = DB::table('pharmacy')->where('phmcy_id', $online->phmcy_id)->get();
    //             if(count($online_count) > 0){
    //                 DB::table('pharmacy')->where('phmcy_id', $online->phmcy_id)->update([
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'user_id'=>$online->user_id,
    //                     'management_id'=>$online->management_id,
    //                     'user_fullname'=>$online->user_fullname,
    //                     'user_address'=>$online->user_address,
    //                     'name'=>$online->name,
    //                     'gender'=>$online->gender,
    //                     'company_name'=>$online->company_name,
    //                     'address'=>$online->address,
    //                     'tin_number'=>$online->tin_number,
    //                     'email'=>$online->email,
    //                     'contact'=>$online->contact,
    //                     'status'=>$online->status,
    //                     'role'=>$online->role,
    //                     'added_by'=>$online->added_by,
    //                     'pharmacy_category'=>$online->pharmacy_category,
    //                     'pharmacy_type'=>$online->pharmacy_type,
    //                     'company_logo'=>$online->company_logo,
    //                     'image'=>$online->image,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                 ]); 
    //             }else{
    //                 DB::table('pharmacy')->insert([ 
    //                     'phmcy_id'=> $online->phmcy_id, 
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'user_id'=>$online->user_id,
    //                     'management_id'=>$online->management_id,
    //                     'user_fullname'=>$online->user_fullname,
    //                     'user_address'=>$online->user_address,
    //                     'name'=>$online->name,
    //                     'gender'=>$online->gender,
    //                     'company_name'=>$online->company_name,
    //                     'address'=>$online->address,
    //                     'tin_number'=>$online->tin_number,
    //                     'email'=>$online->email,
    //                     'contact'=>$online->contact,
    //                     'status'=>$online->status,
    //                     'role'=>$online->role,
    //                     'added_by'=>$online->added_by,
    //                     'pharmacy_category'=>$online->pharmacy_category,
    //                     'pharmacy_type'=>$online->pharmacy_type,
    //                     'company_logo'=>$online->company_logo,
    //                     'image'=>$online->image,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                 ]); 
    //             } 
    //     }   

    //     return true;
    // }
    // //wla ni
    // public static function syncPharmacyHospitalHistory($data){
    //     // syncronize pharmacyhospital_history table from offline to online   
    //     $offline = DB::table('pharmacyhospital_history')->where('management_id', $data['management_id'])->get();  
    //     foreach($offline as $offline){  
    //         $offline_count = DB::connection('mysql2')->table('pharmacyhospital_history')->where('pch_id', $offline->pch_id)->get();
    //             if(count($offline_count) > 0){ 
    //                 if($offline->updated_at > $offline_count[0]->updated_at){  
    //                     DB::connection('mysql2')->table('pharmacyhospital_history')->where('pch_id', $offline->pch_id)->update([    
    //                         'product_id'=>$offline->product_id,
    //                         'pharmacy_id'=>$offline->pharmacy_id,
    //                         'management_id'=>$offline->management_id,
    //                         'username'=>$offline->username,
    //                         'product'=>$offline->product,
    //                         'description'=>$offline->description,
    //                         'unit'=>$offline->unit,
    //                         'quantity'=>$offline->quantity,
    //                         'request_type'=>$offline->request_type,
    //                         'dr_no'=>$offline->dr_no,
    //                         'supplier'=>$offline->supplier,
    //                         'remarks'=>$offline->remarks,
    //                         'created_at'=>$offline->created_at,
    //                         'updated_at'=>$offline->updated_at
    //                     ]);
    //                 } 
    //                 else{
    //                     DB::table('pharmacyhospital_history')->where('pch_id', $offline_count[0]->pch_id)->update([  
    //                         'product_id'=>$offline_count[0]->product_id,
    //                         'pharmacy_id'=>$offline_count[0]->pharmacy_id,
    //                         'management_id'=>$offline_count[0]->management_id,
    //                         'username'=>$offline_count[0]->username,
    //                         'product'=>$offline_count[0]->product,
    //                         'description'=>$offline_count[0]->description,
    //                         'unit'=>$offline_count[0]->unit,
    //                         'quantity'=>$offline_count[0]->quantity,
    //                         'request_type'=>$offline_count[0]->request_type,
    //                         'dr_no'=>$offline_count[0]->dr_no,
    //                         'supplier'=>$offline_count[0]->supplier,
    //                         'remarks'=>$offline_count[0]->remarks,
    //                         'created_at'=>$offline_count[0]->created_at,
    //                         'updated_at'=>$offline_count[0]->updated_at
    //                     ]);
    //                 }  
    //             }else{
    //                 DB::connection('mysql2')->table('pharmacyhospital_history')->insert([ 
    //                     'pch_id'=> $offline->pch_id, 
    //                     'product_id'=>$offline->product_id,
    //                     'pharmacy_id'=>$offline->pharmacy_id,
    //                     'management_id'=>$offline->management_id,
    //                     'username'=>$offline->username,
    //                     'product'=>$offline->product,
    //                     'description'=>$offline->description,
    //                     'unit'=>$offline->unit,
    //                     'quantity'=>$offline->quantity,
    //                     'request_type'=>$offline->request_type,
    //                     'dr_no'=>$offline->dr_no,
    //                     'supplier'=>$offline->supplier,
    //                     'remarks'=>$offline->remarks,
    //                     'created_at'=>$offline->created_at,
    //                     'updated_at'=>$offline->updated_at
    //                 ]); 
    //             } 
    //     }

    //     // syncronize pharmacyhospital_history table from online to offline 
    //     $online = DB::connection('mysql2')->table('pharmacyhospital_history')->where('management_id', $data['management_id'])->get();  
    //     foreach($online as $online){  
    //         $online_count = DB::table('pharmacyhospital_history')->where('pch_id', $online->pch_id)->get();
    //             if(count($online_count) > 0){
    //                 DB::table('pharmacyhospital_history')->where('pch_id', $online->pch_id)->update([
    //                     'product_id'=>$online->product_id,
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'management_id'=>$online->management_id,
    //                     'username'=>$online->username,
    //                     'product'=>$online->product,
    //                     'description'=>$online->description,
    //                     'unit'=>$online->unit,
    //                     'quantity'=>$online->quantity,
    //                     'request_type'=>$online->request_type,
    //                     'dr_no'=>$online->dr_no,
    //                     'supplier'=>$online->supplier,
    //                     'remarks'=>$online->remarks,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                 ]); 
    //             }else{
    //                 DB::table('pharmacyhospital_history')->insert([ 
    //                     'pch_id'=> $online->pch_id, 
    //                     'product_id'=>$online->product_id,
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'management_id'=>$online->management_id,
    //                     'username'=>$online->username,
    //                     'product'=>$online->product,
    //                     'description'=>$online->description,
    //                     'unit'=>$online->unit,
    //                     'quantity'=>$online->quantity,
    //                     'request_type'=>$online->request_type,
    //                     'dr_no'=>$online->dr_no,
    //                     'supplier'=>$online->supplier,
    //                     'remarks'=>$online->remarks,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                 ]); 
    //             } 
    //     }

    //     return true;
    // }
    // //wala ni
    // public static function syncPharmacyHospitalInventory($data){
    //     // syncronize pharmacyhospital_inventory table from offline to online   
    //     $offline = DB::table('pharmacyhospital_inventory')->where('management_id', $data['management_id'])->get();  
    //     foreach($offline as $offline){  
    //         $offline_count = DB::connection('mysql2')->table('pharmacyhospital_inventory')->where('inventory_id', $offline->inventory_id)->get();
    //             if(count($offline_count) > 0){ 
    //                 if($offline->updated_at > $offline_count[0]->updated_at){  
    //                     DB::connection('mysql2')->table('pharmacyhospital_inventory')->where('inventory_id', $offline->inventory_id)->update([    
    //                         'product_id'=>$offline->product_id,
    //                         'management_id'=>$offline->management_id,
    //                         'pharmacy_id'=>$offline->pharmacy_id,
    //                         'dr_no'=>$offline->dr_no,
    //                         'quantity'=>$offline->quantity,
    //                         'unit'=>$offline->unit,
    //                         'starting_quantity'=>$offline->starting_quantity,
    //                         'manufacture_date'=>$offline->manufacture_date,
    //                         'batch_no'=>$offline->batch_no,
    //                         'expiry_date'=>$offline->expiry_date,
    //                         'notification_date'=>$offline->notification_date,
    //                         'request_type'=>$offline->request_type,
    //                         'comment'=>$offline->comment,
    //                         'created_at'=>$offline->created_at,
    //                         'updated_at'=>$offline->updated_at
    //                     ]);
    //                 } 
    //                 else{
    //                     DB::table('pharmacyhospital_inventory')->where('inventory_id', $offline_count[0]->inventory_id)->update([  
    //                         'product_id'=>$offline_count[0]->product_id,
    //                         'management_id'=>$offline_count[0]->management_id,
    //                         'pharmacy_id'=>$offline_count[0]->pharmacy_id,
    //                         'dr_no'=>$offline_count[0]->dr_no,
    //                         'quantity'=>$offline_count[0]->quantity,
    //                         'unit'=>$offline_count[0]->unit,
    //                         'starting_quantity'=>$offline_count[0]->starting_quantity,
    //                         'manufacture_date'=>$offline_count[0]->manufacture_date,
    //                         'batch_no'=>$offline_count[0]->batch_no,
    //                         'expiry_date'=>$offline_count[0]->expiry_date,
    //                         'notification_date'=>$offline_count[0]->notification_date,
    //                         'request_type'=>$offline_count[0]->request_type,
    //                         'comment'=>$offline_count[0]->comment,
    //                         'created_at'=>$offline_count[0]->created_at,
    //                         'updated_at'=>$offline_count[0]->updated_at
    //                     ]);
    //                 }  
    //             }else{
    //                 DB::connection('mysql2')->table('pharmacyhospital_inventory')->insert([ 
    //                     'inventory_id'=> $offline->inventory_id, 
    //                     'product_id'=>$offline->product_id,
    //                     'management_id'=>$offline->management_id,
    //                     'pharmacy_id'=>$offline->pharmacy_id,
    //                     'dr_no'=>$offline->dr_no,
    //                     'quantity'=>$offline->quantity,
    //                     'unit'=>$offline->unit,
    //                     'starting_quantity'=>$offline->starting_quantity,
    //                     'manufacture_date'=>$offline->manufacture_date,
    //                     'batch_no'=>$offline->batch_no,
    //                     'expiry_date'=>$offline->expiry_date,
    //                     'notification_date'=>$offline->notification_date,
    //                     'request_type'=>$offline->request_type,
    //                     'comment'=>$offline->comment,
    //                     'created_at'=>$offline->created_at,
    //                     'updated_at'=>$offline->updated_at
    //                 ]); 
    //             } 
    //     }

    //     // syncronize pharmacyhospital_inventory table from online to offline 
    //     $online = DB::connection('mysql2')->table('pharmacyhospital_inventory')->where('management_id', $data['management_id'])->get();  
    //     foreach($online as $online){  
    //         $online_count = DB::table('pharmacyhospital_inventory')->where('inventory_id', $online->inventory_id)->get();
    //             if(count($online_count) > 0){
    //                 DB::table('pharmacyhospital_inventory')->where('inventory_id', $online->inventory_id)->update([
    //                     'product_id'=>$online->product_id,
    //                     'management_id'=>$online->management_id,
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'dr_no'=>$online->dr_no,
    //                     'quantity'=>$online->quantity,
    //                     'unit'=>$online->unit,
    //                     'starting_quantity'=>$online->starting_quantity,
    //                     'manufacture_date'=>$online->manufacture_date,
    //                     'batch_no'=>$online->batch_no,
    //                     'expiry_date'=>$online->expiry_date,
    //                     'notification_date'=>$online->notification_date,
    //                     'request_type'=>$online->request_type,
    //                     'comment'=>$online->comment,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                 ]); 
    //             }else{
    //                 DB::table('pharmacyhospital_inventory')->insert([ 
    //                     'inventory_id'=> $online->inventory_id, 
    //                     'product_id'=>$online->product_id,
    //                     'management_id'=>$online->management_id,
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'dr_no'=>$online->dr_no,
    //                     'quantity'=>$online->quantity,
    //                     'unit'=>$online->unit,
    //                     'starting_quantity'=>$online->starting_quantity,
    //                     'manufacture_date'=>$online->manufacture_date,
    //                     'batch_no'=>$online->batch_no,
    //                     'expiry_date'=>$online->expiry_date,
    //                     'notification_date'=>$online->notification_date,
    //                     'request_type'=>$online->request_type,
    //                     'comment'=>$online->comment,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                 ]); 
    //             } 
    //     }   

    //     return true;
    // }
    // //wala ni
    // public static function syncPharmacyHospitalProducts($data){
    //      // syncronize pharmacyhospital_products table from offline to online   
    //      $offline = DB::table('pharmacyhospital_products')->where('management_id', $data['management_id'])->get();  
    //      foreach($offline as $offline){  
    //          $offline_count = DB::connection('mysql2')->table('pharmacyhospital_products')->where('product_id', $offline->product_id)->get();
    //              if(count($offline_count) > 0){ 
    //                  if($offline->updated_at > $offline_count[0]->updated_at){  
    //                      DB::connection('mysql2')->table('pharmacyhospital_products')->where('product_id', $offline->product_id)->update([    
    //                         'pharmacy_id'=>$offline->pharmacy_id,
    //                         'management_id'=>$offline->management_id,
    //                         'product'=>$offline->product,
    //                         'description'=>$offline->description,
    //                         'supplier'=>$offline->supplier,
    //                         'unit_price'=>$offline->unit_price,
    //                         'srp'=>$offline->srp,
    //                         'created_at'=>$offline->created_at,
    //                         'updated_at'=>$offline->updated_at
    //                      ]);
    //                  } 
    //                  else{
    //                      DB::table('pharmacyhospital_products')->where('product_id', $offline_count[0]->product_id)->update([  
    //                         'pharmacy_id'=>$offline_count[0]->pharmacy_id,
    //                         'management_id'=>$offline_count[0]->management_id,
    //                         'product'=>$offline_count[0]->product,
    //                         'description'=>$offline_count[0]->description,
    //                         'supplier'=>$offline_count[0]->supplier,
    //                         'unit_price'=>$offline_count[0]->unit_price,
    //                         'srp'=>$offline_count[0]->srp,
    //                         'created_at'=>$offline_count[0]->created_at,
    //                         'updated_at'=>$offline_count[0]->updated_at
    //                      ]);
    //                  }  
    //              }else{
    //                  DB::connection('mysql2')->table('pharmacyhospital_products')->insert([ 
    //                     'product_id'=> $offline->product_id, 
    //                     'pharmacy_id'=>$offline->pharmacy_id,
    //                     'management_id'=>$offline->management_id,
    //                     'product'=>$offline->product,
    //                     'description'=>$offline->description,
    //                     'supplier'=>$offline->supplier,
    //                     'unit_price'=>$offline->unit_price,
    //                     'srp'=>$offline->srp,
    //                     'created_at'=>$offline->created_at,
    //                     'updated_at'=>$offline->updated_at
    //                  ]); 
    //              } 
    //      }
 
    //      // syncronize pharmacyhospital_products table from online to offline 
    //      $online = DB::connection('mysql2')->table('pharmacyhospital_products')->where('management_id', $data['management_id'])->get();  
    //      foreach($online as $online){  
    //          $online_count = DB::table('pharmacyhospital_products')->where('product_id', $online->product_id)->get();
    //              if(count($online_count) > 0){
    //                  DB::table('pharmacyhospital_products')->where('product_id', $online->product_id)->update([
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'management_id'=>$online->management_id,
    //                     'product'=>$online->product,
    //                     'description'=>$online->description,
    //                     'supplier'=>$online->supplier,
    //                     'unit_price'=>$online->unit_price,
    //                     'srp'=>$online->srp,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                  ]); 
    //              }else{
    //                  DB::table('pharmacyhospital_products')->insert([ 
    //                     'product_id'=> $online->product_id, 
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'management_id'=>$online->management_id,
    //                     'product'=>$online->product,
    //                     'description'=>$online->description,
    //                     'supplier'=>$online->supplier,
    //                     'unit_price'=>$online->unit_price,
    //                     'srp'=>$online->srp,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                  ]); 
    //              } 
    //      }   
 
    //      return true;
    // }
    // //wala ni
    // public static function syncPharmacyHospitalReceipt($data){
    //     // syncronize pharmacyhospital_receipt table from offline to online   
    //     $offline = DB::table('pharmacyhospital_receipt')->where('management_id', $data['management_id'])->get();  
    //     foreach($offline as $offline){  
    //         $offline_count = DB::connection('mysql2')->table('pharmacyhospital_receipt')->where('pcr_id', $offline->pcr_id)->get();
    //             if(count($offline_count) > 0){ 
    //                 if($offline->updated_at > $offline_count[0]->updated_at){  
    //                     DB::connection('mysql2')->table('pharmacyhospital_receipt')->where('pcr_id', $offline->pcr_id)->update([    
    //                        'receipt_id'=>$offline->receipt_id,
    //                        'pharmacy_id'=>$offline->pharmacy_id,
    //                        'management_id'=>$offline->management_id,
    //                        'username'=>$offline->username,
    //                        'name_customer'=>$offline->name_customer,
    //                        'address_customer'=>$offline->address_customer,
    //                        'tin_customer'=>$offline->tin_customer,
    //                        'product'=>$offline->product,
    //                        'description'=>$offline->description,
    //                        'unit'=>$offline->unit,
    //                        'quantity'=>$offline->quantity,
    //                        'srp'=>$offline->srp,
    //                        'total'=>$offline->total,
    //                        'amount_paid'=>$offline->amount_paid,
    //                        'payment_change'=>$offline->payment_change,
    //                        'dr_no'=>$offline->dr_no,
    //                        'updated_at'=>$offline->updated_at,
    //                        'created_at'=>$offline->created_at
    //                     ]);
    //                 } 
    //                 else{
    //                     DB::table('pharmacyhospital_receipt')->where('pcr_id', $offline_count[0]->pcr_id)->update([  
    //                         'receipt_id'=>$offline_count[0]->receipt_id,
    //                         'pharmacy_id'=>$offline_count[0]->pharmacy_id,
    //                         'management_id'=>$offline_count[0]->management_id,
    //                         'username'=>$offline_count[0]->username,
    //                         'name_customer'=>$offline_count[0]->name_customer,
    //                         'address_customer'=>$offline_count[0]->address_customer,
    //                         'tin_customer'=>$offline_count[0]->tin_customer,
    //                         'product'=>$offline_count[0]->product,
    //                         'description'=>$offline_count[0]->description,
    //                         'unit'=>$offline_count[0]->unit,
    //                         'quantity'=>$offline_count[0]->quantity,
    //                         'srp'=>$offline_count[0]->srp,
    //                         'total'=>$offline_count[0]->total,
    //                         'amount_paid'=>$offline_count[0]->amount_paid,
    //                         'payment_change'=>$offline_count[0]->payment_change,
    //                         'dr_no'=>$offline_count[0]->dr_no,
    //                         'updated_at'=>$offline_count[0]->updated_at,
    //                         'created_at'=>$offline_count[0]->created_at
    //                     ]);
    //                 }  
    //             }else{
    //                 DB::connection('mysql2')->table('pharmacyhospital_receipt')->insert([ 
    //                     'pcr_id'=> $offline->pcr_id, 
    //                     'receipt_id'=>$offline->receipt_id,
    //                     'pharmacy_id'=>$offline->pharmacy_id,
    //                     'management_id'=>$offline->management_id,
    //                     'username'=>$offline->username,
    //                     'name_customer'=>$offline->name_customer,
    //                     'address_customer'=>$offline->address_customer,
    //                     'tin_customer'=>$offline->tin_customer,
    //                     'product'=>$offline->product,
    //                     'description'=>$offline->description,
    //                     'unit'=>$offline->unit,
    //                     'quantity'=>$offline->quantity,
    //                     'srp'=>$offline->srp,
    //                     'total'=>$offline->total,
    //                     'amount_paid'=>$offline->amount_paid,
    //                     'payment_change'=>$offline->payment_change,
    //                     'dr_no'=>$offline->dr_no,
    //                     'updated_at'=>$offline->updated_at,
    //                     'created_at'=>$offline->created_at
    //                 ]); 
    //             } 
    //     }

    //     // syncronize pharmacyhospital_receipt table from online to offline 
    //     $online = DB::connection('mysql2')->table('pharmacyhospital_receipt')->where('management_id', $data['management_id'])->get();  
    //     foreach($online as $online){  
    //         $online_count = DB::table('pharmacyhospital_receipt')->where('pcr_id', $online->pcr_id)->get();
    //             if(count($online_count) > 0){
    //                 DB::table('pharmacyhospital_receipt')->where('pcr_id', $online->pcr_id)->update([
    //                     'receipt_id'=>$online->receipt_id,
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'management_id'=>$online->management_id,
    //                     'username'=>$online->username,
    //                     'name_customer'=>$online->name_customer,
    //                     'address_customer'=>$online->address_customer,
    //                     'tin_customer'=>$online->tin_customer,
    //                     'product'=>$online->product,
    //                     'description'=>$online->description,
    //                     'unit'=>$online->unit,
    //                     'quantity'=>$online->quantity,
    //                     'srp'=>$online->srp,
    //                     'total'=>$online->total,
    //                     'amount_paid'=>$online->amount_paid,
    //                     'payment_change'=>$online->payment_change,
    //                     'dr_no'=>$online->dr_no,
    //                     'updated_at'=>$online->updated_at,
    //                     'created_at'=>$online->created_at
    //                 ]); 
    //             }else{
    //                 DB::table('pharmacyhospital_receipt')->insert([ 
    //                     'pcr_id'=> $online->pcr_id, 
    //                     'receipt_id'=>$online->receipt_id,
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'management_id'=>$online->management_id,
    //                     'username'=>$online->username,
    //                     'name_customer'=>$online->name_customer,
    //                     'address_customer'=>$online->address_customer,
    //                     'tin_customer'=>$online->tin_customer,
    //                     'product'=>$online->product,
    //                     'description'=>$online->description,
    //                     'unit'=>$online->unit,
    //                     'quantity'=>$online->quantity,
    //                     'srp'=>$online->srp,
    //                     'total'=>$online->total,
    //                     'amount_paid'=>$online->amount_paid,
    //                     'payment_change'=>$online->payment_change,
    //                     'dr_no'=>$online->dr_no,
    //                     'updated_at'=>$online->updated_at,
    //                     'created_at'=>$online->created_at
    //                 ]); 
    //             } 
    //     }   

    //     return true;
    // }
    // //wala ni
    // public static function syncPharmacyHospitalSales($data){
    //     // syncronize pharmacyhospital_sales table from offline to online   
    //     $offline = DB::table('pharmacyhospital_sales')->where('management_id', $data['management_id'])->get();  
    //     foreach($offline as $offline){  
    //         $offline_count = DB::connection('mysql2')->table('pharmacyhospital_sales')->where('sales_id', $offline->sales_id)->get();
    //             if(count($offline_count) > 0){ 
    //                 if($offline->updated_at > $offline_count[0]->updated_at){  
    //                     DB::connection('mysql2')->table('pharmacyhospital_sales')->where('sales_id', $offline->sales_id)->update([    
    //                         'product_id'=>$offline->product_id,
    //                         'pharmacy_id'=>$offline->pharmacy_id,
    //                         'management_id'=>$offline->management_id,
    //                         'username'=>$offline->username,
    //                         'product'=>$offline->product,
    //                         'description'=>$offline->description,
    //                         'unit'=>$offline->unit,
    //                         'quantity'=>$offline->quantity,
    //                         'total'=>$offline->total,
    //                         'dr_no'=>$offline->dr_no,
    //                         'sales_from'=>$offline->sales_from,
    //                         'updated_at'=>$offline->updated_at,
    //                         'created_at'=>$offline->created_at
    //                     ]);
    //                 } 
    //                 else{
    //                     DB::table('pharmacyhospital_sales')->where('sales_id', $offline_count[0]->sales_id)->update([  
    //                         'product_id'=>$offline_count[0]->product_id,
    //                         'pharmacy_id'=>$offline_count[0]->pharmacy_id,
    //                         'management_id'=>$offline_count[0]->management_id,
    //                         'username'=>$offline_count[0]->username,
    //                         'product'=>$offline_count[0]->product,
    //                         'description'=>$offline_count[0]->description,
    //                         'unit'=>$offline_count[0]->unit,
    //                         'quantity'=>$offline_count[0]->quantity,
    //                         'total'=>$offline_count[0]->total,
    //                         'dr_no'=>$offline_count[0]->dr_no,
    //                         'sales_from'=>$offline_count[0]->sales_from,
    //                         'updated_at'=>$offline_count[0]->updated_at,
    //                         'created_at'=>$offline_count[0]->created_at
    //                     ]);
    //                 }  
    //             }else{
    //                 DB::connection('mysql2')->table('pharmacyhospital_sales')->insert([ 
    //                     'sales_id'=> $offline->sales_id, 
    //                     'product_id'=>$offline->product_id,
    //                     'pharmacy_id'=>$offline->pharmacy_id,
    //                     'management_id'=>$offline->management_id,
    //                     'username'=>$offline->username,
    //                     'product'=>$offline->product,
    //                     'description'=>$offline->description,
    //                     'unit'=>$offline->unit,
    //                     'quantity'=>$offline->quantity,
    //                     'total'=>$offline->total,
    //                     'dr_no'=>$offline->dr_no,
    //                     'sales_from'=>$offline->sales_from,
    //                     'updated_at'=>$offline->updated_at,
    //                     'created_at'=>$offline->created_at
    //                 ]); 
    //             } 
    //     }

    //     // syncronize pharmacyhospital_sales table from online to offline 
    //     $online = DB::connection('mysql2')->table('pharmacyhospital_sales')->where('management_id', $data['management_id'])->get();  
    //     foreach($online as $online){  
    //         $online_count = DB::table('pharmacyhospital_sales')->where('sales_id', $online->sales_id)->get();
    //             if(count($online_count) > 0){
    //                 DB::table('pharmacyhospital_sales')->where('sales_id', $online->sales_id)->update([
    //                     'product_id'=>$online->product_id,
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'management_id'=>$online->management_id,
    //                     'username'=>$online->username,
    //                     'product'=>$online->product,
    //                     'description'=>$online->description,
    //                     'unit'=>$online->unit,
    //                     'quantity'=>$online->quantity,
    //                     'total'=>$online->total,
    //                     'dr_no'=>$online->dr_no,
    //                     'sales_from'=>$online->sales_from,
    //                     'updated_at'=>$online->updated_at,
    //                     'created_at'=>$online->created_at
    //                 ]); 
    //             }else{
    //                 DB::table('pharmacyhospital_sales')->insert([ 
    //                     'sales_id'=> $online->sales_id, 
    //                     'product_id'=>$online->product_id,
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'management_id'=>$online->management_id,
    //                     'username'=>$online->username,
    //                     'product'=>$online->product,
    //                     'description'=>$online->description,
    //                     'unit'=>$online->unit,
    //                     'quantity'=>$online->quantity,
    //                     'total'=>$online->total,
    //                     'dr_no'=>$online->dr_no,
    //                     'sales_from'=>$online->sales_from,
    //                     'updated_at'=>$online->updated_at,
    //                     'created_at'=>$online->created_at
    //                 ]); 
    //             } 
    //     }   

    //     return true;
    // }
    // //wala ni
    // public static function syncPharmacyBranches($data){
    //     // syncronize pharmacy_branches table from offline to online
    //     $offline = DB::table('pharmacy_branches')->where('management_id', $data['management_id'])->get();  
    //     foreach($offline as $offline){  
    //         $offline_count = DB::connection('mysql2')->table('pharmacy_branches')->where('pb_id', $offline->pb_id)->get();
    //             if(count($offline_count) > 0){ 
    //                 if($offline->updated_at > $offline_count[0]->updated_at){  
    //                     DB::connection('mysql2')->table('pharmacy_branches')->where('pb_id', $offline->pb_id)->update([    
    //                         'pharmacy_id'=>$offline->pharmacy_id,
    //                         'management_id'=>$offline->management_id,
    //                         'branch_id'=>$offline->branch_id,
    //                         'user_id'=>$offline->user_id,
    //                         'branch_name'=>$offline->branch_name,
    //                         'branch_address'=>$offline->branch_address,
    //                         'braches_tin'=>$offline->braches_tin,
    //                         'status'=>$offline->status,
    //                         'role'=>$offline->role,
    //                         'created_at'=>$offline->created_at,
    //                         'updated_at'=>$offline->updated_at
    //                     ]);
    //                 } 
    //                 else{
    //                     DB::table('pharmacy_branches')->where('pb_id', $offline_count[0]->pb_id)->update([  
    //                         'pharmacy_id'=>$offline_count[0]->pharmacy_id,
    //                         'management_id'=>$offline_count[0]->management_id,
    //                         'branch_id'=>$offline_count[0]->branch_id,
    //                         'user_id'=>$offline_count[0]->user_id,
    //                         'branch_name'=>$offline_count[0]->branch_name,
    //                         'branch_address'=>$offline_count[0]->branch_address,
    //                         'braches_tin'=>$offline_count[0]->braches_tin,
    //                         'status'=>$offline_count[0]->status,
    //                         'role'=>$offline_count[0]->role,
    //                         'created_at'=>$offline_count[0]->created_at,
    //                         'updated_at'=>$offline_count[0]->updated_at
    //                     ]);
    //                 }  
    //             }else{
    //                 DB::connection('mysql2')->table('pharmacy_branches')->insert([
    //                     'pb_id'=> $offline->pb_id,
    //                     'pharmacy_id'=>$offline->pharmacy_id,
    //                     'management_id'=>$offline->management_id,
    //                     'branch_id'=>$offline->branch_id,
    //                     'user_id'=>$offline->user_id,
    //                     'branch_name'=>$offline->branch_name,
    //                     'branch_address'=>$offline->branch_address,
    //                     'braches_tin'=>$offline->braches_tin,
    //                     'status'=>$offline->status,
    //                     'role'=>$offline->role,
    //                     'created_at'=>$offline->created_at,
    //                     'updated_at'=>$offline->updated_at
    //                 ]); 
    //             } 
    //     }

    //     // syncronize pharmacy_branches table from online to offline 
    //     $online = DB::connection('mysql2')->table('pharmacy_branches')->where('management_id', $data['management_id'])->get();
    //     foreach($online as $online){  
    //         $online_count = DB::table('pharmacy_branches')->where('pb_id', $online->pb_id)->get();
    //             if(count($online_count) > 0){
    //                 DB::table('pharmacy_branches')->where('pb_id', $online->pb_id)->update([
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'management_id'=>$online->management_id,
    //                     'branch_id'=>$online->branch_id,
    //                     'user_id'=>$online->user_id,
    //                     'branch_name'=>$online->branch_name,
    //                     'branch_address'=>$online->branch_address,
    //                     'braches_tin'=>$online->braches_tin,
    //                     'status'=>$online->status,
    //                     'role'=>$online->role,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                 ]); 
    //             }else{
    //                 DB::table('pharmacy_branches')->insert([ 
    //                     'pb_id'=> $online->pb_id,
    //                     'pharmacy_id'=>$online->pharmacy_id,
    //                     'management_id'=>$online->management_id,
    //                     'branch_id'=>$online->branch_id,
    //                     'user_id'=>$online->user_id,
    //                     'branch_name'=>$online->branch_name,
    //                     'branch_address'=>$online->branch_address,
    //                     'braches_tin'=>$online->braches_tin,
    //                     'status'=>$online->status,
    //                     'role'=>$online->role,
    //                     'created_at'=>$online->created_at,
    //                     'updated_at'=>$online->updated_at
    //                 ]); 
    //             } 
    //     }   
    //     return true;
    // }

    public static function syncPsychologyAccount($data){
        // syncronize psychology_account table from offline to online
        $offline = DB::table('psychology_account')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('psychology_account')->where('psy_id', $offline->psy_id)->get();
            if(count($offline_count) > 0){ 
                if($offline->updated_at > $offline_count[0]->updated_at){  
                    DB::connection('mysql2')->table('psychology_account')->where('psy_id', $offline->psy_id)->update([    
                        'psycho_id'=>$offline->psycho_id,
                        'management_id'=>$offline->management_id,
                        'user_id'=>$offline->user_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'address'=>$offline->address,
                        'gender'=>$offline->gender,
                        'email'=>$offline->email,
                        'image'=>$offline->image,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at,
                    ]);
                } 
                else{
                    DB::table('psychology_account')->where('psy_id', $offline_count[0]->psy_id)->update([  
                        'psycho_id'=>$offline_count[0]->psycho_id,
                        'management_id'=>$offline_count[0]->management_id,
                        'user_id'=>$offline_count[0]->user_id,
                        'user_fullname'=>$offline_count[0]->user_fullname,
                        'user_address'=>$offline_count[0]->user_address,
                        'name'=>$offline_count[0]->name,
                        'address'=>$offline_count[0]->address,
                        'gender'=>$offline_count[0]->gender,
                        'email'=>$offline_count[0]->email,
                        'image'=>$offline_count[0]->image,
                        'status'=>$offline_count[0]->status,
                        'updated_at'=>$offline_count[0]->updated_at,
                        'created_at'=>$offline_count[0]->created_at
                    ]);
                }  
            }else{
                DB::connection('mysql2')->table('psychology_account')->insert([
                    'psy_id'=> $offline->psy_id,
                    'psycho_id'=>$offline->psycho_id,
                    'management_id'=>$offline->management_id,
                    'user_id'=>$offline->user_id,
                    'user_fullname'=>$offline->user_fullname,
                    'user_address'=>$offline->user_address,
                    'name'=>$offline->name,
                    'address'=>$offline->address,
                    'gender'=>$offline->gender,
                    'email'=>$offline->email,
                    'image'=>$offline->image,
                    'status'=>$offline->status,
                    'updated_at'=>$offline->updated_at,
                    'created_at'=>$offline->created_at
                ]); 
            } 
        }

        // syncronize psychology_account table from online to offline 
        $online = DB::connection('mysql2')->table('psychology_account')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('psychology_account')->where('psy_id', $online->psy_id)->get();
            if(count($online_count) > 0){
                DB::table('psychology_account')->where('psy_id', $online->psy_id)->update([
                    'psycho_id'=>$online->psycho_id,
                    'management_id'=>$online->management_id,
                    'user_id'=>$online->user_id,
                    'user_fullname'=>$online->user_fullname,
                    'user_address'=>$online->user_address,
                    'name'=>$online->name,
                    'address'=>$online->address,
                    'gender'=>$online->gender,
                    'email'=>$online->email,
                    'image'=>$online->image,
                    'status'=>$online->status,
                    'updated_at'=>$online->updated_at,
                    'created_at'=>$online->created_at
                ]); 
            }else{
                DB::table('psychology_account')->insert([ 
                    'psy_id'=> $online->psy_id,
                    'psycho_id'=>$online->psycho_id,
                    'management_id'=>$online->management_id,
                    'user_id'=>$online->user_id,
                    'user_fullname'=>$online->user_fullname,
                    'user_address'=>$online->user_address,
                    'name'=>$online->name,
                    'address'=>$online->address,
                    'gender'=>$online->gender,
                    'email'=>$online->email,
                    'image'=>$online->image,
                    'status'=>$online->status,
                    'updated_at'=>$online->updated_at,
                    'created_at'=>$online->created_at
                ]); 
            } 
        }   

        return true;
    }

    public static function syncPsychologyAudiometry($data){
        // syncronize psychology_audiometry table from offline to online
        $offline = DB::table('psychology_audiometry')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('psychology_audiometry')->where('pa_id', $offline->pa_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('psychology_audiometry')->where('pa_id', $offline->pa_id)->update([    
                            'order_id'=>$offline->order_id,
                            'doctor_id'=>$offline->doctor_id,
                            'patient_id'=>$offline->patient_id,
                            'psychology_id'=>$offline->psychology_id,
                            'is_viewed'=>$offline->is_viewed,
                            'is_processed'=>$offline->is_processed,
                            'is_processed_by'=>$offline->is_processed_by,
                            'is_processed_time_start'=>$offline->is_processed_time_start,
                            'is_processed_time_end'=>$offline->is_processed_time_end,
                            'is_pending'=>$offline->is_pending,
                            'is_pending_reason'=>$offline->is_pending_reason,
                            'is_pending_date'=>$offline->is_pending_date,
                            'is_pending_by'=>$offline->is_pending_by,
                            'audiometry_test'=>$offline->audiometry_test,
                            'left_8000'=>$offline->left_8000,
                            'right_8000'=>$offline->right_8000,
                            'left_4000'=>$offline->left_4000,
                            'right_4000'=>$offline->right_4000,
                            'left_2000'=>$offline->left_2000,
                            'right_2000'=>$offline->right_2000,
                            'left_1000'=>$offline->left_1000,
                            'right_1000'=>$offline->right_1000,
                            'left_500'=>$offline->left_500,
                            'right_500'=>$offline->right_500,
                            'left_250'=>$offline->left_250,
                            'right_250'=>$offline->right_250,
                            'right_ear_interpret'=>$offline->right_ear_interpret,
                            'left_ear_interpret'=>$offline->left_ear_interpret,
                            'remarks'=>$offline->remarks,
                            'order_status'=>$offline->order_status,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('psychology_audiometry')->where('pa_id', $offline_count[0]->pa_id)->update([  
                            'order_id'=>$offline_count[0]->order_id,
                            'doctor_id'=>$offline_count[0]->doctor_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'psychology_id'=>$offline_count[0]->psychology_id,
                            'is_viewed'=>$offline_count[0]->is_viewed,
                            'is_processed'=>$offline_count[0]->is_processed,
                            'is_processed_by'=>$offline_count[0]->is_processed_by,
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start,
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end,
                            'is_pending'=>$offline_count[0]->is_pending,
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason,
                            'is_pending_date'=>$offline_count[0]->is_pending_date,
                            'is_pending_by'=>$offline_count[0]->is_pending_by,
                            'audiometry_test'=>$offline_count[0]->audiometry_test,
                            'left_8000'=>$offline_count[0]->left_8000,
                            'right_8000'=>$offline_count[0]->right_8000,
                            'left_4000'=>$offline_count[0]->left_4000,
                            'right_4000'=>$offline_count[0]->right_4000,
                            'left_2000'=>$offline_count[0]->left_2000,
                            'right_2000'=>$offline_count[0]->right_2000,
                            'left_1000'=>$offline_count[0]->left_1000,
                            'right_1000'=>$offline_count[0]->right_1000,
                            'left_500'=>$offline_count[0]->left_500,
                            'right_500'=>$offline_count[0]->right_500,
                            'left_250'=>$offline_count[0]->left_250,
                            'right_250'=>$offline_count[0]->right_250,
                            'right_ear_interpret'=>$offline_count[0]->right_ear_interpret,
                            'left_ear_interpret'=>$offline_count[0]->left_ear_interpret,
                            'remarks'=>$offline_count[0]->remarks,
                            'order_status'=>$offline_count[0]->order_status,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('psychology_audiometry')->insert([
                        'pa_id'=> $offline->pa_id,
                        'order_id'=>$offline->order_id,
                        'doctor_id'=>$offline->doctor_id,
                        'patient_id'=>$offline->patient_id,
                        'psychology_id'=>$offline->psychology_id,
                        'is_viewed'=>$offline->is_viewed,
                        'is_processed'=>$offline->is_processed,
                        'is_processed_by'=>$offline->is_processed_by,
                        'is_processed_time_start'=>$offline->is_processed_time_start,
                        'is_processed_time_end'=>$offline->is_processed_time_end,
                        'is_pending'=>$offline->is_pending,
                        'is_pending_reason'=>$offline->is_pending_reason,
                        'is_pending_date'=>$offline->is_pending_date,
                        'is_pending_by'=>$offline->is_pending_by,
                        'audiometry_test'=>$offline->audiometry_test,
                        'left_8000'=>$offline->left_8000,
                        'right_8000'=>$offline->right_8000,
                        'left_4000'=>$offline->left_4000,
                        'right_4000'=>$offline->right_4000,
                        'left_2000'=>$offline->left_2000,
                        'right_2000'=>$offline->right_2000,
                        'left_1000'=>$offline->left_1000,
                        'right_1000'=>$offline->right_1000,
                        'left_500'=>$offline->left_500,
                        'right_500'=>$offline->right_500,
                        'left_250'=>$offline->left_250,
                        'right_250'=>$offline->right_250,
                        'right_ear_interpret'=>$offline->right_ear_interpret,
                        'left_ear_interpret'=>$offline->left_ear_interpret,
                        'remarks'=>$offline->remarks,
                        'order_status'=>$offline->order_status,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize psychology_audiometry table from online to offline 
        $online = DB::connection('mysql2')->table('psychology_audiometry')->get();
        foreach($online as $online){  
            $online_count = DB::table('psychology_audiometry')->where('pa_id', $online->pa_id)->get();
                if(count($online_count) > 0){
                    DB::table('psychology_audiometry')->where('pa_id', $online->pa_id)->update([
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'psychology_id'=>$online->psychology_id,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'audiometry_test'=>$online->audiometry_test,
                        'left_8000'=>$online->left_8000,
                        'right_8000'=>$online->right_8000,
                        'left_4000'=>$online->left_4000,
                        'right_4000'=>$online->right_4000,
                        'left_2000'=>$online->left_2000,
                        'right_2000'=>$online->right_2000,
                        'left_1000'=>$online->left_1000,
                        'right_1000'=>$online->right_1000,
                        'left_500'=>$online->left_500,
                        'right_500'=>$online->right_500,
                        'left_250'=>$online->left_250,
                        'right_250'=>$online->right_250,
                        'right_ear_interpret'=>$online->right_ear_interpret,
                        'left_ear_interpret'=>$online->left_ear_interpret,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('psychology_audiometry')->insert([ 
                        'pa_id'=> $online->pa_id,
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'psychology_id'=>$online->psychology_id,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'audiometry_test'=>$online->audiometry_test,
                        'left_8000'=>$online->left_8000,
                        'right_8000'=>$online->right_8000,
                        'left_4000'=>$online->left_4000,
                        'right_4000'=>$online->right_4000,
                        'left_2000'=>$online->left_2000,
                        'right_2000'=>$online->right_2000,
                        'left_1000'=>$online->left_1000,
                        'right_1000'=>$online->right_1000,
                        'left_500'=>$online->left_500,
                        'right_500'=>$online->right_500,
                        'left_250'=>$online->left_250,
                        'right_250'=>$online->right_250,
                        'right_ear_interpret'=>$online->right_ear_interpret,
                        'left_ear_interpret'=>$online->left_ear_interpret,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPsychologyIshihara($data){
        // syncronize psychology_ishihara table from offline to online
        $offline = DB::table('psychology_ishihara')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('psychology_ishihara')->where('pi_id', $offline->pi_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('psychology_ishihara')->where('pi_id', $offline->pi_id)->update([    
                            'order_id'=>$offline->order_id,
                            'doctor_id'=>$offline->doctor_id,
                            'patient_id'=>$offline->patient_id,
                            'psychology_id'=>$offline->psychology_id,
                            'is_viewed'=>$offline->is_viewed,
                            'is_processed'=>$offline->is_processed,
                            'is_processed_by'=>$offline->is_processed_by,
                            'is_processed_time_start'=>$offline->is_processed_time_start,
                            'is_processed_time_end'=>$offline->is_processed_time_end,
                            'is_pending'=>$offline->is_pending,
                            'is_pending_reason'=>$offline->is_pending_reason,
                            'is_pending_date'=>$offline->is_pending_date,
                            'is_pending_by'=>$offline->is_pending_by,
                            'ishihara_test'=>$offline->ishihara_test,
                            'type_person_1_2_3'=>$offline->type_person_1_2_3,
                            'one'=>$offline->one,
                            'two'=>$offline->two,
                            'three'=>$offline->three,
                            'four'=>$offline->four,
                            'five'=>$offline->five,
                            'six'=>$offline->six,
                            'seven'=>$offline->seven,
                            'eight'=>$offline->eight,
                            'nine'=>$offline->nine,
                            'ten'=>$offline->ten,
                            'eleven'=>$offline->eleven,
                            'twelve'=>$offline->twelve,
                            'thirteen'=>$offline->thirteen,
                            'fourteen'=>$offline->fourteen,
                            'fifteen'=>$offline->fifteen,
                            'sixteen'=>$offline->sixteen,
                            'seventeen'=>$offline->seventeen,
                            'eighteen'=>$offline->eighteen,
                            'nineteen'=>$offline->nineteen,
                            'twenty'=>$offline->twenty,
                            'twentyone'=>$offline->twentyone,
                            'blindness_type'=>$offline->blindness_type,
                            'twentytwo'=>$offline->twentytwo,
                            'twentythree'=>$offline->twentythree,
                            'twentyfour'=>$offline->twentyfour,
                            'twentyfive'=>$offline->twentyfive,
                            'test_score'=>$offline->test_score,
                            'remarks'=>$offline->remarks,
                            'order_status'=>$offline->order_status,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('psychology_ishihara')->where('pi_id', $offline_count[0]->pi_id)->update([  
                            'order_id'=>$offline_count[0]->order_id,
                            'doctor_id'=>$offline_count[0]->doctor_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'psychology_id'=>$offline_count[0]->psychology_id,
                            'is_viewed'=>$offline_count[0]->is_viewed,
                            'is_processed'=>$offline_count[0]->is_processed,
                            'is_processed_by'=>$offline_count[0]->is_processed_by,
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start,
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end,
                            'is_pending'=>$offline_count[0]->is_pending,
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason,
                            'is_pending_date'=>$offline_count[0]->is_pending_date,
                            'is_pending_by'=>$offline_count[0]->is_pending_by,
                            'ishihara_test'=>$offline_count[0]->ishihara_test,
                            'type_person_1_2_3'=>$offline_count[0]->type_person_1_2_3,
                            'one'=>$offline_count[0]->one,
                            'two'=>$offline_count[0]->two,
                            'three'=>$offline_count[0]->three,
                            'four'=>$offline_count[0]->four,
                            'five'=>$offline_count[0]->five,
                            'six'=>$offline_count[0]->six,
                            'seven'=>$offline_count[0]->seven,
                            'eight'=>$offline_count[0]->eight,
                            'nine'=>$offline_count[0]->nine,
                            'ten'=>$offline_count[0]->ten,
                            'eleven'=>$offline_count[0]->eleven,
                            'twelve'=>$offline_count[0]->twelve,
                            'thirteen'=>$offline_count[0]->thirteen,
                            'fourteen'=>$offline_count[0]->fourteen,
                            'fifteen'=>$offline_count[0]->fifteen,
                            'sixteen'=>$offline_count[0]->sixteen,
                            'seventeen'=>$offline_count[0]->seventeen,
                            'eighteen'=>$offline_count[0]->eighteen,
                            'nineteen'=>$offline_count[0]->nineteen,
                            'twenty'=>$offline_count[0]->twenty,
                            'twentyone'=>$offline_count[0]->twentyone,
                            'blindness_type'=>$offline_count[0]->blindness_type,
                            'twentytwo'=>$offline_count[0]->twentytwo,
                            'twentythree'=>$offline_count[0]->twentythree,
                            'twentyfour'=>$offline_count[0]->twentyfour,
                            'twentyfive'=>$offline_count[0]->twentyfive,
                            'test_score'=>$offline_count[0]->test_score,
                            'remarks'=>$offline_count[0]->remarks,
                            'order_status'=>$offline_count[0]->order_status,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('psychology_ishihara')->insert([
                        'pi_id'=> $offline->pi_id,
                        'order_id'=>$offline->order_id,
                        'doctor_id'=>$offline->doctor_id,
                        'patient_id'=>$offline->patient_id,
                        'psychology_id'=>$offline->psychology_id,
                        'is_viewed'=>$offline->is_viewed,
                        'is_processed'=>$offline->is_processed,
                        'is_processed_by'=>$offline->is_processed_by,
                        'is_processed_time_start'=>$offline->is_processed_time_start,
                        'is_processed_time_end'=>$offline->is_processed_time_end,
                        'is_pending'=>$offline->is_pending,
                        'is_pending_reason'=>$offline->is_pending_reason,
                        'is_pending_date'=>$offline->is_pending_date,
                        'is_pending_by'=>$offline->is_pending_by,
                        'ishihara_test'=>$offline->ishihara_test,
                        'type_person_1_2_3'=>$offline->type_person_1_2_3,
                        'one'=>$offline->one,
                        'two'=>$offline->two,
                        'three'=>$offline->three,
                        'four'=>$offline->four,
                        'five'=>$offline->five,
                        'six'=>$offline->six,
                        'seven'=>$offline->seven,
                        'eight'=>$offline->eight,
                        'nine'=>$offline->nine,
                        'ten'=>$offline->ten,
                        'eleven'=>$offline->eleven,
                        'twelve'=>$offline->twelve,
                        'thirteen'=>$offline->thirteen,
                        'fourteen'=>$offline->fourteen,
                        'fifteen'=>$offline->fifteen,
                        'sixteen'=>$offline->sixteen,
                        'seventeen'=>$offline->seventeen,
                        'eighteen'=>$offline->eighteen,
                        'nineteen'=>$offline->nineteen,
                        'twenty'=>$offline->twenty,
                        'twentyone'=>$offline->twentyone,
                        'blindness_type'=>$offline->blindness_type,
                        'twentytwo'=>$offline->twentytwo,
                        'twentythree'=>$offline->twentythree,
                        'twentyfour'=>$offline->twentyfour,
                        'twentyfive'=>$offline->twentyfive,
                        'test_score'=>$offline->test_score,
                        'remarks'=>$offline->remarks,
                        'order_status'=>$offline->order_status,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize psychology_ishihara table from online to offline 
        $online = DB::connection('mysql2')->table('psychology_ishihara')->get();
        foreach($online as $online){  
            $online_count = DB::table('psychology_ishihara')->where('pi_id', $online->pi_id)->get();
                if(count($online_count) > 0){
                    DB::table('psychology_ishihara')->where('pi_id', $online->pi_id)->update([
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'psychology_id'=>$online->psychology_id,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'ishihara_test'=>$online->ishihara_test,
                        'type_person_1_2_3'=>$online->type_person_1_2_3,
                        'one'=>$online->one,
                        'two'=>$online->two,
                        'three'=>$online->three,
                        'four'=>$online->four,
                        'five'=>$online->five,
                        'six'=>$online->six,
                        'seven'=>$online->seven,
                        'eight'=>$online->eight,
                        'nine'=>$online->nine,
                        'ten'=>$online->ten,
                        'eleven'=>$online->eleven,
                        'twelve'=>$online->twelve,
                        'thirteen'=>$online->thirteen,
                        'fourteen'=>$online->fourteen,
                        'fifteen'=>$online->fifteen,
                        'sixteen'=>$online->sixteen,
                        'seventeen'=>$online->seventeen,
                        'eighteen'=>$online->eighteen,
                        'nineteen'=>$online->nineteen,
                        'twenty'=>$online->twenty,
                        'twentyone'=>$online->twentyone,
                        'blindness_type'=>$online->blindness_type,
                        'twentytwo'=>$online->twentytwo,
                        'twentythree'=>$online->twentythree,
                        'twentyfour'=>$online->twentyfour,
                        'twentyfive'=>$online->twentyfive,
                        'test_score'=>$online->test_score,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('psychology_ishihara')->insert([ 
                        'pi_id'=> $online->pi_id,
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'psychology_id'=>$online->psychology_id,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'ishihara_test'=>$online->ishihara_test,
                        'type_person_1_2_3'=>$online->type_person_1_2_3,
                        'one'=>$online->one,
                        'two'=>$online->two,
                        'three'=>$online->three,
                        'four'=>$online->four,
                        'five'=>$online->five,
                        'six'=>$online->six,
                        'seven'=>$online->seven,
                        'eight'=>$online->eight,
                        'nine'=>$online->nine,
                        'ten'=>$online->ten,
                        'eleven'=>$online->eleven,
                        'twelve'=>$online->twelve,
                        'thirteen'=>$online->thirteen,
                        'fourteen'=>$online->fourteen,
                        'fifteen'=>$online->fifteen,
                        'sixteen'=>$online->sixteen,
                        'seventeen'=>$online->seventeen,
                        'eighteen'=>$online->eighteen,
                        'nineteen'=>$online->nineteen,
                        'twenty'=>$online->twenty,
                        'twentyone'=>$online->twentyone,
                        'blindness_type'=>$online->blindness_type,
                        'twentytwo'=>$online->twentytwo,
                        'twentythree'=>$online->twentythree,
                        'twentyfour'=>$online->twentyfour,
                        'twentyfive'=>$online->twentyfive,
                        'test_score'=>$online->test_score,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPsychologyNeuroexam($data){
        // syncronize psychology_neuroexam table from offline to online
        $offline = DB::table('psychology_neuroexam')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('psychology_neuroexam')->where('pn_id', $offline->pn_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('psychology_neuroexam')->where('pn_id', $offline->pn_id)->update([    
                            'order_id'=>$offline->order_id,
                            'doctor_id'=>$offline->doctor_id,
                            'patient_id'=>$offline->patient_id,
                            'psychology_id'=>$offline->psychology_id,
                            'is_viewed'=>$offline->is_viewed,
                            'is_processed'=>$offline->is_processed,
                            'is_processed_by'=>$offline->is_processed_by,
                            'is_processed_time_start'=>$offline->is_processed_time_start,
                            'is_processed_time_end'=>$offline->is_processed_time_end,
                            'is_pending'=>$offline->is_pending,
                            'is_pending_reason'=>$offline->is_pending_reason,
                            'is_pending_date'=>$offline->is_pending_date,
                            'is_pending_by'=>$offline->is_pending_by,
                            'neuroexam_test'=>$offline->neuroexam_test,
                            'remarks'=>$offline->remarks,
                            'order_status'=>$offline->order_status,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('psychology_neuroexam')->where('pn_id', $offline_count[0]->pn_id)->update([  
                            'order_id'=>$offline_count[0]->order_id,
                            'doctor_id'=>$offline_count[0]->doctor_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'psychology_id'=>$offline_count[0]->psychology_id,
                            'is_viewed'=>$offline_count[0]->is_viewed,
                            'is_processed'=>$offline_count[0]->is_processed,
                            'is_processed_by'=>$offline_count[0]->is_processed_by,
                            'is_processed_time_start'=>$offline_count[0]->is_processed_time_start,
                            'is_processed_time_end'=>$offline_count[0]->is_processed_time_end,
                            'is_pending'=>$offline_count[0]->is_pending,
                            'is_pending_reason'=>$offline_count[0]->is_pending_reason,
                            'is_pending_date'=>$offline_count[0]->is_pending_date,
                            'is_pending_by'=>$offline_count[0]->is_pending_by,
                            'neuroexam_test'=>$offline_count[0]->neuroexam_test,
                            'remarks'=>$offline_count[0]->remarks,
                            'order_status'=>$offline_count[0]->order_status,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('psychology_neuroexam')->insert([
                        'pn_id'=> $offline->pn_id,
                        'order_id'=>$offline->order_id,
                        'doctor_id'=>$offline->doctor_id,
                        'patient_id'=>$offline->patient_id,
                        'psychology_id'=>$offline->psychology_id,
                        'is_viewed'=>$offline->is_viewed,
                        'is_processed'=>$offline->is_processed,
                        'is_processed_by'=>$offline->is_processed_by,
                        'is_processed_time_start'=>$offline->is_processed_time_start,
                        'is_processed_time_end'=>$offline->is_processed_time_end,
                        'is_pending'=>$offline->is_pending,
                        'is_pending_reason'=>$offline->is_pending_reason,
                        'is_pending_date'=>$offline->is_pending_date,
                        'is_pending_by'=>$offline->is_pending_by,
                        'neuroexam_test'=>$offline->neuroexam_test,
                        'remarks'=>$offline->remarks,
                        'order_status'=>$offline->order_status,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize psychology_neuroexam table from online to offline 
        $online = DB::connection('mysql2')->table('psychology_neuroexam')->get();
        foreach($online as $online){  
            $online_count = DB::table('psychology_neuroexam')->where('pn_id', $online->pn_id)->get();
                if(count($online_count) > 0){
                    DB::table('psychology_neuroexam')->where('pn_id', $online->pn_id)->update([
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'psychology_id'=>$online->psychology_id,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'neuroexam_test'=>$online->neuroexam_test,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('psychology_neuroexam')->insert([ 
                        'pn_id'=> $online->pn_id,
                        'order_id'=>$online->order_id,
                        'doctor_id'=>$online->doctor_id,
                        'patient_id'=>$online->patient_id,
                        'psychology_id'=>$online->psychology_id,
                        'is_viewed'=>$online->is_viewed,
                        'is_processed'=>$online->is_processed,
                        'is_processed_by'=>$online->is_processed_by,
                        'is_processed_time_start'=>$online->is_processed_time_start,
                        'is_processed_time_end'=>$online->is_processed_time_end,
                        'is_pending'=>$online->is_pending,
                        'is_pending_reason'=>$online->is_pending_reason,
                        'is_pending_date'=>$online->is_pending_date,
                        'is_pending_by'=>$online->is_pending_by,
                        'neuroexam_test'=>$online->neuroexam_test,
                        'remarks'=>$online->remarks,
                        'order_status'=>$online->order_status,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPsychologyTest($data){
        // syncronize psychology_test table from offline to online
        $offline = DB::table('psychology_test')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('psychology_test')->where('ptl_id', $offline->ptl_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('psychology_test')->where('ptl_id', $offline->ptl_id)->update([    
                            'psycho_id'=>$offline->psycho_id,
                            'management_id'=>$offline->management_id,
                            'test_id'=>$offline->test_id,
                            'department'=>$offline->department,
                            'test'=>$offline->test,
                            'rate'=>$offline->rate,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('psychology_test')->where('ptl_id', $offline_count[0]->ptl_id)->update([  
                            'psycho_id'=>$offline_count[0]->psycho_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'test_id'=>$offline_count[0]->test_id,
                            'department'=>$offline_count[0]->department,
                            'test'=>$offline_count[0]->test,
                            'rate'=>$offline_count[0]->rate,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('psychology_test')->insert([
                        'ptl_id'=> $offline->ptl_id,
                        'psycho_id'=>$offline->psycho_id,
                        'management_id'=>$offline->management_id,
                        'test_id'=>$offline->test_id,
                        'department'=>$offline->department,
                        'test'=>$offline->test,
                        'rate'=>$offline->rate,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize psychology_test table from online to offline 
        $online = DB::connection('mysql2')->table('psychology_test')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('psychology_test')->where('ptl_id', $online->ptl_id)->get();
                if(count($online_count) > 0){
                    DB::table('psychology_test')->where('ptl_id', $online->ptl_id)->update([
                        'psycho_id'=>$online->psycho_id,
                        'management_id'=>$online->management_id,
                        'test_id'=>$online->test_id,
                        'department'=>$online->department,
                        'test'=>$online->test,
                        'rate'=>$online->rate,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('psychology_test')->insert([ 
                        'ptl_id'=> $online->ptl_id,
                        'psycho_id'=>$online->psycho_id,
                        'management_id'=>$online->management_id,
                        'test_id'=>$online->test_id,
                        'department'=>$online->department,
                        'test'=>$online->test,
                        'rate'=>$online->rate,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncPsychologyTestOrders($data){
        // syncronize psychology_test_orders table from offline to online
        $offline = DB::table('psychology_test_orders')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('psychology_test_orders')->where('pto_orders', $offline->pto_orders)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('psychology_test_orders')->where('pto_orders', $offline->pto_orders)->update([    
                            'management_id'=>$offline->management_id,
                            'patient_id'=>$offline->patient_id,
                            'order_id'=>$offline->order_id,
                            'order_name'=>$offline->order_name,
                            'order_rate'=>$offline->order_rate,
                            'order_result'=>$offline->order_result,
                            'is_paid'=>$offline->is_paid,
                            'is_processed'=>$offline->is_processed,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('psychology_test_orders')->where('pto_orders', $offline_count[0]->pto_orders)->update([  
                            'management_id'=>$offline_count[0]->management_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'order_id'=>$offline_count[0]->order_id,
                            'order_name'=>$offline_count[0]->order_name,
                            'order_rate'=>$offline_count[0]->order_rate,
                            'order_result'=>$offline_count[0]->order_result,
                            'is_paid'=>$offline_count[0]->is_paid,
                            'is_processed'=>$offline_count[0]->is_processed,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('psychology_test_orders')->insert([
                        'pto_orders'=> $offline->pto_orders,
                        'management_id'=>$offline->management_id,
                        'patient_id'=>$offline->patient_id,
                        'order_id'=>$offline->order_id,
                        'order_name'=>$offline->order_name,
                        'order_rate'=>$offline->order_rate,
                        'order_result'=>$offline->order_result,
                        'is_paid'=>$offline->is_paid,
                        'is_processed'=>$offline->is_processed,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize psychology_test_orders table from online to offline 
        $online = DB::connection('mysql2')->table('psychology_test_orders')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('psychology_test_orders')->where('pto_orders', $online->pto_orders)->get();
                if(count($online_count) > 0){
                    DB::table('psychology_test_orders')->where('pto_orders', $online->pto_orders)->update([
                        'management_id'=>$online->management_id,
                        'patient_id'=>$online->patient_id,
                        'order_id'=>$online->order_id,
                        'order_name'=>$online->order_name,
                        'order_rate'=>$online->order_rate,
                        'order_result'=>$online->order_result,
                        'is_paid'=>$online->is_paid,
                        'is_processed'=>$online->is_processed,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('psychology_test_orders')->insert([ 
                        'pto_orders'=> $online->pto_orders,
                        'management_id'=>$online->management_id,
                        'patient_id'=>$online->patient_id,
                        'order_id'=>$online->order_id,
                        'order_name'=>$online->order_name,
                        'order_rate'=>$online->order_rate,
                        'order_result'=>$online->order_result,
                        'is_paid'=>$online->is_paid,
                        'is_processed'=>$online->is_processed,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncRadiologist($data){
        // syncronize radiologist table from offline to online
        $offline = DB::table('radiologist')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('radiologist')->where('r_id', $offline->r_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('radiologist')->where('r_id', $offline->r_id)->update([    
                            'radiologist_id'=>$offline->radiologist_id,
                            'user_id'=>$offline->user_id,
                            'management_id'=>$offline->management_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'gender'=>$offline->gender,
                            'birthday'=>$offline->birthday,
                            'address'=>$offline->address,
                            'image'=>$offline->image,
                            'image_signature'=>$offline->image_signature,
                            'role'=>$offline->role,
                            'email'=>$offline->email,
                            'added_by'=>$offline->added_by,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('radiologist')->where('r_id', $offline_count[0]->r_id)->update([  
                            'radiologist_id'=>$offline_count[0]->radiologist_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'gender'=>$offline_count[0]->gender,
                            'birthday'=>$offline_count[0]->birthday,
                            'address'=>$offline_count[0]->address,
                            'image'=>$offline_count[0]->image,
                            'image_signature'=>$offline_count[0]->image_signature,
                            'role'=>$offline_count[0]->role,
                            'email'=>$offline_count[0]->email,
                            'added_by'=>$offline_count[0]->added_by,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('radiologist')->insert([
                        'r_id'=> $offline->r_id,
                        'radiologist_id'=>$offline->radiologist_id,
                        'user_id'=>$offline->user_id,
                        'management_id'=>$offline->management_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'gender'=>$offline->gender,
                        'birthday'=>$offline->birthday,
                        'address'=>$offline->address,
                        'image'=>$offline->image,
                        'image_signature'=>$offline->image_signature,
                        'role'=>$offline->role,
                        'email'=>$offline->email,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize radiologist table from online to offline 
        $online = DB::connection('mysql2')->table('radiologist')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('radiologist')->where('r_id', $online->r_id)->get();
                if(count($online_count) > 0){
                    DB::table('radiologist')->where('r_id', $online->r_id)->update([
                        'radiologist_id'=>$online->radiologist_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'birthday'=>$online->birthday,
                        'address'=>$online->address,
                        'image'=>$online->image,
                        'image_signature'=>$online->image_signature,
                        'role'=>$online->role,
                        'email'=>$online->email,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('radiologist')->insert([ 
                        'r_id'=> $online->r_id,
                        'radiologist_id'=>$online->radiologist_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'birthday'=>$online->birthday,
                        'address'=>$online->address,
                        'image'=>$online->image,
                        'image_signature'=>$online->image_signature,
                        'role'=>$online->role,
                        'email'=>$online->email,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncReceivingAccount($data){
        // syncronize receiving_account table from offline to online
        $offline = DB::table('receiving_account')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('receiving_account')->where('ra_id', $offline->ra_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('receiving_account')->where('ra_id', $offline->ra_id)->update([    
                            'rcv_id'=>$offline->rcv_id,
                            'user_id'=>$offline->user_id,
                            'management_id'=>$offline->management_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'gender'=>$offline->gender,
                            'address'=>$offline->address,
                            'email'=>$offline->email,
                            'birthday'=>$offline->birthday,
                            'role'=>$offline->role,
                            'image'=>$offline->image,
                            'status'=>$offline->status,
                            'added_by'=>$offline->added_by,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('receiving_account')->where('ra_id', $offline_count[0]->ra_id)->update([  
                            'rcv_id'=>$offline_count[0]->rcv_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'gender'=>$offline_count[0]->gender,
                            'address'=>$offline_count[0]->address,
                            'email'=>$offline_count[0]->email,
                            'birthday'=>$offline_count[0]->birthday,
                            'role'=>$offline_count[0]->role,
                            'image'=>$offline_count[0]->image,
                            'status'=>$offline_count[0]->status,
                            'added_by'=>$offline_count[0]->added_by,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('receiving_account')->insert([
                        'ra_id'=> $offline->ra_id,
                        'rcv_id'=>$offline->rcv_id,
                        'user_id'=>$offline->user_id,
                        'management_id'=>$offline->management_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'gender'=>$offline->gender,
                        'address'=>$offline->address,
                        'email'=>$offline->email,
                        'birthday'=>$offline->birthday,
                        'role'=>$offline->role,
                        'image'=>$offline->image,
                        'status'=>$offline->status,
                        'added_by'=>$offline->added_by,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize receiving_account table from online to offline 
        $online = DB::connection('mysql2')->table('receiving_account')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('receiving_account')->where('ra_id', $online->ra_id)->get();
                if(count($online_count) > 0){
                    DB::table('receiving_account')->where('ra_id', $online->ra_id)->update([
                        'rcv_id'=>$online->rcv_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'address'=>$online->address,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'added_by'=>$online->added_by,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('receiving_account')->insert([ 
                        'ra_id'=> $online->ra_id,
                        'rcv_id'=>$online->rcv_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'address'=>$online->address,
                        'email'=>$online->email,
                        'birthday'=>$online->birthday,
                        'role'=>$online->role,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'added_by'=>$online->added_by,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncReceivingSpecimen($data){
        // syncronize receiving_specimen table from offline to online
        $offline = DB::table('receiving_specimen')->get();  
        // $offline = DB::table('receiving_specimen')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('receiving_specimen')->where('rs_id', $offline->rs_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('receiving_specimen')->where('rs_id', $offline->rs_id)->update([    
                            'specimen_id'=>$offline->specimen_id,
                            'patient_id'=>$offline->patient_id,
                            'specimen'=>$offline->specimen,
                            'trace_number'=>$offline->trace_number,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('receiving_specimen')->where('rs_id', $offline_count[0]->rs_id)->update([  
                            'specimen_id'=>$offline_count[0]->specimen_id,
                            'patient_id'=>$offline_count[0]->patient_id,
                            'specimen'=>$offline_count[0]->specimen,
                            'trace_number'=>$offline_count[0]->trace_number,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('receiving_specimen')->insert([
                        'rs_id'=> $offline->rs_id,
                        'specimen_id'=>$offline->specimen_id,
                        'patient_id'=>$offline->patient_id,
                        'specimen'=>$offline->specimen,
                        'trace_number'=>$offline->trace_number,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize receiving_specimen table from online to offline 
        $online = DB::connection('mysql2')->table('receiving_specimen')->get();
        // $online = DB::connection('mysql2')->table('receiving_specimen')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('receiving_specimen')->where('rs_id', $online->rs_id)->get();
                if(count($online_count) > 0){
                    DB::table('receiving_specimen')->where('rs_id', $online->rs_id)->update([
                        'specimen_id'=>$online->specimen_id,
                        'patient_id'=>$online->patient_id,
                        'specimen'=>$online->specimen,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('receiving_specimen')->insert([ 
                        'rs_id'=> $online->rs_id,
                        'specimen_id'=>$online->specimen_id,
                        'patient_id'=>$online->patient_id,
                        'specimen'=>$online->specimen,
                        'trace_number'=>$online->trace_number,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function stockroomAcccount($data){
        // syncronize stockroom_acccount table from offline to online
        $offline = DB::table('stockroom_acccount')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('stockroom_acccount')->where('sr_id', $offline->sr_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('stockroom_acccount')->where('sr_id', $offline->sr_id)->update([    
                            'stockroom_id'=>$offline->stockroom_id,
                            'management_id'=>$offline->management_id,
                            'user_id'=>$offline->user_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'gender'=>$offline->gender,
                            'birthday'=>$offline->birthday,
                            'address'=>$offline->address,
                            'image'=>$offline->image,
                            'role'=>$offline->role,
                            'email'=>$offline->email,
                            'added_by'=>$offline->added_by,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('stockroom_acccount')->where('sr_id', $offline_count[0]->sr_id)->update([  
                            'stockroom_id'=>$offline_count[0]->stockroom_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'gender'=>$offline_count[0]->gender,
                            'birthday'=>$offline_count[0]->birthday,
                            'address'=>$offline_count[0]->address,
                            'image'=>$offline_count[0]->image,
                            'role'=>$offline_count[0]->role,
                            'email'=>$offline_count[0]->email,
                            'added_by'=>$offline_count[0]->added_by,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('stockroom_acccount')->insert([
                        'stockroom_id'=>$offline->stockroom_id,
                        'management_id'=>$offline->management_id,
                        'user_id'=>$offline->user_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'gender'=>$offline->gender,
                        'birthday'=>$offline->birthday,
                        'address'=>$offline->address,
                        'image'=>$offline->image,
                        'role'=>$offline->role,
                        'email'=>$offline->email,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize stockroom_acccount table from online to offline 
        $online = DB::connection('mysql2')->table('stockroom_acccount')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('stockroom_acccount')->where('sr_id', $online->sr_id)->get();
                if(count($online_count) > 0){
                    DB::table('stockroom_acccount')->where('sr_id', $online->sr_id)->update([
                        'sr_id'=> $online->sr_id,
                        'stockroom_id'=>$online->stockroom_id,
                        'management_id'=>$online->management_id,
                        'user_id'=>$online->user_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'birthday'=>$online->birthday,
                        'address'=>$online->address,
                        'image'=>$online->image,
                        'role'=>$online->role,
                        'email'=>$online->email,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function stockroomAcccountProducts($data){
        // syncronize stockroom_account_products table from offline to online
        $offline = DB::table('stockroom_account_products')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('stockroom_account_products')->where('sap_id', $offline->sap_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('stockroom_account_products')->where('sap_id', $offline->sap_id)->update([    
                            'management_id'=>$offline->management_id,
                            'stockroom_id'=>$offline->stockroom_id,
                            'product_id'=>$offline->product_id,
                            'product'=>$offline->product,
                            'unit'=>$offline->unit,
                            'qty'=>$offline->qty,
                            'dr_number'=>$offline->dr_number,
                            'dr_date'=>$offline->dr_date,
                            'out_by'=>$offline->out_by,
                            'out_date' =>$offline->out_date,
                            'out_reason'=>$offline->out_reason,
                            'type'=>$offline->type,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('stockroom_account_products')->where('sap_id', $offline_count[0]->sap_id)->update([  
                            'management_id'=>$offline_count[0]->management_id,
                            'stockroom_id'=>$offline_count[0]->stockroom_id,
                            'product_id'=>$offline_count[0]->product_id,
                            'product'=>$offline_count[0]->product,
                            'unit'=>$offline_count[0]->unit,
                            'qty'=>$offline_count[0]->qty,
                            'dr_number'=>$offline_count[0]->dr_number,
                            'dr_date'=>$offline_count[0]->dr_date,
                            'out_by'=>$offline_count[0]->out_by,
                            'out_date' =>$offline_count[0]->out_date,
                            'out_reason'=>$offline_count[0]->out_reason,
                            'type'=>$offline_count[0]->type,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('stockroom_account_products')->insert([
                        'management_id'=>$offline->management_id,
                        'stockroom_id'=>$offline->stockroom_id,
                        'product_id'=>$offline->product_id,
                        'product'=>$offline->product,
                        'unit'=>$offline->unit,
                        'qty'=>$offline->qty,
                        'dr_number'=>$offline->dr_number,
                        'dr_date'=>$offline->dr_date,
                        'out_by'=>$offline->out_by,
                        'out_date' =>$offline->out_date,
                        'out_reason'=>$offline->out_reason,
                        'type'=>$offline->type,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize stockroom_account_products table from online to offline 
        $online = DB::connection('mysql2')->table('stockroom_account_products')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('stockroom_account_products')->where('sap_id', $online->sap_id)->get();
                if(count($online_count) > 0){
                    DB::table('stockroom_account_products')->where('sap_id', $online->sap_id)->update([
                        'management_id'=>$online->management_id,
                        'stockroom_id'=>$online->stockroom_id,
                        'product_id'=>$online->product_id,
                        'product'=>$online->product,
                        'unit'=>$online->unit,
                        'qty'=>$online->qty,
                        'dr_number'=>$online->dr_number,
                        'dr_date'=>$online->dr_date,
                        'out_by'=>$online->out_by,
                        'out_date' =>$online->out_date,
                        'out_reason'=>$online->out_reason,
                        'type'=>$online->type,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('stockroom_account_products')->insert([ 
                        'sap_id'=> $online->sap_id,
                        'management_id'=>$online->management_id,
                        'stockroom_id'=>$online->stockroom_id,
                        'product_id'=>$online->product_id,
                        'product'=>$online->product,
                        'unit'=>$online->unit,
                        'qty'=>$online->qty,
                        'dr_number'=>$online->dr_number,
                        'dr_date'=>$online->dr_date,
                        'out_by'=>$online->out_by,
                        'out_date' =>$online->out_date,
                        'out_reason'=>$online->out_reason,
                        'type'=>$online->type,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncTriageAccount($data){
        // syncronize triage_account table from offline to online
        $offline = DB::table('triage_account')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('triage_account')->where('ta_id', $offline->ta_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('triage_account')->where('ta_id', $offline->ta_id)->update([    
                            'triage_id'=>$offline->triage_id,
                            'management_id'=>$offline->management_id,
                            'user_id'=>$offline->user_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'gender'=>$offline->gender,
                            'birthday'=>$offline->birthday,
                            'address'=>$offline->address,
                            'email'=>$offline->email,
                            'role'=>$offline->role,
                            'added_by'=>$offline->added_by,
                            'image'=>$offline->image,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('triage_account')->where('ta_id', $offline_count[0]->ta_id)->update([  
                            'triage_id'=>$offline_count[0]->triage_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'gender'=>$offline_count[0]->gender,
                            'birthday'=>$offline_count[0]->birthday,
                            'address'=>$offline_count[0]->address,
                            'email'=>$offline_count[0]->email,
                            'role'=>$offline_count[0]->role,
                            'added_by'=>$offline_count[0]->added_by,
                            'image'=>$offline_count[0]->image,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('triage_account')->insert([
                        'ta_id'=> $offline->ta_id,
                        'triage_id'=>$offline->triage_id,
                        'management_id'=>$offline->management_id,
                        'user_id'=>$offline->user_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'gender'=>$offline->gender,
                        'birthday'=>$offline->birthday,
                        'address'=>$offline->address,
                        'email'=>$offline->email,
                        'role'=>$offline->role,
                        'added_by'=>$offline->added_by,
                        'image'=>$offline->image,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize triage_account table from online to offline 
        $online = DB::connection('mysql2')->table('triage_account')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('triage_account')->where('ta_id', $online->ta_id)->get();
                if(count($online_count) > 0){
                    DB::table('triage_account')->where('ta_id', $online->ta_id)->update([
                        'triage_id'=>$online->triage_id,
                        'management_id'=>$online->management_id,
                        'user_id'=>$online->user_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'birthday'=>$online->birthday,
                        'address'=>$online->address,
                        'email'=>$online->email,
                        'role'=>$online->role,
                        'added_by'=>$online->added_by,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('triage_account')->insert([ 
                        'ta_id'=> $online->ta_id,
                        'triage_id'=>$online->triage_id,
                        'management_id'=>$online->management_id,
                        'user_id'=>$online->user_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'birthday'=>$online->birthday,
                        'address'=>$online->address,
                        'email'=>$online->email,
                        'role'=>$online->role,
                        'added_by'=>$online->added_by,
                        'image'=>$online->image,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncUsers($data){
        // syncronize users table from offline to online
        $offline = DB::table('users')->where('manage_by', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('users')->where('user_id', $offline->user_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('users')->where('user_id', $offline->user_id)->update([    
                            'username'=>$offline->username,
                            'password'=>$offline->password,
                            'status'=>$offline->status, 
                            'type'=>$offline->type,
                            'email'=>$offline->email,
                            'is_verify'=>$offline->is_verify,
                            'is_confirm'=>$offline->is_confirm,
                            'manage_by'=>$offline->manage_by,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'remember_token'=>$offline->remember_token,
                            'is_disable'=>$offline->is_disable,
                            'api_token'=>$offline->api_token,
                            'is_disable_msg'=>$offline->is_disable_msg,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('users')->where('user_id', $offline_count[0]->user_id)->update([  
                            'username'=>$offline_count[0]->username,
                            'password'=>$offline_count[0]->password,
                            'status'=>$offline_count[0]->status,
                            'type'=>$offline_count[0]->type,
                            'email'=>$offline_count[0]->email,
                            'is_verify'=>$offline_count[0]->is_verify,
                            'is_confirm'=>$offline_count[0]->is_confirm,
                            'manage_by'=>$offline_count[0]->manage_by,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'remember_token'=>$offline_count[0]->remember_token,
                            'is_disable'=>$offline_count[0]->is_disable,
                            'api_token'=>$offline_count[0]->api_token,
                            'is_disable_msg'=>$offline_count[0]->is_disable_msg,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('users')->insert([
                        'user_id'=> $offline->user_id,
                        'username'=>$offline->username,
                        'password'=>$offline->password,
                        'status'=>$offline->status,
                        'type'=>$offline->type,
                        'email'=>$offline->email,
                        'is_verify'=>$offline->is_verify,
                        'is_confirm'=>$offline->is_confirm,
                        'manage_by'=>$offline->manage_by,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'remember_token'=>$offline->remember_token,
                        'is_disable'=>$offline->is_disable,
                        'api_token'=>$offline->api_token,
                        'is_disable_msg'=>$offline->is_disable_msg,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize users table from online to offline 
        $online = DB::connection('mysql2')->table('users')->where('manage_by', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('users')->where('user_id', $online->user_id)->get();
                if(count($online_count) > 0){
                    DB::table('users')->where('user_id', $online->user_id)->update([
                        'username'=>$online->username,
                        'password'=>$online->password,
                        'status'=>$online->status,
                        'type'=>$online->type,
                        'email'=>$online->email,
                        'is_verify'=>$online->is_verify,
                        'is_confirm'=>$online->is_confirm,
                        'manage_by'=>$online->manage_by,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'remember_token'=>$online->remember_token,
                        'is_disable'=>$online->is_disable,
                        'api_token'=>$online->api_token,
                        'is_disable_msg'=>$online->is_disable_msg,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('users')->insert([ 
                        'user_id'=> $online->user_id,
                        'username'=>$online->username,
                        'password'=>$online->password,
                        'status'=>$online->status,
                        'type'=>$online->type,
                        'email'=>$online->email,
                        'is_verify'=>$online->is_verify,
                        'is_confirm'=>$online->is_confirm,
                        'manage_by'=>$online->manage_by,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'remember_token'=>$online->remember_token,
                        'is_disable'=>$online->is_disable,
                        'api_token'=>$online->api_token,
                        'is_disable_msg'=>$online->is_disable_msg,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncUsersGeolocation(){
        // syncronize users_geolocation table from offline to online
        $offline = DB::table('users_geolocation')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('users_geolocation')->where('geo_id', $offline->geo_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('users_geolocation')->where('geo_id', $offline->geo_id)->update([    
                            'user_id'=>$offline->user_id,
                            'latitude'=>$offline->latitude,
                            'longitude'=>$offline->longitude,
                            'status'=>$offline->status,
                            'updated_at'=>$offline->updated_at,
                            'created_at'=>$offline->created_at
                        ]);
                    } 
                    else{
                        DB::table('users_geolocation')->where('geo_id', $offline_count[0]->geo_id)->update([  
                            'user_id'=>$offline_count[0]->user_id,
                            'latitude'=>$offline_count[0]->latitude,
                            'longitude'=>$offline_count[0]->longitude,
                            'status'=>$offline_count[0]->status,
                            'updated_at'=>$offline_count[0]->updated_at,
                            'created_at'=>$offline_count[0]->created_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('users_geolocation')->insert([
                        'geo_id'=> $offline->geo_id,
                        'user_id'=>$offline->user_id,
                        'latitude'=>$offline->latitude,
                        'longitude'=>$offline->longitude,
                        'status'=>$offline->status,
                        'updated_at'=>$offline->updated_at,
                        'created_at'=>$offline->created_at
                    ]); 
                } 
        }

        // syncronize users_geolocation table from online to offline 
        $online = DB::connection('mysql2')->table('users_geolocation')->get();
        foreach($online as $online){  
            $online_count = DB::table('users_geolocation')->where('geo_id', $online->geo_id)->get();
                if(count($online_count) > 0){
                    DB::table('users_geolocation')->where('geo_id', $online->geo_id)->update([
                        'user_id'=>$online->user_id,
                        'latitude'=>$online->latitude,
                        'longitude'=>$online->longitude,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                }else{
                    DB::table('users_geolocation')->insert([ 
                        'geo_id'=> $online->geo_id,
                        'user_id'=>$online->user_id,
                        'latitude'=>$online->latitude,
                        'longitude'=>$online->longitude,
                        'status'=>$online->status,
                        'updated_at'=>$online->updated_at,
                        'created_at'=>$online->created_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncWarehouseAccounts($data){
        // syncronize warehouse_accounts table from offline to online
        $offline = DB::table('warehouse_accounts')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('warehouse_accounts')->where('wa_id', $offline->wa_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('warehouse_accounts')->where('wa_id', $offline->wa_id)->update([    
                            'warehouse_id'=>$offline->warehouse_id,
                            'user_id'=>$offline->user_id,
                            'management_id'=>$offline->management_id,
                            'main_mgmt_id'=>$offline->main_mgmt_id,
                            'user_fullname'=>$offline->user_fullname,
                            'user_address'=>$offline->user_address,
                            'name'=>$offline->name,
                            'gender'=>$offline->gender,
                            'birthday'=>$offline->birthday,
                            'address'=>$offline->address,
                            'email'=>$offline->email,
                            'image'=>$offline->image,
                            'role'=>$offline->role,
                            'added_by'=>$offline->added_by,
                            'status'=>$offline->status,
                            'created_at'=>$offline->created_at,
                            'updated_at'=>$offline->updated_at
                        ]);
                    } 
                    else{
                        DB::table('warehouse_accounts')->where('wa_id', $offline_count[0]->wa_id)->update([  
                            'warehouse_id'=>$offline_count[0]->warehouse_id,
                            'user_id'=>$offline_count[0]->user_id,
                            'management_id'=>$offline_count[0]->management_id,
                            'main_mgmt_id'=>$offline_count[0]->main_mgmt_id,
                            'user_fullname'=>$offline_count[0]->user_fullname,
                            'user_address'=>$offline_count[0]->user_address,
                            'name'=>$offline_count[0]->name,
                            'gender'=>$offline_count[0]->gender,
                            'birthday'=>$offline_count[0]->birthday,
                            'address'=>$offline_count[0]->address,
                            'email'=>$offline_count[0]->email,
                            'image'=>$offline_count[0]->image,
                            'role'=>$offline_count[0]->role,
                            'added_by'=>$offline_count[0]->added_by,
                            'status'=>$offline_count[0]->status,
                            'created_at'=>$offline_count[0]->created_at,
                            'updated_at'=>$offline_count[0]->updated_at
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('warehouse_accounts')->insert([
                        'wa_id'=> $offline->wa_id,
                        'warehouse_id'=>$offline->warehouse_id,
                        'user_id'=>$offline->user_id,
                        'management_id'=>$offline->management_id,
                        'main_mgmt_id'=>$offline->main_mgmt_id,
                        'user_fullname'=>$offline->user_fullname,
                        'user_address'=>$offline->user_address,
                        'name'=>$offline->name,
                        'gender'=>$offline->gender,
                        'birthday'=>$offline->birthday,
                        'address'=>$offline->address,
                        'email'=>$offline->email,
                        'image'=>$offline->image,
                        'role'=>$offline->role,
                        'added_by'=>$offline->added_by,
                        'status'=>$offline->status,
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize warehouse_accounts table from online to offline 
        $online = DB::connection('mysql2')->table('warehouse_accounts')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('warehouse_accounts')->where('wa_id', $online->wa_id)->get();
                if(count($online_count) > 0){
                    DB::table('warehouse_accounts')->where('wa_id', $online->wa_id)->update([
                        'warehouse_id'=>$online->warehouse_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'birthday'=>$online->birthday,
                        'address'=>$online->address,
                        'email'=>$online->email,
                        'image'=>$online->image,
                        'role'=>$online->role,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('warehouse_accounts')->insert([ 
                        'wa_id'=> $online->wa_id,
                        'warehouse_id'=>$online->warehouse_id,
                        'user_id'=>$online->user_id,
                        'management_id'=>$online->management_id,
                        'main_mgmt_id'=>$online->main_mgmt_id,
                        'user_fullname'=>$online->user_fullname,
                        'user_address'=>$online->user_address,
                        'name'=>$online->name,
                        'gender'=>$online->gender,
                        'birthday'=>$online->birthday,
                        'address'=>$online->address,
                        'email'=>$online->email,
                        'image'=>$online->image,
                        'role'=>$online->role,
                        'added_by'=>$online->added_by,
                        'status'=>$online->status,
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }


    public static function syncLabSarsCov($data){
        // syncronize laboratory_sars_cov table from offline to online
        $offline = DB::table('laboratory_sars_cov')->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('laboratory_sars_cov')->where('lsc_id', $offline->lsc_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('laboratory_sars_cov')->where('lsc_id', $offline->lsc_id)->update([    
                            'is_viewed' => $offline->is_viewed,
                            'is_processed' => $offline->is_processed,
                            'is_processed_by' => $offline->is_processed_by,
                            'is_processed_time_start' => $offline->is_processed_time_start,
                            'is_processed_time_end' => $offline->is_processed_time_end,
                            'is_pending' => $offline->is_pending,
                            'is_pending_reason' => $offline->is_pending_reason,
                            'is_pending_date' => $offline->is_pending_date,
                            'is_pending_by' => $offline->is_pending_by,
                            'sars_cov' => $offline->sars_cov, 
                            'sars_cov_result' => $offline->sars_cov_result, 
                            'remarks' => $offline->remarks, 
                            'order_status' => $offline->order_status, 
                            'medtech' => $offline->medtech, 
                            'trace_number' => $offline->trace_number, 
                            'status' => $offline->status,   
                            'updated_at'=>$offline->updated_at 
                        ]);
                    } 
                    else{
                        DB::table('laboratory_sars_cov')->where('lsc_id', $offline_count[0]->lsc_id)->update([   
                        'is_viewed' => $offline_count[0]->is_viewed,
                        'is_processed' => $offline_count[0]->is_processed,
                        'is_processed_by' => $offline_count[0]->is_processed_by,
                        'is_processed_time_start' => $offline_count[0]->is_processed_time_start,
                        'is_processed_time_end' => $offline_count[0]->is_processed_time_end,
                        'is_pending' => $offline_count[0]->is_pending,
                        'is_pending_reason' => $offline_count[0]->is_pending_reason,
                        'is_pending_date' => $offline_count[0]->is_pending_date,
                        'is_pending_by' => $offline_count[0]->is_pending_by,
                        'sars_cov' => $offline_count[0]->sars_cov, 
                        'sars_cov_result' => $offline_count[0]->sars_cov_result, 
                        'remarks' => $offline_count[0]->remarks, 
                        'order_status' => $offline_count[0]->order_status, 
                        'medtech' => $offline_count[0]->medtech, 
                        'trace_number' => $offline_count[0]->trace_number, 
                        'status' => $offline_count[0]->status,   
                        'updated_at'=>$offline_count[0]->updated_at 
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('laboratory_sars_cov')->insert([
                        'lsc_id'=> $offline->lsc_id, 
                        'order_id' => $offline->order_id,
                        'patient_id' => $offline->patient_id,
                        'laboratory_id' => $offline->laboratory_id,
                        'ward_nurse_id' => $offline->ward_nurse_id,
                        'case_file' => $offline->case_file,
                        'is_viewed' => $offline->is_viewed,
                        'is_processed' => $offline->is_processed,
                        'is_processed_by' => $offline->is_processed_by,
                        'is_processed_time_start' => $offline->is_processed_time_start,
                        'is_processed_time_end' => $offline->is_processed_time_end,
                        'is_pending' => $offline->is_pending,
                        'is_pending_reason' => $offline->is_pending_reason,
                        'is_pending_date' => $offline->is_pending_date,
                        'is_pending_by' => $offline->is_pending_by,
                        'sars_cov' => $offline->sars_cov, 
                        'sars_cov_result' => $offline->sars_cov_result, 
                        'remarks' => $offline->remarks, 
                        'order_status' => $offline->order_status, 
                        'medtech' => $offline->medtech, 
                        'trace_number' => $offline->trace_number, 
                        'status' => $offline->status,  
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize laboratory_sars_cov table from online to offline 
        $online = DB::connection('mysql2')->table('laboratory_sars_cov')->get();
        foreach($online as $online){  
            $online_count = DB::table('laboratory_sars_cov')->where('lsc_id', $online->lsc_id)->get();
                if(count($online_count) > 0){
                    DB::table('laboratory_sars_cov')->where('lsc_id', $online->lsc_id)->update([ 
                        'is_viewed' => $online->is_viewed,
                        'is_processed' => $online->is_processed,
                        'is_processed_by' => $online->is_processed_by,
                        'is_processed_time_start' => $online->is_processed_time_start,
                        'is_processed_time_end' => $online->is_processed_time_end,
                        'is_pending' => $online->is_pending,
                        'is_pending_reason' => $online->is_pending_reason,
                        'is_pending_date' => $online->is_pending_date,
                        'is_pending_by' => $online->is_pending_by,
                        'sars_cov' => $online->sars_cov, 
                        'sars_cov_result' => $online->sars_cov_result, 
                        'remarks' => $online->remarks, 
                        'order_status' => $online->order_status, 
                        'medtech' => $online->medtech, 
                        'trace_number' => $online->trace_number, 
                        'status' => $online->status,   
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('laboratory_sars_cov')->insert([ 
                        'lsc_id'=> $online->lsc_id,  
                        'order_id' => $online->order_id,
                        'patient_id' => $online->patient_id,
                        'laboratory_id' => $online->laboratory_id,
                        'ward_nurse_id' => $online->ward_nurse_id,
                        'case_file' => $online->case_file,
                        'is_viewed' => $online->is_viewed,
                        'is_processed' => $online->is_processed,
                        'is_processed_by' => $online->is_processed_by,
                        'is_processed_time_start' => $online->is_processed_time_start,
                        'is_processed_time_end' => $online->is_processed_time_end,
                        'is_pending' => $online->is_pending,
                        'is_pending_reason' => $online->is_pending_reason,
                        'is_pending_date' => $online->is_pending_date,
                        'is_pending_by' => $online->is_pending_by,
                        'sars_cov' => $online->sars_cov, 
                        'sars_cov_result' => $online->sars_cov_result, 
                        'remarks' => $online->remarks, 
                        'order_status' => $online->order_status, 
                        'medtech' => $online->medtech, 
                        'trace_number' => $online->trace_number, 
                        'status' => $online->status,  
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    }

    public static function syncClinicAllHistoryPE($data){
        // syncronize clinic_all_history_pe table from offline to online
        $offline = DB::table('clinic_all_history_pe')->where('management_id', $data['management_id'])->get();  
        foreach($offline as $offline){  
            $offline_count = DB::connection('mysql2')->table('clinic_all_history_pe')->where('cahp_id', $offline->cahp_id)->get();
                if(count($offline_count) > 0){ 
                    if($offline->updated_at > $offline_count[0]->updated_at){  
                        DB::connection('mysql2')->table('clinic_all_history_pe')->where('cahp_id', $offline->cahp_id)->update([     
                            'datetime_admission'=> $offline->datetime_admission,  
                            'datetime_discharge'=> $offline->datetime_discharge,  
                            'attending_physician'=> $offline->attending_physician,  
                            'admitting_impression'=> $offline->admitting_impression,  
                            'chief_complaint'=> $offline->chief_complaint,  
                            'pertinent_pe'=> $offline->pertinent_pe,  
                            'past_history'=> $offline->past_history,  
                            'fam_history'=> $offline->fam_history,  
                            'medications'=> $offline->medications,  
                            'procedures'=> $offline->procedures,  
                            'laboratory_results'=> $offline->laboratory_results,  
                            'course_inthe_ward'=> $offline->course_inthe_ward,  
                            'recommendation'=> $offline->recommendation,  
                            'condition_on_discharge'=> $offline->condition_on_discharge,  
                            'final_diagnosis'=> $offline->final_diagnosis,  
                            'status' => $offline->status,   
                            'updated_at'=>$offline->updated_at 
                        ]);
                    } 
                    else{
                        DB::table('clinic_all_history_pe')->where('cahp_id', $offline_count[0]->cahp_id)->update([  
                            'datetime_admission'=> $offline_count[0]->datetime_admission,  
                            'datetime_discharge'=> $offline_count[0]->datetime_discharge,  
                            'attending_physician'=> $offline_count[0]->attending_physician,  
                            'admitting_impression'=> $offline_count[0]->admitting_impression,  
                            'chief_complaint'=> $offline_count[0]->chief_complaint,  
                            'pertinent_pe'=> $offline_count[0]->pertinent_pe,  
                            'past_history'=> $offline_count[0]->past_history,  
                            'fam_history'=> $offline_count[0]->fam_history,  
                            'medications'=> $offline_count[0]->medications,  
                            'procedures'=> $offline_count[0]->procedures,  
                            'laboratory_results'=> $offline_count[0]->laboratory_results,  
                            'course_inthe_ward'=> $offline_count[0]->course_inthe_ward,  
                            'recommendation'=> $offline_count[0]->recommendation,  
                            'condition_on_discharge'=> $offline_count[0]->condition_on_discharge,  
                            'final_diagnosis'=> $offline_count[0]->final_diagnosis,  
                            'status' => $offline_count[0]->status,   
                            'updated_at'=>$offline_count[0]->updated_at 
                        ]);
                    }  
                }else{
                    DB::connection('mysql2')->table('clinic_all_history_pe')->insert([
                        'cahp_id'=> $offline->cahp_id,  
                        'main_mgmt_id'=> $offline->main_mgmt_id,  
                        'management_id'=> $offline->management_id,  
                        'patient_id'=> $offline->patient_id,  
                        'datetime_admission'=> $offline->datetime_admission,  
                        'datetime_discharge'=> $offline->datetime_discharge,  
                        'attending_physician'=> $offline->attending_physician,  
                        'admitting_impression'=> $offline->admitting_impression,  
                        'chief_complaint'=> $offline->chief_complaint,  
                        'pertinent_pe'=> $offline->pertinent_pe,  
                        'past_history'=> $offline->past_history,  
                        'fam_history'=> $offline->fam_history,  
                        'medications'=> $offline->medications,  
                        'procedures'=> $offline->procedures,  
                        'laboratory_results'=> $offline->laboratory_results,  
                        'course_inthe_ward'=> $offline->course_inthe_ward,  
                        'recommendation'=> $offline->recommendation,  
                        'condition_on_discharge'=> $offline->condition_on_discharge,  
                        'final_diagnosis'=> $offline->final_diagnosis,   
                        'status' => $offline->status,  
                        'created_at'=>$offline->created_at,
                        'updated_at'=>$offline->updated_at
                    ]); 
                } 
        }

        // syncronize clinic_all_history_pe table from online to offline 
        $online = DB::connection('mysql2')->table('clinic_all_history_pe')->where('management_id', $data['management_id'])->get();
        foreach($online as $online){  
            $online_count = DB::table('clinic_all_history_pe')->where('cahp_id', $online->cahp_id)->get();
                if(count($online_count) > 0){
                    DB::table('clinic_all_history_pe')->where('cahp_id', $online->cahp_id)->update([  
                        'datetime_admission'=> $online->datetime_admission,  
                        'datetime_discharge'=> $online->datetime_discharge,  
                        'attending_physician'=> $online->attending_physician,  
                        'admitting_impression'=> $online->admitting_impression,  
                        'chief_complaint'=> $online->chief_complaint,  
                        'pertinent_pe'=> $online->pertinent_pe,  
                        'past_history'=> $online->past_history,  
                        'fam_history'=> $online->fam_history,  
                        'medications'=> $online->medications,  
                        'procedures'=> $online->procedures,  
                        'laboratory_results'=> $online->laboratory_results,  
                        'course_inthe_ward'=> $online->course_inthe_ward,  
                        'recommendation'=> $online->recommendation,  
                        'condition_on_discharge'=> $online->condition_on_discharge,  
                        'final_diagnosis'=> $online->final_diagnosis,   
                        'status' => $online->status,   
                        'updated_at'=>$online->updated_at
                    ]); 
                }else{
                    DB::table('clinic_all_history_pe')->insert([ 
                        'cahp_id'=> $online->cahp_id,     
                        'main_mgmt_id'=> $online->main_mgmt_id,  
                        'management_id'=> $online->management_id,  
                        'patient_id'=> $online->patient_id,  
                        'datetime_admission'=> $online->datetime_admission,  
                        'datetime_discharge'=> $online->datetime_discharge,  
                        'attending_physician'=> $online->attending_physician,  
                        'admitting_impression'=> $online->admitting_impression,  
                        'chief_complaint'=> $online->chief_complaint,  
                        'pertinent_pe'=> $online->pertinent_pe,  
                        'past_history'=> $online->past_history,  
                        'fam_history'=> $online->fam_history,  
                        'medications'=> $online->medications,  
                        'procedures'=> $online->procedures,  
                        'laboratory_results'=> $online->laboratory_results,  
                        'course_inthe_ward'=> $online->course_inthe_ward,  
                        'recommendation'=> $online->recommendation,  
                        'condition_on_discharge'=> $online->condition_on_discharge,  
                        'final_diagnosis'=> $online->final_diagnosis,   
                        'status' => $online->status,  
                        'created_at'=>$online->created_at,
                        'updated_at'=>$online->updated_at
                    ]); 
                } 
        }   

        return true;
    } 
    
}